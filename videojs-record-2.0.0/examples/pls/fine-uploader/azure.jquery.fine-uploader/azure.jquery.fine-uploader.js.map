{"version":3,"sources":["?","../client/js/jquery-plugin.js","../client/js/jquery-dnd.js","../client/js/azure/jquery-plugin.js","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/window.receive.message.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","../client/js/azure/util.js","../client/js/non-traditional-common/uploader.basic.api.js","../client/js/azure/uploader.basic.js","../client/js/azure/azure.xhr.upload.handler.js","../client/js/azure/get-sas.js","../client/js/uploadsuccess.ajax.requester.js","../client/js/azure/rest/delete-blob.js","../client/js/azure/rest/put-blob.js","../client/js/azure/rest/put-block.js","../client/js/azure/rest/put-block-list.js","../client/js/dnd.js","../client/js/uploader.api.js","../client/js/uploader.js","../client/js/templating.js","../client/js/ui.handler.events.js","../client/js/ui.handler.click.filebuttons.js","../client/js/ui.handler.click.filename.js","../client/js/ui.handler.focusin.filenameinput.js","../client/js/ui.handler.focus.filenameinput.js","../client/js/ui.handler.edit.filename.js","../client/js/azure/uploader.js"],"names":["global","$","$el","pluginOptions","init","options","xformedOpts","transformVariables","newUploaderInstance","getNewUploaderInstance","uploader","addCallbacks","params","uploaderType","pluginOption","namespace","charAt","toUpperCase","slice","toLowerCase","qq","FineUploader","dataStore","key","val","data","undefined","instanceToStore","option","optionVal","transformedOpts","callbacks","each","_options","prop","nonJqueryCallback","name","callbackEventTarget","exec","substring","originalArgs","Array","prototype","call","arguments","transformedArgs","nonJqueryCallbackRetVal","jqueryEventCallbackRetVal","idx","arg","push","maybeWrapInJquery","apply","this","triggerHandler","error","log","message","source","dest","xformed","arrayVals","element","inArray","isPlainObject","isArray","arrayVal","arrayObjDest","merge","isValidCommand","command","type","match","delegateCommand","xformedArgs","origArgs","retVal","transformedVal","nodeType","cloneNode","fn","fineUploader","optionsOrCommand","self","selfArgs","retVals","index","el","length","jQuery","rootDataKey","dropZoneElements","dnd","DragAndDrop","func","$callbackEl","args","jqueryHandlerResult","fineUploaderDnd","fineUploaderAzure","endpointType","hide","style","display","attach","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","getFirstByClass","children","child","firstChild","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","getAttribute","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","Uint8Array","character","charCodeAt","level","console","isObject","variable","Object","toString","isFunction","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","newStr","nextIdxToReplace","strBefore","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","override","target","sourceFn","super_","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","Storage","getItem","bind","oldFunc","context","newArgs","concat","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome21OrHigher","isChrome14OrHigher","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","disposeSupport","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","batchId","proxyGroupId","onBeforeStatusChange","onStatusChange","retrieve","optionalFilter","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","file","normalizeData","fileContainer","_prepareItemsForUpload","cancel","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","uploadData","_uploadData","enabled","getName","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","debug","pauseUpload","removeFileRef","expunge","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","fileRecord","_onDeleteComplete","errorMessage","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkSuccess","onResume","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","UploadHandlerController","_fileOrBlobRejected","_formatSize","sizeSymbols","max","toFixed","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_handleDeleteSuccess","_handleDeleteFailed","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","retryWaitPeriod","autoAttemptDelay","_onBeforeAutoRetry","itemLimit","onManualRetry","clearTimeout","storedItemIndex","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","enableAuto","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","allowEmpty","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","filenameParam","forceMultipart","paramsInBody","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partIndex","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","recordsExpireIn","resuming","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","handleFailure","clearCachedChunk","responseToReport","inProgressIdx","inProgress","remaining","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","connectionManager","free","hasMoreParts","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","available","uploadChunk","inProgressChunkIdx","_maybePersistChunkedState","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","isResumable","WindowReceiveMessage","callbackWrapperDetachers","receiveMessage","onMessageCallbackWrapper","stopReceivingMessages","detacher","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","expungeFile","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","_getLocalStorageId","formatVersion","_getMimeType","_getPersistableData","ceil","_markNotResumable","localStorageId","removeItem","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","record","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","azure","util","AZURE_PARAM_PREFIX","_paramNameMatchesAzureParameter","_getPrefixedParamName","getParamsAsHeaders","headerName","parseAzureError","domParser","DOMParser","responseDoc","parseFromString","errorTag","errorDetails","codeTag","messageTag","nonTraditionalBasePublicApi","setUploadSuccessParams","_uploadSuccessParamsStore","setUploadSuccessEndpoint","_uploadSuccessEndpointStore","nonTraditionalBasePrivateApi","onCompleteArgs","successEndpoint","successCustomHeaders","uploadSuccess","successMethod","uploadSuccessParams","fileParams","onSuccessFromServer","successRequestResult","_failedSuccessRequestCallbacks","onFailureFromServer","submitSuccessRequest","successAjaxRequester","UploadSuccessAjaxRequester","_getEndpointSpecificParams","sendSuccessRequest","successRequestCallback","signature","blobProperties","minFileSize","_cannedBlobNames","getBlobName","onGetBlobName","_determineBlobName","deleteBlob","_deleteBlob","blobNameOptionValue","fileExtension","blobNameToUse","blobName","relatedToCancel","deleteBlobSasUri","blobUriStore","deleteFileEndpointStore","getSasSuccess","sasUri","getSasFailure","DeleteBlob","getSas","GetSas","restRequestVerb","minFileSizeForChunking","getBlobMetadata","putBlob","PutBlob","putBlock","PutBlock","putBlockList","PutBlockList","getSasForPutBlobOrBlock","combineChunks","getSignedUrl","mimeType","blockIdEntries","determineBlobUrl","containerUrl","getBlobNameSuccess","getBlobNameFailure","getSasId","getSasXhr","determineBlobUrlSuccess","blobUrl","determineBlobUrlFailure","azureError","blockIdEntry","chunkingData","maybePossible","requestPromises","sasResponseReceived","blobUri","requestPromise","restVerb","bloburi","pendingRequests","handleSuccessResponse","responseJson","successIndicator","failureIndicator","parsedResponse","codes","endpoints","promises","endpointHandler","Content-Type","createBlockId","partNum","digits","zeros","paddedPartNum","btoa","blockId","createRequestBody","doc","implementation","createDocument","latestEl","latestTextEl","createTextNode","XMLSerializer","serializeToString","fileMimeType","registerXhrCallback","blockIdsXml","x-ms-blob-content-type","HIDE_ZONES_EVENT_NAME","HIDE_BEFORE_ENTER_ATTR","uploadDropZones","droppedFiles","allowMultipleItems","dropActive","uploadDroppedFiles","uploadDropZone","filesAsArray","dropLog","dropDisabled","processingDroppedFilesComplete","getElement","traverseFileTree","parseEntryPromise","fullPath","indexOfNameInFullPath","qqPath","fileError","isDirectory","getFilesInDirectory","allEntriesRead","entriesLeft","readFailure","accumEntries","existingPromise","dirReader","createReader","readEntries","readSuccess","newEntries","handleDataTransfer","pendingFolderPromises","handleDataTransferPromise","processingDroppedFiles","dropError","setupDropzone","dropArea","dropZone","UploadDropZone","onEnter","stopPropagation","onLeaveNotDescendants","onDrop","isFileDrag","dragEvent","fileDrag","types","leavingDocumentOut","relatedTarget","y","setupDragDrop","dropZones","maybeHideDropZones","HTMLElement","setupExtraDropzone","removeDropzone","dzs","targetEl","errorSpecifics","preventDrop","dropOutsideDisabled","dragoverShouldBeCanceled","disableDropOutside","dropEffect","isValidFileDrag","effectTest","dt","isSafari","effectAllowed","isOrSetDropDisabled","isDisabled","triggerHidezonesEvent","hideZonesEvent","triggerUsingOldApi","createEvent","initEvent","CustomEvent","dispatchEvent","attachEvents","effect","elementFromPoint","clientX","clientY","uiPublicApi","_parent","_templating","addCacheToDom","clearFiles","addExtraDropzone","_dnd","removeExtraDropzone","getItemByFileId","isHiddenForever","getFileContainer","_setupDragAndDrop","_totalFilesInBatch","_filesInBatchAddedToUi","_setupClickAndEditEventHandlers","formattedFilename","updateFilename","uploadPaused","continued","uploadContinued","getId","fileContainerOrChildEl","getFileId","getDropTarget","qqDropTarget","uiPrivateApi","_removeFileItem","removeFile","_fileButtonsClickHandler","FileButtonsClickHandler","_bindFileButtonsClickEvent","_focusinEventSupported","_isEditFilenameEnabled","_filenameClickHandler","_bindFilenameClickEvent","_filenameInputFocusInHandler","_bindFilenameInputFocusInEvent","_filenameInputFocusHandler","_bindFilenameInputFocusEvent","dragAndDrop","extraDropzones","templating","defaultDropZone","getDropZone","showDropProcessing","hideDropProcessing","errorData","lvl","onDeleteFile","onRetry","onPause","onContinue","onGetName","isEditFilenamePossible","FilenameClickHandler","FilenameInputFocusHandler","_filenameEditHandler","onGetUploadStatus","onSetName","onEditingStatusChange","isEditing","qqInput","getEditInput","qqFileContainer","hideFilename","hideEditIcon","showFilename","showEditIcon","markFilenameEditable","hideRetry","setStatusText","_classes","retrying","hidePause","FilenameInputFocusInHandler","hideSpinner","resetTotalProgress","reportDirectoryPaths","qqpath","_addToList","addHandler","updateProgress","hideCancel","hideProgress","waitingForResponse","_displayFileSize","parentRetVal","completeUpload","_markFileAsSuccessful","fail","showCancel","isRetryPossible","showRetry","_controlFailureTextDisplay","newResult","showDeleteButton","_maybeUpdateThumbnail","showSpinner","allowPause","retryNumForDisplay","maxAuto","retryNote","_showCancelLink","showAutoRetryNote","autoRetryNote","resetProgress","_onSubmitDeleteSuccess","forceConfirm","_showDeleteConfirm","_sendDeleteRequest","deletingFailedText","hideDeleteButton","deletingStatusText","confirmMessage","deleteRequestArgs","showConfirm","canned","prependData","prependIndex","dontDisplay","hideScaled","prependFiles","disableCancel","_handledProxyGroup","_clearList","addFileToCache","updateThumbnail","thumbnails","generatePreview","fileSizeOnSubmit","loadedSize","sizeForDisplay","_formatProgress","uploadedSize","formatProgress","mode","responseProperty","failureReason","failedUploadTextDisplay","failUpload","enableTooltip","_showTooltip","showMessage","_setupPastePrompt","namePromptMessage","defaultVal","showPrompt","fileStatus","placeholders","waitUntilResponse","listElement","template","editable","tooManyFilesError","unsupportedBrowser","promptForName","maxCount","notAvailablePath","waitingPath","timeBetweenThumbs","hasDialog","showDialog","confirm","defaultValue","prompt","Templating","templateIdOrEl","containerEl","fileContainerEl","maxThumbs","waitUntilUpdate","thumbnailNotAvailable","waitingForThumbnail","renderFailure","FILE_ID_ATTR","FILE_CLASS_PREFIX","THUMBNAIL_MAX_SIZE_ATTR","THUMBNAIL_SERVER_SCALE_ATTR","HIDE_DROPZONE_ATTR","DROPZPONE_TEXT_ATTR","IN_PROGRESS_CLASS","HIDDEN_FOREVER_CLASS","fileBatch","content","createDocumentFragment","map","isCancelDisabled","generatedThumbnails","thumbnailQueueMonitorRunning","thumbGenerationQueue","thumbnailMaxSize","selectorClasses","alertDialog","dialogCancelButton","confirmDialog","dialogMessage","dialogOkButton","promptDialog","drop","list","progressBarContainer","totalProgressBarContainer","totalProgressBar","spinner","continueButton","deleteButton","statusText","editFilenameInput","editNameIcon","dropText","dropProcessing","dropProcessingSpinner","thumbnail","previewGeneration","cachedThumbnailNotAvailableImg","cachedWaitingForThumbnailImg","isEditElementsExist","isRetryElementExist","templateHtml","showThumbnails","serverScale","cacheThumbnailPlaceholders","notAvailableUrl","waitingUrl","updatedImg","displayWaitingImg","waitingImgPlacement","maybeScalePlaceholderViaCss","show","generateNewPreview","getThumbnail","qqThumbnailId","maybeSetDisplayNotAvailableImg","generateNextQueuedPreview","queuedThumbRequest","update","processUpdateQueuedPreviewRequest","processNewQueuedPreviewRequest","getCancel","getTemplateEl","getContinue","getDialog","getDelete","getDropProcessing","getEditIcon","getPause","getProgress","getRetry","getSpinner","cssClass","previewing","notAvailableImgPlacement","parseAndGetTemplate","scriptEl","scriptHtml","fileListNode","tempTemplateEl","fileListHtml","defaultButton","dropTextEl","uploaderEl","fileTemplate","prependFile","parentEl","beforeEl","optFileOrBlob","relatedThumbnailId","useCachedPreview","showWaitingImg","setProgressBarWidth","percent","bar","progressBarSelector","targetThumbnailId","cachedThumbnailId","targetThumbnail","cachedThumbnail","hideTotalProgress","cantRenderEl","prependInfo","hideForever","batch","fileEl","fileNameEl","thumb","waitingImg","currentNode","getFileList","filenameEl","isFileName","icon","isEditIcon","isEditInput","isCancel","allowContinueButton","isPause","isContinueButton","isDeleteButton","isRetry","textEl","dialog","messageEl","inputEl","cancelBtn","okBtn","closeHandler","cancelClickHandler","okClickHandler","close","showModal","UiEventHandler","s","protectedApi","eventType","attachTo","onHandled","srcElement","getFileIdFromItem","qqFileId","getDisposeSupport","inheritedInternalApi","buttonHandlers","examineEvent","buttonType","firstLetterCapButtonType","handleFilenameEdit","FilenameEditHandler","handleInputFocus","getFilenameSansExtension","filenameSansExt","getOriginalExtension","origName","handleNameUpdate","newFilenameInputEl","origExtension","registerInputBlurHandler","registerInputEnterKeyHandler","keyCode","which","focusInput","focus"],"mappings":"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","file":"azure.jquery.fine-uploader.js","sourcesContent":[null,"/*globals jQuery, qq*/\r\n(function($) {\r\n    \"use strict\";\r\n    var $el,\r\n        pluginOptions = [\"uploaderType\", \"endpointType\"];\r\n\r\n    function init(options) {\r\n        var xformedOpts = transformVariables(options || {}),\r\n            newUploaderInstance = getNewUploaderInstance(xformedOpts);\r\n\r\n        uploader(newUploaderInstance);\r\n        addCallbacks(xformedOpts, newUploaderInstance);\r\n\r\n        return $el;\r\n    }\r\n\r\n    function getNewUploaderInstance(params) {\r\n        var uploaderType = pluginOption(\"uploaderType\"),\r\n            namespace = pluginOption(\"endpointType\");\r\n\r\n        // If the integrator has defined a specific type of uploader to load, use that, otherwise assume `qq.FineUploader`\r\n        if (uploaderType) {\r\n            // We can determine the correct constructor function to invoke by combining \"FineUploader\"\r\n            // with the upper camel cased `uploaderType` value.\r\n            uploaderType = uploaderType.charAt(0).toUpperCase() + uploaderType.slice(1).toLowerCase();\r\n\r\n            if (namespace) {\r\n                return new qq[namespace][\"FineUploader\" + uploaderType](params);\r\n            }\r\n\r\n            return new qq[\"FineUploader\" + uploaderType](params);\r\n        }\r\n        else {\r\n            if (namespace) {\r\n                return new qq[namespace].FineUploader(params);\r\n            }\r\n\r\n            return new qq.FineUploader(params);\r\n        }\r\n    }\r\n\r\n    function dataStore(key, val) {\r\n        var data = $el.data(\"fineuploader\");\r\n\r\n        if (val) {\r\n            if (data === undefined) {\r\n                data = {};\r\n            }\r\n            data[key] = val;\r\n            $el.data(\"fineuploader\", data);\r\n        }\r\n        else {\r\n            if (data === undefined) {\r\n                return null;\r\n            }\r\n            return data[key];\r\n        }\r\n    }\r\n\r\n    //the underlying Fine Uploader instance is stored in jQuery's data stored, associated with the element\r\n    // tied to this instance of the plug-in\r\n    function uploader(instanceToStore) {\r\n        return dataStore(\"uploader\", instanceToStore);\r\n    }\r\n\r\n    function pluginOption(option, optionVal) {\r\n        return dataStore(option, optionVal);\r\n    }\r\n\r\n    // Implement all callbacks defined in Fine Uploader as functions that trigger appropriately names events and\r\n    // return the result of executing the bound handler back to Fine Uploader\r\n    function addCallbacks(transformedOpts, newUploaderInstance) {\r\n        var callbacks = transformedOpts.callbacks = {};\r\n\r\n        $.each(newUploaderInstance._options.callbacks, function(prop, nonJqueryCallback) {\r\n            var name, callbackEventTarget;\r\n\r\n            name = /^on(\\w+)/.exec(prop)[1];\r\n            name = name.substring(0, 1).toLowerCase() + name.substring(1);\r\n            callbackEventTarget = $el;\r\n\r\n            callbacks[prop] = function() {\r\n                var originalArgs = Array.prototype.slice.call(arguments),\r\n                    transformedArgs = [],\r\n                    nonJqueryCallbackRetVal, jqueryEventCallbackRetVal;\r\n\r\n                $.each(originalArgs, function(idx, arg) {\r\n                    transformedArgs.push(maybeWrapInJquery(arg));\r\n                });\r\n\r\n                nonJqueryCallbackRetVal = nonJqueryCallback.apply(this, originalArgs);\r\n\r\n                try {\r\n                    jqueryEventCallbackRetVal = callbackEventTarget.triggerHandler(name, transformedArgs);\r\n                }\r\n                catch (error) {\r\n                    qq.log(\"Caught error in Fine Uploader jQuery event handler: \" + error.message, \"error\");\r\n                }\r\n\r\n                /*jshint -W116*/\r\n                if (nonJqueryCallbackRetVal != null) {\r\n                    return nonJqueryCallbackRetVal;\r\n                }\r\n                return jqueryEventCallbackRetVal;\r\n            };\r\n        });\r\n\r\n        newUploaderInstance._options.callbacks = callbacks;\r\n    }\r\n\r\n    //transform jQuery objects into HTMLElements, and pass along all other option properties\r\n    function transformVariables(source, dest) {\r\n        var xformed, arrayVals;\r\n\r\n        if (dest === undefined) {\r\n            if (source.uploaderType !== \"basic\") {\r\n                xformed = { element: $el[0] };\r\n            }\r\n            else {\r\n                xformed = {};\r\n            }\r\n        }\r\n        else {\r\n            xformed = dest;\r\n        }\r\n\r\n        $.each(source, function(prop, val) {\r\n            if ($.inArray(prop, pluginOptions) >= 0) {\r\n                pluginOption(prop, val);\r\n            }\r\n            else if (val instanceof $) {\r\n                xformed[prop] = val[0];\r\n            }\r\n            else if ($.isPlainObject(val)) {\r\n                xformed[prop] = {};\r\n                transformVariables(val, xformed[prop]);\r\n            }\r\n            else if ($.isArray(val)) {\r\n                arrayVals = [];\r\n                $.each(val, function(idx, arrayVal) {\r\n                    var arrayObjDest = {};\r\n\r\n                    if (arrayVal instanceof $) {\r\n                        $.merge(arrayVals, arrayVal);\r\n                    }\r\n                    else if ($.isPlainObject(arrayVal)) {\r\n                        transformVariables(arrayVal, arrayObjDest);\r\n                        arrayVals.push(arrayObjDest);\r\n                    }\r\n                    else {\r\n                        arrayVals.push(arrayVal);\r\n                    }\r\n                });\r\n                xformed[prop] = arrayVals;\r\n            }\r\n            else {\r\n                xformed[prop] = val;\r\n            }\r\n        });\r\n\r\n        if (dest === undefined) {\r\n            return xformed;\r\n        }\r\n    }\r\n\r\n    function isValidCommand(command) {\r\n        return $.type(command) === \"string\" &&\r\n            !command.match(/^_/) && //enforce private methods convention\r\n            uploader()[command] !== undefined;\r\n    }\r\n\r\n    // Assuming we have already verified that this is a valid command, call the associated function in the underlying\r\n    // Fine Uploader instance (passing along the arguments from the caller) and return the result of the call back to the caller\r\n    function delegateCommand(command) {\r\n        var xformedArgs = [],\r\n            origArgs = Array.prototype.slice.call(arguments, 1),\r\n            retVal;\r\n\r\n        transformVariables(origArgs, xformedArgs);\r\n\r\n        retVal = uploader()[command].apply(uploader(), xformedArgs);\r\n\r\n        return maybeWrapInJquery(retVal);\r\n    }\r\n\r\n    // If the value is an `HTMLElement` or `HTMLDocument`, wrap it in a `jQuery` object\r\n    function maybeWrapInJquery(val) {\r\n        var transformedVal = val;\r\n\r\n        // If the command is returning an `HTMLElement` or `HTMLDocument`, wrap it in a `jQuery` object\r\n        /*jshint -W116*/\r\n        if (val != null && typeof val === \"object\" &&\r\n           (val.nodeType === 1 || val.nodeType === 9) && val.cloneNode) {\r\n\r\n            transformedVal = $(val);\r\n        }\r\n\r\n        return transformedVal;\r\n    }\r\n\r\n    $.fn.fineUploader = function(optionsOrCommand) {\r\n        var self = this, selfArgs = arguments, retVals = [];\r\n\r\n        this.each(function(index, el) {\r\n            $el = $(el);\r\n\r\n            if (uploader() && isValidCommand(optionsOrCommand)) {\r\n                retVals.push(delegateCommand.apply(self, selfArgs));\r\n\r\n                if (self.length === 1) {\r\n                    return false;\r\n                }\r\n            }\r\n            else if (typeof optionsOrCommand === \"object\" || !optionsOrCommand) {\r\n                init.apply(self, selfArgs);\r\n            }\r\n            else {\r\n                $.error(\"Method \" +  optionsOrCommand + \" does not exist on jQuery.fineUploader\");\r\n            }\r\n        });\r\n\r\n        if (retVals.length === 1) {\r\n            return retVals[0];\r\n        }\r\n        else if (retVals.length > 1) {\r\n            return retVals;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n}(jQuery));\r\n","/*globals jQuery, qq*/\r\n(function($) {\r\n    \"use strict\";\r\n    var rootDataKey = \"fineUploaderDnd\",\r\n        $el;\r\n\r\n    function init(options) {\r\n        if (!options) {\r\n            options = {};\r\n        }\r\n\r\n        options.dropZoneElements = [$el];\r\n        var xformedOpts = transformVariables(options);\r\n        addCallbacks(xformedOpts);\r\n        dnd(new qq.DragAndDrop(xformedOpts));\r\n\r\n        return $el;\r\n    }\r\n\r\n    function dataStore(key, val) {\r\n        var data = $el.data(rootDataKey);\r\n\r\n        if (val) {\r\n            if (data === undefined) {\r\n                data = {};\r\n            }\r\n            data[key] = val;\r\n            $el.data(rootDataKey, data);\r\n        }\r\n        else {\r\n            if (data === undefined) {\r\n                return null;\r\n            }\r\n            return data[key];\r\n        }\r\n    }\r\n\r\n    function dnd(instanceToStore) {\r\n        return dataStore(\"dndInstance\", instanceToStore);\r\n    }\r\n\r\n    function addCallbacks(transformedOpts) {\r\n        var callbacks = transformedOpts.callbacks = {};\r\n\r\n        $.each(new qq.DragAndDrop.callbacks(), function(prop, func) {\r\n            var name = prop,\r\n                $callbackEl;\r\n\r\n            $callbackEl = $el;\r\n\r\n            callbacks[prop] = function() {\r\n                var args = Array.prototype.slice.call(arguments),\r\n                    jqueryHandlerResult = $callbackEl.triggerHandler(name, args);\r\n\r\n                return jqueryHandlerResult;\r\n            };\r\n        });\r\n    }\r\n\r\n    //transform jQuery objects into HTMLElements, and pass along all other option properties\r\n    function transformVariables(source, dest) {\r\n        var xformed, arrayVals;\r\n\r\n        if (dest === undefined) {\r\n            xformed = {};\r\n        }\r\n        else {\r\n            xformed = dest;\r\n        }\r\n\r\n        $.each(source, function(prop, val) {\r\n            if (val instanceof $) {\r\n                xformed[prop] = val[0];\r\n            }\r\n            else if ($.isPlainObject(val)) {\r\n                xformed[prop] = {};\r\n                transformVariables(val, xformed[prop]);\r\n            }\r\n            else if ($.isArray(val)) {\r\n                arrayVals = [];\r\n                $.each(val, function(idx, arrayVal) {\r\n                    if (arrayVal instanceof $) {\r\n                        $.merge(arrayVals, arrayVal);\r\n                    }\r\n                    else {\r\n                        arrayVals.push(arrayVal);\r\n                    }\r\n                });\r\n                xformed[prop] = arrayVals;\r\n            }\r\n            else {\r\n                xformed[prop] = val;\r\n            }\r\n        });\r\n\r\n        if (dest === undefined) {\r\n            return xformed;\r\n        }\r\n    }\r\n\r\n    function isValidCommand(command) {\r\n        return $.type(command) === \"string\" &&\r\n            command === \"dispose\" &&\r\n            dnd()[command] !== undefined;\r\n    }\r\n\r\n    function delegateCommand(command) {\r\n        var xformedArgs = [], origArgs = Array.prototype.slice.call(arguments, 1);\r\n        transformVariables(origArgs, xformedArgs);\r\n        return dnd()[command].apply(dnd(), xformedArgs);\r\n    }\r\n\r\n    $.fn.fineUploaderDnd = function(optionsOrCommand) {\r\n        var self = this, selfArgs = arguments, retVals = [];\r\n\r\n        this.each(function(index, el) {\r\n            $el = $(el);\r\n\r\n            if (dnd() && isValidCommand(optionsOrCommand)) {\r\n                retVals.push(delegateCommand.apply(self, selfArgs));\r\n\r\n                if (self.length === 1) {\r\n                    return false;\r\n                }\r\n            }\r\n            else if (typeof optionsOrCommand === \"object\" || !optionsOrCommand) {\r\n                init.apply(self, selfArgs);\r\n            }\r\n            else {\r\n                $.error(\"Method \" +  optionsOrCommand + \" does not exist in Fine Uploader's DnD module.\");\r\n            }\r\n        });\r\n\r\n        if (retVals.length === 1) {\r\n            return retVals[0];\r\n        }\r\n        else if (retVals.length > 1) {\r\n            return retVals;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n}(jQuery));\r\n","/*globals jQuery*/\r\n/**\r\n * Simply an alias for the `fineUploader` plug-in wrapper, but hides the required `endpointType` option from the\r\n * integrator.  I thought it may be confusing to convey to the integrator that, when using Fine Uploader in Azure mode,\r\n * you need to specify an `endpointType` with a value of \"azure\", and perhaps an `uploaderType` with a value of \"basic\" if\r\n * you want to use basic mode when uploading directly to Azure as well.  So, you can use this plug-in alias and not worry\r\n * about the `endpointType` option at all.\r\n */\r\n(function($) {\r\n    \"use strict\";\r\n\r\n    $.fn.fineUploaderAzure = function(optionsOrCommand) {\r\n        if (typeof optionsOrCommand === \"object\") {\r\n\r\n            // This option is used to tell the plug-in wrapper to instantiate the appropriate Azure-namespace modules.\r\n            optionsOrCommand.endpointType = \"azure\";\r\n        }\r\n\r\n        return $.fn.fineUploader.apply(this, arguments);\r\n    };\r\n\r\n}(jQuery));\r\n","/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\r\n/* jshint -W079 */\r\nvar qq = function(element) {\r\n    \"use strict\";\r\n\r\n    return {\r\n        hide: function() {\r\n            element.style.display = \"none\";\r\n            return this;\r\n        },\r\n\r\n        /** Returns the function which detaches attached event */\r\n        attach: function(type, fn) {\r\n            if (element.addEventListener) {\r\n                element.addEventListener(type, fn, false);\r\n            } else if (element.attachEvent) {\r\n                element.attachEvent(\"on\" + type, fn);\r\n            }\r\n            return function() {\r\n                qq(element).detach(type, fn);\r\n            };\r\n        },\r\n\r\n        detach: function(type, fn) {\r\n            if (element.removeEventListener) {\r\n                element.removeEventListener(type, fn, false);\r\n            } else if (element.attachEvent) {\r\n                element.detachEvent(\"on\" + type, fn);\r\n            }\r\n            return this;\r\n        },\r\n\r\n        contains: function(descendant) {\r\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\r\n            // says a `null` (or ostensibly `undefined`) parameter\r\n            // passed into `Node.contains` should result in a false return value.\r\n            // IE7 throws an exception if the parameter is `undefined` though.\r\n            if (!descendant) {\r\n                return false;\r\n            }\r\n\r\n            // compareposition returns false in this case\r\n            if (element === descendant) {\r\n                return true;\r\n            }\r\n\r\n            if (element.contains) {\r\n                return element.contains(descendant);\r\n            } else {\r\n                /*jslint bitwise: true*/\r\n                return !!(descendant.compareDocumentPosition(element) & 8);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Insert this element before elementB.\r\n         */\r\n        insertBefore: function(elementB) {\r\n            elementB.parentNode.insertBefore(element, elementB);\r\n            return this;\r\n        },\r\n\r\n        remove: function() {\r\n            element.parentNode.removeChild(element);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets styles for an element.\r\n         * Fixes opacity in IE6-8.\r\n         */\r\n        css: function(styles) {\r\n            /*jshint eqnull: true*/\r\n            if (element.style == null) {\r\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\r\n            }\r\n\r\n            /*jshint -W116*/\r\n            if (styles.opacity != null) {\r\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\r\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\r\n                }\r\n            }\r\n            qq.extend(element.style, styles);\r\n\r\n            return this;\r\n        },\r\n\r\n        hasClass: function(name, considerParent) {\r\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\r\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\r\n        },\r\n\r\n        addClass: function(name) {\r\n            if (!qq(element).hasClass(name)) {\r\n                element.className += \" \" + name;\r\n            }\r\n            return this;\r\n        },\r\n\r\n        removeClass: function(name) {\r\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\r\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\r\n            return this;\r\n        },\r\n\r\n        getByClass: function(className, first) {\r\n            var candidates,\r\n                result = [];\r\n\r\n            if (first && element.querySelector) {\r\n                return element.querySelector(\".\" + className);\r\n            }\r\n            else if (element.querySelectorAll) {\r\n                return element.querySelectorAll(\".\" + className);\r\n            }\r\n\r\n            candidates = element.getElementsByTagName(\"*\");\r\n\r\n            qq.each(candidates, function(idx, val) {\r\n                if (qq(val).hasClass(className)) {\r\n                    result.push(val);\r\n                }\r\n            });\r\n            return first ? result[0] : result;\r\n        },\r\n\r\n        getFirstByClass: function(className) {\r\n            return qq(element).getByClass(className, true);\r\n        },\r\n\r\n        children: function() {\r\n            var children = [],\r\n                child = element.firstChild;\r\n\r\n            while (child) {\r\n                if (child.nodeType === 1) {\r\n                    children.push(child);\r\n                }\r\n                child = child.nextSibling;\r\n            }\r\n\r\n            return children;\r\n        },\r\n\r\n        setText: function(text) {\r\n            element.innerText = text;\r\n            element.textContent = text;\r\n            return this;\r\n        },\r\n\r\n        clearText: function() {\r\n            return qq(element).setText(\"\");\r\n        },\r\n\r\n        // Returns true if the attribute exists on the element\r\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\r\n        hasAttribute: function(attrName) {\r\n            var attrVal;\r\n\r\n            if (element.hasAttribute) {\r\n\r\n                if (!element.hasAttribute(attrName)) {\r\n                    return false;\r\n                }\r\n\r\n                /*jshint -W116*/\r\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\r\n            }\r\n            else {\r\n                attrVal = element[attrName];\r\n\r\n                if (attrVal === undefined) {\r\n                    return false;\r\n                }\r\n\r\n                /*jshint -W116*/\r\n                return (/^false$/i).exec(attrVal) == null;\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.canvasToBlob = function(canvas, mime, quality) {\r\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\r\n    };\r\n\r\n    qq.dataUriToBlob = function(dataUri) {\r\n        var arrayBuffer, byteString,\r\n            createBlob = function(data, mime) {\r\n                var BlobBuilder = window.BlobBuilder ||\r\n                        window.WebKitBlobBuilder ||\r\n                        window.MozBlobBuilder ||\r\n                        window.MSBlobBuilder,\r\n                    blobBuilder = BlobBuilder && new BlobBuilder();\r\n\r\n                if (blobBuilder) {\r\n                    blobBuilder.append(data);\r\n                    return blobBuilder.getBlob(mime);\r\n                }\r\n                else {\r\n                    return new Blob([data], {type: mime});\r\n                }\r\n            },\r\n            intArray, mimeString;\r\n\r\n        // convert base64 to raw binary data held in a string\r\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\r\n            byteString = atob(dataUri.split(\",\")[1]);\r\n        }\r\n        else {\r\n            byteString = decodeURI(dataUri.split(\",\")[1]);\r\n        }\r\n\r\n        // extract the MIME\r\n        mimeString = dataUri.split(\",\")[0]\r\n            .split(\":\")[1]\r\n            .split(\";\")[0];\r\n\r\n        // write the bytes of the binary string to an ArrayBuffer\r\n        arrayBuffer = new ArrayBuffer(byteString.length);\r\n        intArray = new Uint8Array(arrayBuffer);\r\n        qq.each(byteString, function(idx, character) {\r\n            intArray[idx] = character.charCodeAt(0);\r\n        });\r\n\r\n        return createBlob(arrayBuffer, mimeString);\r\n    };\r\n\r\n    qq.log = function(message, level) {\r\n        if (window.console) {\r\n            if (!level || level === \"info\") {\r\n                window.console.log(message);\r\n            }\r\n            else\r\n            {\r\n                if (window.console[level]) {\r\n                    window.console[level](message);\r\n                }\r\n                else {\r\n                    window.console.log(\"<\" + level + \"> \" + message);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    qq.isObject = function(variable) {\r\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\r\n    };\r\n\r\n    qq.isFunction = function(variable) {\r\n        return typeof (variable) === \"function\";\r\n    };\r\n\r\n    /**\r\n     * Check the type of a value.  Is it an \"array\"?\r\n     *\r\n     * @param value value to test.\r\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\r\n     */\r\n    qq.isArray = function(value) {\r\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\r\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\r\n    };\r\n\r\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\r\n    qq.isItemList = function(maybeItemList) {\r\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\r\n    };\r\n\r\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\r\n    // object that is associated with collections of Nodes.\r\n    qq.isNodeList = function(maybeNodeList) {\r\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\r\n            // If `HTMLCollection` is the actual type of the object, we must determine this\r\n            // by checking for expected properties/methods on the object\r\n            (maybeNodeList.item && maybeNodeList.namedItem);\r\n    };\r\n\r\n    qq.isString = function(maybeString) {\r\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\r\n    };\r\n\r\n    qq.trimStr = function(string) {\r\n        if (String.prototype.trim) {\r\n            return string.trim();\r\n        }\r\n\r\n        return string.replace(/^\\s+|\\s+$/g, \"\");\r\n    };\r\n\r\n    /**\r\n     * @param str String to format.\r\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\r\n     */\r\n    qq.format = function(str) {\r\n\r\n        var args =  Array.prototype.slice.call(arguments, 1),\r\n            newStr = str,\r\n            nextIdxToReplace = newStr.indexOf(\"{}\");\r\n\r\n        qq.each(args, function(idx, val) {\r\n            var strBefore = newStr.substring(0, nextIdxToReplace),\r\n                strAfter = newStr.substring(nextIdxToReplace + 2);\r\n\r\n            newStr = strBefore + val + strAfter;\r\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\r\n\r\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\r\n            if (nextIdxToReplace < 0) {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        return newStr;\r\n    };\r\n\r\n    qq.isFile = function(maybeFile) {\r\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\r\n    };\r\n\r\n    qq.isFileList = function(maybeFileList) {\r\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\r\n    };\r\n\r\n    qq.isFileOrInput = function(maybeFileOrInput) {\r\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\r\n    };\r\n\r\n    qq.isInput = function(maybeInput, notFile) {\r\n        var evaluateType = function(type) {\r\n            var normalizedType = type.toLowerCase();\r\n\r\n            if (notFile) {\r\n                return normalizedType !== \"file\";\r\n            }\r\n\r\n            return normalizedType === \"file\";\r\n        };\r\n\r\n        if (window.HTMLInputElement) {\r\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\r\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        if (maybeInput.tagName) {\r\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\r\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    qq.isBlob = function(maybeBlob) {\r\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    qq.isXhrUploadSupported = function() {\r\n        var input = document.createElement(\"input\");\r\n        input.type = \"file\";\r\n\r\n        return (\r\n            input.multiple !== undefined &&\r\n                typeof File !== \"undefined\" &&\r\n                typeof FormData !== \"undefined\" &&\r\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\r\n    };\r\n\r\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\r\n    qq.createXhrInstance = function() {\r\n        if (window.XMLHttpRequest) {\r\n            return new XMLHttpRequest();\r\n        }\r\n\r\n        try {\r\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\r\n        }\r\n        catch (error) {\r\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\r\n            return null;\r\n        }\r\n    };\r\n\r\n    qq.isFolderDropSupported = function(dataTransfer) {\r\n        return dataTransfer.items &&\r\n            dataTransfer.items.length > 0 &&\r\n            dataTransfer.items[0].webkitGetAsEntry;\r\n    };\r\n\r\n    qq.isFileChunkingSupported = function() {\r\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\r\n            qq.isXhrUploadSupported() &&\r\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\r\n    };\r\n\r\n    qq.sliceBlob = function(fileOrBlob, start, end) {\r\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\r\n\r\n        return slicer.call(fileOrBlob, start, end);\r\n    };\r\n\r\n    qq.arrayBufferToHex = function(buffer) {\r\n        var bytesAsHex = \"\",\r\n            bytes = new Uint8Array(buffer);\r\n\r\n        qq.each(bytes, function(idx, byt) {\r\n            var byteAsHexStr = byt.toString(16);\r\n\r\n            if (byteAsHexStr.length < 2) {\r\n                byteAsHexStr = \"0\" + byteAsHexStr;\r\n            }\r\n\r\n            bytesAsHex += byteAsHexStr;\r\n        });\r\n\r\n        return bytesAsHex;\r\n    };\r\n\r\n    qq.readBlobToHex = function(blob, startOffset, length) {\r\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\r\n            fileReader = new FileReader(),\r\n            promise = new qq.Promise();\r\n\r\n        fileReader.onload = function() {\r\n            promise.success(qq.arrayBufferToHex(fileReader.result));\r\n        };\r\n\r\n        fileReader.onerror = promise.failure;\r\n\r\n        fileReader.readAsArrayBuffer(initialBlob);\r\n\r\n        return promise;\r\n    };\r\n\r\n    qq.extend = function(first, second, extendNested) {\r\n        qq.each(second, function(prop, val) {\r\n            if (extendNested && qq.isObject(val)) {\r\n                if (first[prop] === undefined) {\r\n                    first[prop] = {};\r\n                }\r\n                qq.extend(first[prop], val, true);\r\n            }\r\n            else {\r\n                first[prop] = val;\r\n            }\r\n        });\r\n\r\n        return first;\r\n    };\r\n\r\n    /**\r\n     * Allow properties in one object to override properties in another,\r\n     * keeping track of the original values from the target object.\r\n     *\r\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\r\n     *\r\n     * @param target Update properties in this object from some source\r\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\r\n     * @returns {object} The target object\r\n     */\r\n    qq.override = function(target, sourceFn) {\r\n        var super_ = {},\r\n            source = sourceFn(super_);\r\n\r\n        qq.each(source, function(srcPropName, srcPropVal) {\r\n            if (target[srcPropName] !== undefined) {\r\n                super_[srcPropName] = target[srcPropName];\r\n            }\r\n\r\n            target[srcPropName] = srcPropVal;\r\n        });\r\n\r\n        return target;\r\n    };\r\n\r\n    /**\r\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\r\n     */\r\n    qq.indexOf = function(arr, elt, from) {\r\n        if (arr.indexOf) {\r\n            return arr.indexOf(elt, from);\r\n        }\r\n\r\n        from = from || 0;\r\n        var len = arr.length;\r\n\r\n        if (from < 0) {\r\n            from += len;\r\n        }\r\n\r\n        for (; from < len; from += 1) {\r\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\r\n                return from;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n\r\n    //this is a version 4 UUID\r\n    qq.getUniqueId = function() {\r\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\r\n            /*jslint eqeq: true, bitwise: true*/\r\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    };\r\n\r\n    //\r\n    // Browsers and platforms detection\r\n    qq.ie = function() {\r\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\r\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\r\n    };\r\n\r\n    qq.ie7 = function() {\r\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\r\n    };\r\n\r\n    qq.ie8 = function() {\r\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\r\n    };\r\n\r\n    qq.ie10 = function() {\r\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\r\n    };\r\n\r\n    qq.ie11 = function() {\r\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\r\n    };\r\n\r\n    qq.edge = function() {\r\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\r\n    };\r\n\r\n    qq.safari = function() {\r\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\r\n    };\r\n\r\n    qq.chrome = function() {\r\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\r\n    };\r\n\r\n    qq.opera = function() {\r\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\r\n    };\r\n\r\n    qq.firefox = function() {\r\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\r\n    };\r\n\r\n    qq.windows = function() {\r\n        return navigator.platform === \"Win32\";\r\n    };\r\n\r\n    qq.android = function() {\r\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\r\n    };\r\n\r\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\r\n    // such as the one that prevents a `Blob` from being uploaded.\r\n    qq.androidStock = function() {\r\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\r\n    };\r\n\r\n    qq.ios6 = function() {\r\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\r\n    };\r\n\r\n    qq.ios7 = function() {\r\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\r\n    };\r\n\r\n    qq.ios8 = function() {\r\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\r\n    };\r\n\r\n    // iOS 8.0.0\r\n    qq.ios800 = function() {\r\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\r\n    };\r\n\r\n    qq.ios = function() {\r\n        /*jshint -W014 */\r\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\r\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\r\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\r\n    };\r\n\r\n    qq.iosChrome = function() {\r\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\r\n    };\r\n\r\n    qq.iosSafari = function() {\r\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\r\n    };\r\n\r\n    qq.iosSafariWebView = function() {\r\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\r\n    };\r\n\r\n    //\r\n    // Events\r\n\r\n    qq.preventDefault = function(e) {\r\n        if (e.preventDefault) {\r\n            e.preventDefault();\r\n        } else {\r\n            e.returnValue = false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Creates and returns element from html string\r\n     * Uses innerHTML to create an element\r\n     */\r\n    qq.toElement = (function() {\r\n        var div = document.createElement(\"div\");\r\n        return function(html) {\r\n            div.innerHTML = html;\r\n            var element = div.firstChild;\r\n            div.removeChild(element);\r\n            return element;\r\n        };\r\n    }());\r\n\r\n    //key and value are passed to callback for each entry in the iterable item\r\n    qq.each = function(iterableItem, callback) {\r\n        var keyOrIndex, retVal;\r\n\r\n        if (iterableItem) {\r\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\r\n            if (window.Storage && iterableItem.constructor === window.Storage) {\r\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\r\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\r\n                    if (retVal === false) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\r\n            // when iterating over items inside the object.\r\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\r\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\r\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\r\n                    if (retVal === false) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else if (qq.isString(iterableItem)) {\r\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\r\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\r\n                    if (retVal === false) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (keyOrIndex in iterableItem) {\r\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\r\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\r\n                        if (retVal === false) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    //include any args that should be passed to the new function after the context arg\r\n    qq.bind = function(oldFunc, context) {\r\n        if (qq.isFunction(oldFunc)) {\r\n            var args =  Array.prototype.slice.call(arguments, 2);\r\n\r\n            return function() {\r\n                var newArgs = qq.extend([], args);\r\n                if (arguments.length) {\r\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\r\n                }\r\n                return oldFunc.apply(context, newArgs);\r\n            };\r\n        }\r\n\r\n        throw new Error(\"first parameter must be a function!\");\r\n    };\r\n\r\n    /**\r\n     * obj2url() takes a json-object as argument and generates\r\n     * a querystring. pretty much like jQuery.param()\r\n     *\r\n     * how to use:\r\n     *\r\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\r\n     *\r\n     * will result in:\r\n     *\r\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\r\n     *\r\n     * @param  Object JSON-Object\r\n     * @param  String current querystring-part\r\n     * @return String encoded querystring\r\n     */\r\n    qq.obj2url = function(obj, temp, prefixDone) {\r\n        /*jshint laxbreak: true*/\r\n        var uristrings = [],\r\n            prefix = \"&\",\r\n            add = function(nextObj, i) {\r\n                var nextTemp = temp\r\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\r\n                    ? temp\r\n                    : temp + \"[\" + i + \"]\"\r\n                    : i;\r\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\r\n                    uristrings.push(\r\n                        (typeof nextObj === \"object\")\r\n                            ? qq.obj2url(nextObj, nextTemp, true)\r\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\r\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\r\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\r\n                    );\r\n                }\r\n            };\r\n\r\n        if (!prefixDone && temp) {\r\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\r\n            uristrings.push(temp);\r\n            uristrings.push(qq.obj2url(obj));\r\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\r\n            qq.each(obj, function(idx, val) {\r\n                add(val, idx);\r\n            });\r\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\r\n            qq.each(obj, function(prop, val) {\r\n                add(val, prop);\r\n            });\r\n        } else {\r\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\r\n        }\r\n\r\n        if (temp) {\r\n            return uristrings.join(prefix);\r\n        } else {\r\n            return uristrings.join(prefix)\r\n                .replace(/^&/, \"\")\r\n                .replace(/%20/g, \"+\");\r\n        }\r\n    };\r\n\r\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\r\n        if (!formData) {\r\n            formData = new FormData();\r\n        }\r\n\r\n        qq.each(obj, function(key, val) {\r\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\r\n\r\n            if (qq.isObject(val)) {\r\n                qq.obj2FormData(val, formData, key);\r\n            }\r\n            else if (qq.isFunction(val)) {\r\n                formData.append(key, val());\r\n            }\r\n            else {\r\n                formData.append(key, val);\r\n            }\r\n        });\r\n\r\n        return formData;\r\n    };\r\n\r\n    qq.obj2Inputs = function(obj, form) {\r\n        var input;\r\n\r\n        if (!form) {\r\n            form = document.createElement(\"form\");\r\n        }\r\n\r\n        qq.obj2FormData(obj, {\r\n            append: function(key, val) {\r\n                input = document.createElement(\"input\");\r\n                input.setAttribute(\"name\", key);\r\n                input.setAttribute(\"value\", val);\r\n                form.appendChild(input);\r\n            }\r\n        });\r\n\r\n        return form;\r\n    };\r\n\r\n    /**\r\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\r\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\r\n     */\r\n    qq.parseJson = function(json) {\r\n        /*jshint evil: true*/\r\n        if (window.JSON && qq.isFunction(JSON.parse)) {\r\n            return JSON.parse(json);\r\n        } else {\r\n            return eval(\"(\" + json + \")\");\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Retrieve the extension of a file, if it exists.\r\n     *\r\n     * @param filename\r\n     * @returns {string || undefined}\r\n     */\r\n    qq.getExtension = function(filename) {\r\n        var extIdx = filename.lastIndexOf(\".\") + 1;\r\n\r\n        if (extIdx > 0) {\r\n            return filename.substr(extIdx, filename.length - extIdx);\r\n        }\r\n    };\r\n\r\n    qq.getFilename = function(blobOrFileInput) {\r\n        /*jslint regexp: true*/\r\n\r\n        if (qq.isInput(blobOrFileInput)) {\r\n            // get input value and remove path to normalize\r\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\r\n        }\r\n        else if (qq.isFile(blobOrFileInput)) {\r\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\r\n                return blobOrFileInput.fileName;\r\n            }\r\n        }\r\n\r\n        return blobOrFileInput.name;\r\n    };\r\n\r\n    /**\r\n     * A generic module which supports object disposing in dispose() method.\r\n     * */\r\n    qq.DisposeSupport = function() {\r\n        var disposers = [];\r\n\r\n        return {\r\n            /** Run all registered disposers */\r\n            dispose: function() {\r\n                var disposer;\r\n                do {\r\n                    disposer = disposers.shift();\r\n                    if (disposer) {\r\n                        disposer();\r\n                    }\r\n                }\r\n                while (disposer);\r\n            },\r\n\r\n            /** Attach event handler and register de-attacher as a disposer */\r\n            attach: function() {\r\n                var args = arguments;\r\n                /*jslint undef:true*/\r\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\r\n            },\r\n\r\n            /** Add disposer to the collection */\r\n            addDisposer: function(disposeFunction) {\r\n                disposers.push(disposeFunction);\r\n            }\r\n        };\r\n    };\r\n}());\r\n","/* globals define, module, global, qq */\r\n(function() {\r\n    \"use strict\";\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(function() {\r\n            return qq;\r\n        });\r\n    }\r\n    else if (typeof module !== \"undefined\" && module.exports) {\r\n        module.exports = qq;\r\n    }\r\n    else {\r\n        global.qq = qq;\r\n    }\r\n}());\r\n","/* globals qq */\r\n/**\r\n * Fine Uploader top-level Error container.  Inherits from `Error`.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.Error = function(message) {\r\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\r\n    };\r\n\r\n    qq.Error.prototype = new Error();\r\n}());\r\n","/*global qq */\r\nqq.version = \"5.15.0\";\r\n","/* globals qq */\r\nqq.supportedFeatures = (function() {\r\n    \"use strict\";\r\n\r\n    var supportsUploading,\r\n        supportsUploadingBlobs,\r\n        supportsFileDrop,\r\n        supportsAjaxFileUploading,\r\n        supportsFolderDrop,\r\n        supportsChunking,\r\n        supportsResume,\r\n        supportsUploadViaPaste,\r\n        supportsUploadCors,\r\n        supportsDeleteFileXdr,\r\n        supportsDeleteFileCorsXhr,\r\n        supportsDeleteFileCors,\r\n        supportsFolderSelection,\r\n        supportsImagePreviews,\r\n        supportsUploadProgress;\r\n\r\n    function testSupportsFileInputElement() {\r\n        var supported = true,\r\n            tempInput;\r\n\r\n        try {\r\n            tempInput = document.createElement(\"input\");\r\n            tempInput.type = \"file\";\r\n            qq(tempInput).hide();\r\n\r\n            if (tempInput.disabled) {\r\n                supported = false;\r\n            }\r\n        }\r\n        catch (ex) {\r\n            supported = false;\r\n        }\r\n\r\n        return supported;\r\n    }\r\n\r\n    //only way to test for Filesystem API support since webkit does not expose the DataTransfer interface\r\n    function isChrome21OrHigher() {\r\n        return (qq.chrome() || qq.opera()) &&\r\n            navigator.userAgent.match(/Chrome\\/[2][1-9]|Chrome\\/[3-9][0-9]/) !== undefined;\r\n    }\r\n\r\n    //only way to test for complete Clipboard API support at this time\r\n    function isChrome14OrHigher() {\r\n        return (qq.chrome() || qq.opera()) &&\r\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\r\n    }\r\n\r\n    //Ensure we can send cross-origin `XMLHttpRequest`s\r\n    function isCrossOriginXhrSupported() {\r\n        if (window.XMLHttpRequest) {\r\n            var xhr = qq.createXhrInstance();\r\n\r\n            //Commonly accepted test for XHR CORS support.\r\n            return xhr.withCredentials !== undefined;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\r\n    function isXdrSupported() {\r\n        return window.XDomainRequest !== undefined;\r\n    }\r\n\r\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\r\n    // or if `XDomainRequest` is an available alternative.\r\n    function isCrossOriginAjaxSupported() {\r\n        if (isCrossOriginXhrSupported()) {\r\n            return true;\r\n        }\r\n\r\n        return isXdrSupported();\r\n    }\r\n\r\n    function isFolderSelectionSupported() {\r\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\r\n        return document.createElement(\"input\").webkitdirectory !== undefined;\r\n    }\r\n\r\n    function isLocalStorageSupported() {\r\n        try {\r\n            return !!window.localStorage &&\r\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\r\n                qq.isFunction(window.localStorage.setItem);\r\n        }\r\n        catch (error) {\r\n            // probably caught a security exception, so no localStorage for you\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function isDragAndDropSupported() {\r\n        var span = document.createElement(\"span\");\r\n\r\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\r\n            !qq.android() && !qq.ios();\r\n    }\r\n\r\n    supportsUploading = testSupportsFileInputElement();\r\n\r\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\r\n\r\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\r\n\r\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\r\n\r\n    supportsFolderDrop = supportsFileDrop && isChrome21OrHigher();\r\n\r\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\r\n\r\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\r\n\r\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\r\n\r\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\r\n\r\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\r\n\r\n    supportsDeleteFileXdr = isXdrSupported();\r\n\r\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\r\n\r\n    supportsFolderSelection = isFolderSelectionSupported();\r\n\r\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\r\n\r\n    supportsUploadProgress = (function() {\r\n        if (supportsAjaxFileUploading) {\r\n            return !qq.androidStock() && !qq.iosChrome();\r\n        }\r\n        return false;\r\n    }());\r\n\r\n    return {\r\n        ajaxUploading: supportsAjaxFileUploading,\r\n        blobUploading: supportsUploadingBlobs,\r\n        canDetermineSize: supportsAjaxFileUploading,\r\n        chunking: supportsChunking,\r\n        deleteFileCors: supportsDeleteFileCors,\r\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\r\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\r\n        dialogElement: !!window.HTMLDialogElement,\r\n        fileDrop: supportsFileDrop,\r\n        folderDrop: supportsFolderDrop,\r\n        folderSelection: supportsFolderSelection,\r\n        imagePreviews: supportsImagePreviews,\r\n        imageValidation: supportsImagePreviews,\r\n        itemSizeValidation: supportsAjaxFileUploading,\r\n        pause: supportsChunking,\r\n        progressBar: supportsUploadProgress,\r\n        resume: supportsResume,\r\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\r\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\r\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\r\n        uploading: supportsUploading,\r\n        uploadCors: supportsUploadCors,\r\n        uploadCustomHeaders: supportsAjaxFileUploading,\r\n        uploadNonMultipart: supportsAjaxFileUploading,\r\n        uploadViaPaste: supportsUploadViaPaste\r\n    };\r\n\r\n}());\r\n","/*globals qq*/\r\n\r\n// Is the passed object a promise instance?\r\nqq.isGenericPromise = function(maybePromise) {\r\n    \"use strict\";\r\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\r\n};\r\n\r\nqq.Promise = function() {\r\n    \"use strict\";\r\n\r\n    var successArgs, failureArgs,\r\n        successCallbacks = [],\r\n        failureCallbacks = [],\r\n        doneCallbacks = [],\r\n        state = 0;\r\n\r\n    qq.extend(this, {\r\n        then: function(onSuccess, onFailure) {\r\n            if (state === 0) {\r\n                if (onSuccess) {\r\n                    successCallbacks.push(onSuccess);\r\n                }\r\n                if (onFailure) {\r\n                    failureCallbacks.push(onFailure);\r\n                }\r\n            }\r\n            else if (state === -1) {\r\n                onFailure && onFailure.apply(null, failureArgs);\r\n            }\r\n            else if (onSuccess) {\r\n                onSuccess.apply(null, successArgs);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        done: function(callback) {\r\n            if (state === 0) {\r\n                doneCallbacks.push(callback);\r\n            }\r\n            else {\r\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        success: function() {\r\n            state = 1;\r\n            successArgs = arguments;\r\n\r\n            if (successCallbacks.length) {\r\n                qq.each(successCallbacks, function(idx, callback) {\r\n                    callback.apply(null, successArgs);\r\n                });\r\n            }\r\n\r\n            if (doneCallbacks.length) {\r\n                qq.each(doneCallbacks, function(idx, callback) {\r\n                    callback.apply(null, successArgs);\r\n                });\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        failure: function() {\r\n            state = -1;\r\n            failureArgs = arguments;\r\n\r\n            if (failureCallbacks.length) {\r\n                qq.each(failureCallbacks, function(idx, callback) {\r\n                    callback.apply(null, failureArgs);\r\n                });\r\n            }\r\n\r\n            if (doneCallbacks.length) {\r\n                qq.each(doneCallbacks, function(idx, callback) {\r\n                    callback.apply(null, failureArgs);\r\n                });\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n};\r\n","/* globals qq */\r\n/**\r\n * Placeholder for a Blob that will be generated on-demand.\r\n *\r\n * @param referenceBlob Parent of the generated blob\r\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\r\n * @constructor\r\n */\r\nqq.BlobProxy = function(referenceBlob, onCreate) {\r\n    \"use strict\";\r\n\r\n    qq.extend(this, {\r\n        referenceBlob: referenceBlob,\r\n\r\n        create: function() {\r\n            return onCreate(referenceBlob);\r\n        }\r\n    });\r\n};\r\n","/*globals qq*/\r\n\r\n/**\r\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\r\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\r\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\r\n * provided here by adding CSS classes to the container on hover/focus.\r\n *\r\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\r\n * available on all supported browsers.\r\n *\r\n * @param o Options to override the default values\r\n */\r\nqq.UploadButton = function(o) {\r\n    \"use strict\";\r\n\r\n    var self = this,\r\n\r\n        disposeSupport = new qq.DisposeSupport(),\r\n\r\n        options = {\r\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\r\n            acceptFiles: null,\r\n\r\n            // \"Container\" element\r\n            element: null,\r\n\r\n            focusClass: \"qq-upload-button-focus\",\r\n\r\n            // A true value allows folders to be selected, if supported by the UA\r\n            folders: false,\r\n\r\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\r\n            hoverClass: \"qq-upload-button-hover\",\r\n\r\n            ios8BrowserCrashWorkaround: false,\r\n\r\n            // If true adds `multiple` attribute to `<input type=\"file\">`\r\n            multiple: false,\r\n\r\n            // `name` attribute of `<input type=\"file\">`\r\n            name: \"qqfile\",\r\n\r\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\r\n            onChange: function(input) {},\r\n\r\n            title: null\r\n        },\r\n        input, buttonId;\r\n\r\n    // Overrides any of the default option values with any option values passed in during construction.\r\n    qq.extend(options, o);\r\n\r\n    buttonId = qq.getUniqueId();\r\n\r\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\r\n    function createInput() {\r\n        var input = document.createElement(\"input\");\r\n\r\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\r\n        input.setAttribute(\"title\", options.title);\r\n\r\n        self.setMultiple(options.multiple, input);\r\n\r\n        if (options.folders && qq.supportedFeatures.folderSelection) {\r\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\r\n            input.setAttribute(\"webkitdirectory\", \"\");\r\n        }\r\n\r\n        if (options.acceptFiles) {\r\n            input.setAttribute(\"accept\", options.acceptFiles);\r\n        }\r\n\r\n        input.setAttribute(\"type\", \"file\");\r\n        input.setAttribute(\"name\", options.name);\r\n\r\n        qq(input).css({\r\n            position: \"absolute\",\r\n            // in Opera only 'browse' button\r\n            // is clickable and it is located at\r\n            // the right side of the input\r\n            right: 0,\r\n            top: 0,\r\n            fontFamily: \"Arial\",\r\n            // It's especially important to make this an arbitrarily large value\r\n            // to ensure the rendered input button in IE takes up the entire\r\n            // space of the container element.  Otherwise, the left side of the\r\n            // button will require a double-click to invoke the file chooser.\r\n            // In other browsers, this might cause other issues, so a large font-size\r\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\r\n            // in some cases when the font-size is large.  So, this workaround is not applied\r\n            // to IE8.\r\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\r\n            margin: 0,\r\n            padding: 0,\r\n            cursor: \"pointer\",\r\n            opacity: 0\r\n        });\r\n\r\n        // Setting the file input's height to 100% in IE7 causes\r\n        // most of the visible button to be unclickable.\r\n        !qq.ie7() && qq(input).css({height: \"100%\"});\r\n\r\n        options.element.appendChild(input);\r\n\r\n        disposeSupport.attach(input, \"change\", function() {\r\n            options.onChange(input);\r\n        });\r\n\r\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\r\n        disposeSupport.attach(input, \"mouseover\", function() {\r\n            qq(options.element).addClass(options.hoverClass);\r\n        });\r\n        disposeSupport.attach(input, \"mouseout\", function() {\r\n            qq(options.element).removeClass(options.hoverClass);\r\n        });\r\n\r\n        disposeSupport.attach(input, \"focus\", function() {\r\n            qq(options.element).addClass(options.focusClass);\r\n        });\r\n        disposeSupport.attach(input, \"blur\", function() {\r\n            qq(options.element).removeClass(options.focusClass);\r\n        });\r\n\r\n        return input;\r\n    }\r\n\r\n    // Make button suitable container for input\r\n    qq(options.element).css({\r\n        position: \"relative\",\r\n        overflow: \"hidden\",\r\n        // Make sure browse button is in the right side in Internet Explorer\r\n        direction: \"ltr\"\r\n    });\r\n\r\n    // Exposed API\r\n    qq.extend(this, {\r\n        getInput: function() {\r\n            return input;\r\n        },\r\n\r\n        getButtonId: function() {\r\n            return buttonId;\r\n        },\r\n\r\n        setMultiple: function(isMultiple, optInput) {\r\n            var input = optInput || this.getInput();\r\n\r\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\r\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\r\n            // See #1283.\r\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\r\n                input.setAttribute(\"multiple\", \"\");\r\n            }\r\n\r\n            else {\r\n                if (isMultiple) {\r\n                    input.setAttribute(\"multiple\", \"\");\r\n                }\r\n                else {\r\n                    input.removeAttribute(\"multiple\");\r\n                }\r\n            }\r\n        },\r\n\r\n        setAcceptFiles: function(acceptFiles) {\r\n            if (acceptFiles !== options.acceptFiles) {\r\n                input.setAttribute(\"accept\", acceptFiles);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            if (input.parentNode) {\r\n                qq(input).remove();\r\n            }\r\n\r\n            qq(options.element).removeClass(options.focusClass);\r\n            input = null;\r\n            input = createInput();\r\n        }\r\n    });\r\n\r\n    input = createInput();\r\n};\r\n\r\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\r\n","/*globals qq */\r\nqq.UploadData = function(uploaderProxy) {\r\n    \"use strict\";\r\n\r\n    var data = [],\r\n        byUuid = {},\r\n        byStatus = {},\r\n        byProxyGroupId = {},\r\n        byBatchId = {};\r\n\r\n    function getDataByIds(idOrIds) {\r\n        if (qq.isArray(idOrIds)) {\r\n            var entries = [];\r\n\r\n            qq.each(idOrIds, function(idx, id) {\r\n                entries.push(data[id]);\r\n            });\r\n\r\n            return entries;\r\n        }\r\n\r\n        return data[idOrIds];\r\n    }\r\n\r\n    function getDataByUuids(uuids) {\r\n        if (qq.isArray(uuids)) {\r\n            var entries = [];\r\n\r\n            qq.each(uuids, function(idx, uuid) {\r\n                entries.push(data[byUuid[uuid]]);\r\n            });\r\n\r\n            return entries;\r\n        }\r\n\r\n        return data[byUuid[uuids]];\r\n    }\r\n\r\n    function getDataByStatus(status) {\r\n        var statusResults = [],\r\n            statuses = [].concat(status);\r\n\r\n        qq.each(statuses, function(index, statusEnum) {\r\n            var statusResultIndexes = byStatus[statusEnum];\r\n\r\n            if (statusResultIndexes !== undefined) {\r\n                qq.each(statusResultIndexes, function(i, dataIndex) {\r\n                    statusResults.push(data[dataIndex]);\r\n                });\r\n            }\r\n        });\r\n\r\n        return statusResults;\r\n    }\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * Adds a new file to the data cache for tracking purposes.\r\n         *\r\n         * @param spec Data that describes this file.  Possible properties are:\r\n         *\r\n         * - uuid: Initial UUID for this file.\r\n         * - name: Initial name of this file.\r\n         * - size: Size of this file, omit if this cannot be determined\r\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\r\n         * - batchId: ID of the batch this file belongs to\r\n         * - proxyGroupId: ID of the proxy group associated with this file\r\n         * - onBeforeStatusChange(fileId): callback that is executed before the status change is broadcast\r\n         *\r\n         * @returns {number} Internal ID for this file.\r\n         */\r\n        addFile: function(spec) {\r\n            var status = spec.status || qq.status.SUBMITTING,\r\n                id = data.push({\r\n                    name: spec.name,\r\n                    originalName: spec.name,\r\n                    uuid: spec.uuid,\r\n                    size: spec.size == null ? -1 : spec.size,\r\n                    status: status\r\n                }) - 1;\r\n\r\n            if (spec.batchId) {\r\n                data[id].batchId = spec.batchId;\r\n\r\n                if (byBatchId[spec.batchId] === undefined) {\r\n                    byBatchId[spec.batchId] = [];\r\n                }\r\n                byBatchId[spec.batchId].push(id);\r\n            }\r\n\r\n            if (spec.proxyGroupId) {\r\n                data[id].proxyGroupId = spec.proxyGroupId;\r\n\r\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\r\n                    byProxyGroupId[spec.proxyGroupId] = [];\r\n                }\r\n                byProxyGroupId[spec.proxyGroupId].push(id);\r\n            }\r\n\r\n            data[id].id = id;\r\n            byUuid[spec.uuid] = id;\r\n\r\n            if (byStatus[status] === undefined) {\r\n                byStatus[status] = [];\r\n            }\r\n            byStatus[status].push(id);\r\n\r\n            spec.onBeforeStatusChange && spec.onBeforeStatusChange(id);\r\n            uploaderProxy.onStatusChange(id, null, status);\r\n\r\n            return id;\r\n        },\r\n\r\n        retrieve: function(optionalFilter) {\r\n            if (qq.isObject(optionalFilter) && data.length)  {\r\n                if (optionalFilter.id !== undefined) {\r\n                    return getDataByIds(optionalFilter.id);\r\n                }\r\n\r\n                else if (optionalFilter.uuid !== undefined) {\r\n                    return getDataByUuids(optionalFilter.uuid);\r\n                }\r\n\r\n                else if (optionalFilter.status) {\r\n                    return getDataByStatus(optionalFilter.status);\r\n                }\r\n            }\r\n            else {\r\n                return qq.extend([], data, true);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            data = [];\r\n            byUuid = {};\r\n            byStatus = {};\r\n            byBatchId = {};\r\n        },\r\n\r\n        setStatus: function(id, newStatus) {\r\n            var oldStatus = data[id].status,\r\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\r\n\r\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\r\n\r\n            data[id].status = newStatus;\r\n\r\n            if (byStatus[newStatus] === undefined) {\r\n                byStatus[newStatus] = [];\r\n            }\r\n            byStatus[newStatus].push(id);\r\n\r\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\r\n        },\r\n\r\n        uuidChanged: function(id, newUuid) {\r\n            var oldUuid = data[id].uuid;\r\n\r\n            data[id].uuid = newUuid;\r\n            byUuid[newUuid] = id;\r\n            delete byUuid[oldUuid];\r\n        },\r\n\r\n        updateName: function(id, newName) {\r\n            data[id].name = newName;\r\n        },\r\n\r\n        updateSize: function(id, newSize) {\r\n            data[id].size = newSize;\r\n        },\r\n\r\n        // Only applicable if this file has a parent that we may want to reference later.\r\n        setParentId: function(targetId, parentId) {\r\n            data[targetId].parentId = parentId;\r\n        },\r\n\r\n        getIdsInProxyGroup: function(id) {\r\n            var proxyGroupId = data[id].proxyGroupId;\r\n\r\n            if (proxyGroupId) {\r\n                return byProxyGroupId[proxyGroupId];\r\n            }\r\n            return [];\r\n        },\r\n\r\n        getIdsInBatch: function(id) {\r\n            var batchId = data[id].batchId;\r\n\r\n            return byBatchId[batchId];\r\n        }\r\n    });\r\n};\r\n\r\nqq.status = {\r\n    SUBMITTING: \"submitting\",\r\n    SUBMITTED: \"submitted\",\r\n    REJECTED: \"rejected\",\r\n    QUEUED: \"queued\",\r\n    CANCELED: \"canceled\",\r\n    PAUSED: \"paused\",\r\n    UPLOADING: \"uploading\",\r\n    UPLOAD_RETRYING: \"retrying upload\",\r\n    UPLOAD_SUCCESSFUL: \"upload successful\",\r\n    UPLOAD_FAILED: \"upload failed\",\r\n    DELETE_FAILED: \"delete failed\",\r\n    DELETING: \"deleting\",\r\n    DELETED: \"deleted\"\r\n};\r\n","/*globals qq*/\r\n/**\r\n * Defines the public API for FineUploaderBasic mode.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.basePublicApi = {\r\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\r\n        addBlobs: function(blobDataOrArray, params, endpoint) {\r\n            this.addFiles(blobDataOrArray, params, endpoint);\r\n        },\r\n\r\n        addInitialFiles: function(cannedFileList) {\r\n            var self = this;\r\n\r\n            qq.each(cannedFileList, function(index, cannedFile) {\r\n                self._addCannedFile(cannedFile);\r\n            });\r\n        },\r\n\r\n        addFiles: function(data, params, endpoint) {\r\n            this._maybeHandleIos8SafariWorkaround();\r\n\r\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\r\n\r\n                processBlob = qq.bind(function(blob) {\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: this._options.blobs.defaultName\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processBlobData = qq.bind(function(blobData) {\r\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processCanvas = qq.bind(function(canvas) {\r\n                    var blob = qq.canvasToBlob(canvas);\r\n\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: this._options.blobs.defaultName + \".png\"\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processCanvasData = qq.bind(function(canvasData) {\r\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\r\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\r\n\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: canvasData.name\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processFileOrInput = qq.bind(function(fileOrInput) {\r\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\r\n                        var files = Array.prototype.slice.call(fileOrInput.files),\r\n                            self = this;\r\n\r\n                        qq.each(files, function(idx, file) {\r\n                            self._handleNewFile(file, batchId, verifiedFiles);\r\n                        });\r\n                    }\r\n                    else {\r\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\r\n                    }\r\n                }, this),\r\n\r\n                normalizeData = function() {\r\n                    if (qq.isFileList(data)) {\r\n                        data = Array.prototype.slice.call(data);\r\n                    }\r\n                    data = [].concat(data);\r\n                },\r\n\r\n                self = this,\r\n                verifiedFiles = [];\r\n\r\n            this._currentBatchId = batchId;\r\n\r\n            if (data) {\r\n                normalizeData();\r\n\r\n                qq.each(data, function(idx, fileContainer) {\r\n                    if (qq.isFileOrInput(fileContainer)) {\r\n                        processFileOrInput(fileContainer);\r\n                    }\r\n                    else if (qq.isBlob(fileContainer)) {\r\n                        processBlob(fileContainer);\r\n                    }\r\n                    else if (qq.isObject(fileContainer)) {\r\n                        if (fileContainer.blob && fileContainer.name) {\r\n                            processBlobData(fileContainer);\r\n                        }\r\n                        else if (fileContainer.canvas && fileContainer.name) {\r\n                            processCanvasData(fileContainer);\r\n                        }\r\n                    }\r\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\r\n                        processCanvas(fileContainer);\r\n                    }\r\n                    else {\r\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\r\n                    }\r\n                });\r\n\r\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\r\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\r\n            }\r\n        },\r\n\r\n        cancel: function(id) {\r\n            this._handler.cancel(id);\r\n        },\r\n\r\n        cancelAll: function() {\r\n            var storedIdsCopy = [],\r\n                self = this;\r\n\r\n            qq.extend(storedIdsCopy, this._storedIds);\r\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\r\n                self.cancel(storedFileId);\r\n            });\r\n\r\n            this._handler.cancelAll();\r\n        },\r\n\r\n        clearStoredFiles: function() {\r\n            this._storedIds = [];\r\n        },\r\n\r\n        continueUpload: function(id) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\r\n                return false;\r\n            }\r\n\r\n            if (uploadData.status === qq.status.PAUSED) {\r\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\r\n                this._uploadFile(id);\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        deleteFile: function(id) {\r\n            return this._onSubmitDelete(id);\r\n        },\r\n\r\n        // TODO document?\r\n        doesExist: function(fileOrBlobId) {\r\n            return this._handler.isValid(fileOrBlobId);\r\n        },\r\n\r\n        // Generate a variable size thumbnail on an img or canvas,\r\n        // returning a promise that is fulfilled when the attempt completes.\r\n        // Thumbnail can either be based off of a URL for an image returned\r\n        // by the server in the upload response, or the associated `Blob`.\r\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\r\n            var promiseToReturn = new qq.Promise(),\r\n                fileOrUrl, options;\r\n\r\n            if (this._imageGenerator) {\r\n                fileOrUrl = this._thumbnailUrls[fileId];\r\n                options = {\r\n                    customResizeFunction: customResizeFunction,\r\n                    maxSize: maxSize > 0 ? maxSize : null,\r\n                    scale: maxSize > 0\r\n                };\r\n\r\n                // If client-side preview generation is possible\r\n                // and we are not specifically looking for the image URl returned by the server...\r\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\r\n                    fileOrUrl = this.getFile(fileId);\r\n                }\r\n\r\n                /* jshint eqeqeq:false,eqnull:true */\r\n                if (fileOrUrl == null) {\r\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\r\n                }\r\n                else {\r\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\r\n                        function success(modifiedContainer) {\r\n                            promiseToReturn.success(modifiedContainer);\r\n                        },\r\n\r\n                        function failure(container, reason) {\r\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n            else {\r\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\r\n            }\r\n\r\n            return promiseToReturn;\r\n        },\r\n\r\n        getButton: function(fileId) {\r\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\r\n        },\r\n\r\n        getEndpoint: function(fileId) {\r\n            return this._endpointStore.get(fileId);\r\n        },\r\n\r\n        getFile: function(fileOrBlobId) {\r\n            return this._handler.getFile(fileOrBlobId) || null;\r\n        },\r\n\r\n        getInProgress: function() {\r\n            return this._uploadData.retrieve({\r\n                status: [\r\n                    qq.status.UPLOADING,\r\n                    qq.status.UPLOAD_RETRYING,\r\n                    qq.status.QUEUED\r\n                ]\r\n            }).length;\r\n        },\r\n\r\n        getName: function(id) {\r\n            return this._uploadData.retrieve({id: id}).name;\r\n        },\r\n\r\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\r\n        getParentId: function(id) {\r\n            var uploadDataEntry = this.getUploads({id: id}),\r\n                parentId = null;\r\n\r\n            if (uploadDataEntry) {\r\n                if (uploadDataEntry.parentId !== undefined) {\r\n                    parentId = uploadDataEntry.parentId;\r\n                }\r\n            }\r\n\r\n            return parentId;\r\n        },\r\n\r\n        getResumableFilesData: function() {\r\n            return this._handler.getResumableFilesData();\r\n        },\r\n\r\n        getSize: function(id) {\r\n            return this._uploadData.retrieve({id: id}).size;\r\n        },\r\n\r\n        getNetUploads: function() {\r\n            return this._netUploaded;\r\n        },\r\n\r\n        getRemainingAllowedItems: function() {\r\n            var allowedItems = this._currentItemLimit;\r\n\r\n            if (allowedItems > 0) {\r\n                return allowedItems - this._netUploadedOrQueued;\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        getUploads: function(optionalFilter) {\r\n            return this._uploadData.retrieve(optionalFilter);\r\n        },\r\n\r\n        getUuid: function(id) {\r\n            return this._uploadData.retrieve({id: id}).uuid;\r\n        },\r\n\r\n        log: function(str, level) {\r\n            if (this._options.debug && (!level || level === \"info\")) {\r\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\r\n            }\r\n            else if (level && level !== \"info\") {\r\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\r\n\r\n            }\r\n        },\r\n\r\n        pauseUpload: function(id) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\r\n                return false;\r\n            }\r\n\r\n            // Pause only really makes sense if the file is uploading or retrying\r\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\r\n                if (this._handler.pause(id)) {\r\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\r\n                    return true;\r\n                }\r\n                else {\r\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\r\n                }\r\n            }\r\n            else {\r\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        removeFileRef: function(id) {\r\n            this._handler.expunge(id);\r\n        },\r\n\r\n        reset: function() {\r\n            this.log(\"Resetting uploader...\");\r\n\r\n            this._handler.reset();\r\n            this._storedIds = [];\r\n            this._autoRetries = [];\r\n            this._retryTimeouts = [];\r\n            this._preventRetries = [];\r\n            this._thumbnailUrls = [];\r\n\r\n            qq.each(this._buttons, function(idx, button) {\r\n                button.reset();\r\n            });\r\n\r\n            this._paramsStore.reset();\r\n            this._endpointStore.reset();\r\n            this._netUploadedOrQueued = 0;\r\n            this._netUploaded = 0;\r\n            this._uploadData.reset();\r\n            this._buttonIdsForFileIds = [];\r\n\r\n            this._pasteHandler && this._pasteHandler.reset();\r\n            this._options.session.refreshOnReset && this._refreshSessionData();\r\n\r\n            this._succeededSinceLastAllComplete = [];\r\n            this._failedSinceLastAllComplete = [];\r\n\r\n            this._totalProgress && this._totalProgress.reset();\r\n        },\r\n\r\n        retry: function(id) {\r\n            return this._manualRetry(id);\r\n        },\r\n\r\n        scaleImage: function(id, specs) {\r\n            var self = this;\r\n\r\n            return qq.Scaler.prototype.scaleImage(id, specs, {\r\n                log: qq.bind(self.log, self),\r\n                getFile: qq.bind(self.getFile, self),\r\n                uploadData: self._uploadData\r\n            });\r\n        },\r\n\r\n        setCustomHeaders: function(headers, id) {\r\n            this._customHeadersStore.set(headers, id);\r\n        },\r\n\r\n        setDeleteFileCustomHeaders: function(headers, id) {\r\n            this._deleteFileCustomHeadersStore.set(headers, id);\r\n        },\r\n\r\n        setDeleteFileEndpoint: function(endpoint, id) {\r\n            this._deleteFileEndpointStore.set(endpoint, id);\r\n        },\r\n\r\n        setDeleteFileParams: function(params, id) {\r\n            this._deleteFileParamsStore.set(params, id);\r\n        },\r\n\r\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\r\n        setEndpoint: function(endpoint, id) {\r\n            this._endpointStore.set(endpoint, id);\r\n        },\r\n\r\n        setForm: function(elementOrId) {\r\n            this._updateFormSupportAndParams(elementOrId);\r\n        },\r\n\r\n        setItemLimit: function(newItemLimit) {\r\n            this._currentItemLimit = newItemLimit;\r\n        },\r\n\r\n        setName: function(id, newName) {\r\n            this._uploadData.updateName(id, newName);\r\n        },\r\n\r\n        setParams: function(params, id) {\r\n            this._paramsStore.set(params, id);\r\n        },\r\n\r\n        setUuid: function(id, newUuid) {\r\n            return this._uploadData.uuidChanged(id, newUuid);\r\n        },\r\n\r\n        /**\r\n         * Expose the internal status of a file id to the public api for manual state changes\r\n         * @public\r\n         *\r\n         * @param {Number} id,\r\n         * @param {String} newStatus\r\n         *\r\n         * @todo Implement the remaining methods\r\n         */\r\n        setStatus: function(id, newStatus) {\r\n            var fileRecord = this.getUploads({id: id});\r\n            if (!fileRecord) {\r\n                throw new qq.Error(id + \" is not a valid file ID.\");\r\n            }\r\n\r\n            switch (newStatus) {\r\n                case qq.status.DELETED:\r\n                    this._onDeleteComplete(id, null, false);\r\n                    break;\r\n                case qq.status.DELETE_FAILED:\r\n                    this._onDeleteComplete(id, null, true);\r\n                    break;\r\n                default:\r\n                    var errorMessage = \"Method setStatus called on '\" + name + \"' not implemented yet for \" + newStatus;\r\n                    this.log(errorMessage);\r\n                    throw new qq.Error(errorMessage);\r\n            }\r\n        },\r\n\r\n        uploadStoredFiles: function() {\r\n            if (this._storedIds.length === 0) {\r\n                this._itemError(\"noFilesError\");\r\n            }\r\n            else {\r\n                this._uploadStoredFiles();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Defines the private (internal) API for FineUploaderBasic mode.\r\n     */\r\n    qq.basePrivateApi = {\r\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\r\n        _addCannedFile: function(sessionData) {\r\n            var self = this;\r\n\r\n            return this._uploadData.addFile({\r\n                uuid: sessionData.uuid,\r\n                name: sessionData.name,\r\n                size: sessionData.size,\r\n                status: qq.status.UPLOAD_SUCCESSFUL,\r\n                onBeforeStatusChange: function(id) {\r\n                    sessionData.deleteFileEndpoint && self.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\r\n                    sessionData.deleteFileParams && self.setDeleteFileParams(sessionData.deleteFileParams, id);\r\n\r\n                    if (sessionData.thumbnailUrl) {\r\n                        self._thumbnailUrls[id] = sessionData.thumbnailUrl;\r\n                    }\r\n\r\n                    self._netUploaded++;\r\n                    self._netUploadedOrQueued++;\r\n                }\r\n            });\r\n        },\r\n\r\n        _annotateWithButtonId: function(file, associatedInput) {\r\n            if (qq.isFile(file)) {\r\n                file.qqButtonId = this._getButtonId(associatedInput);\r\n            }\r\n        },\r\n\r\n        _batchError: function(message) {\r\n            this._options.callbacks.onError(null, null, message, undefined);\r\n        },\r\n\r\n        _createDeleteHandler: function() {\r\n            var self = this;\r\n\r\n            return new qq.DeleteFileAjaxRequester({\r\n                method: this._options.deleteFile.method.toUpperCase(),\r\n                maxConnections: this._options.maxConnections,\r\n                uuidParamName: this._options.request.uuidName,\r\n                customHeaders: this._deleteFileCustomHeadersStore,\r\n                paramsStore: this._deleteFileParamsStore,\r\n                endpointStore: this._deleteFileEndpointStore,\r\n                cors: this._options.cors,\r\n                log: qq.bind(self.log, self),\r\n                onDelete: function(id) {\r\n                    self._onDelete(id);\r\n                    self._options.callbacks.onDelete(id);\r\n                },\r\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\r\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\r\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        _createPasteHandler: function() {\r\n            var self = this;\r\n\r\n            return new qq.PasteSupport({\r\n                targetElement: this._options.paste.targetElement,\r\n                callbacks: {\r\n                    log: qq.bind(self.log, self),\r\n                    pasteReceived: function(blob) {\r\n                        self._handleCheckedCallback({\r\n                            name: \"onPasteReceived\",\r\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\r\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\r\n                            identifier: \"pasted image\"\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        _createStore: function(initialValue, _readOnlyValues_) {\r\n            var store = {},\r\n                catchall = initialValue,\r\n                perIdReadOnlyValues = {},\r\n                readOnlyValues = _readOnlyValues_,\r\n                copy = function(orig) {\r\n                    if (qq.isObject(orig)) {\r\n                        return qq.extend({}, orig);\r\n                    }\r\n                    return orig;\r\n                },\r\n                getReadOnlyValues = function() {\r\n                    if (qq.isFunction(readOnlyValues)) {\r\n                        return readOnlyValues();\r\n                    }\r\n                    return readOnlyValues;\r\n                },\r\n                includeReadOnlyValues = function(id, existing) {\r\n                    if (readOnlyValues && qq.isObject(existing)) {\r\n                        qq.extend(existing, getReadOnlyValues());\r\n                    }\r\n\r\n                    if (perIdReadOnlyValues[id]) {\r\n                        qq.extend(existing, perIdReadOnlyValues[id]);\r\n                    }\r\n                };\r\n\r\n            return {\r\n                set: function(val, id) {\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    if (id == null) {\r\n                        store = {};\r\n                        catchall = copy(val);\r\n                    }\r\n                    else {\r\n                        store[id] = copy(val);\r\n                    }\r\n                },\r\n\r\n                get: function(id) {\r\n                    var values;\r\n\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    if (id != null && store[id]) {\r\n                        values = store[id];\r\n                    }\r\n                    else {\r\n                        values = copy(catchall);\r\n                    }\r\n\r\n                    includeReadOnlyValues(id, values);\r\n\r\n                    return copy(values);\r\n                },\r\n\r\n                addReadOnly: function(id, values) {\r\n                    // Only applicable to Object stores\r\n                    if (qq.isObject(store)) {\r\n                        // If null ID, apply readonly values to all files\r\n                        if (id === null) {\r\n                            if (qq.isFunction(values)) {\r\n                                readOnlyValues = values;\r\n                            }\r\n                            else {\r\n                                readOnlyValues = readOnlyValues || {};\r\n                                qq.extend(readOnlyValues, values);\r\n                            }\r\n                        }\r\n                        else {\r\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\r\n                            qq.extend(perIdReadOnlyValues[id], values);\r\n                        }\r\n                    }\r\n                },\r\n\r\n                remove: function(fileId) {\r\n                    return delete store[fileId];\r\n                },\r\n\r\n                reset: function() {\r\n                    store = {};\r\n                    perIdReadOnlyValues = {};\r\n                    catchall = initialValue;\r\n                }\r\n            };\r\n        },\r\n\r\n        _createUploadDataTracker: function() {\r\n            var self = this;\r\n\r\n            return new qq.UploadData({\r\n                getName: function(id) {\r\n                    return self.getName(id);\r\n                },\r\n                getUuid: function(id) {\r\n                    return self.getUuid(id);\r\n                },\r\n                getSize: function(id) {\r\n                    return self.getSize(id);\r\n                },\r\n                onStatusChange: function(id, oldStatus, newStatus) {\r\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\r\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\r\n                    self._maybeAllComplete(id, newStatus);\r\n\r\n                    if (self._totalProgress) {\r\n                        setTimeout(function() {\r\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\r\n                        }, 0);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Generate a tracked upload button.\r\n         *\r\n         * @param spec Object containing a required `element` property\r\n         * along with optional `multiple`, `accept`, and `folders`.\r\n         * @returns {qq.UploadButton}\r\n         * @private\r\n         */\r\n        _createUploadButton: function(spec) {\r\n            var self = this,\r\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\r\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\r\n                button;\r\n\r\n            function allowMultiple() {\r\n                if (qq.supportedFeatures.ajaxUploading) {\r\n                    // Workaround for bug in iOS7+ (see #1039)\r\n                    if (self._options.workarounds.iosEmptyVideos &&\r\n                        qq.ios() &&\r\n                        !qq.ios6() &&\r\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\r\n\r\n                        return false;\r\n                    }\r\n\r\n                    if (spec.multiple === undefined) {\r\n                        return self._options.multiple;\r\n                    }\r\n\r\n                    return spec.multiple;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            button = new qq.UploadButton({\r\n                acceptFiles: acceptFiles,\r\n                element: spec.element,\r\n                focusClass: this._options.classes.buttonFocus,\r\n                folders: spec.folders,\r\n                hoverClass: this._options.classes.buttonHover,\r\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\r\n                multiple: allowMultiple(),\r\n                name: this._options.request.inputName,\r\n                onChange: function(input) {\r\n                    self._onInputChange(input);\r\n                },\r\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\r\n            });\r\n\r\n            this._disposeSupport.addDisposer(function() {\r\n                button.dispose();\r\n            });\r\n\r\n            self._buttons.push(button);\r\n\r\n            return button;\r\n        },\r\n\r\n        _createUploadHandler: function(additionalOptions, namespace) {\r\n            var self = this,\r\n                lastOnProgress = {},\r\n                options = {\r\n                    debug: this._options.debug,\r\n                    maxConnections: this._options.maxConnections,\r\n                    cors: this._options.cors,\r\n                    paramsStore: this._paramsStore,\r\n                    endpointStore: this._endpointStore,\r\n                    chunking: this._options.chunking,\r\n                    resume: this._options.resume,\r\n                    blobs: this._options.blobs,\r\n                    log: qq.bind(self.log, self),\r\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\r\n                    onProgress: function(id, name, loaded, total) {\r\n                        if (loaded < 0 || total < 0) {\r\n                            return;\r\n                        }\r\n\r\n                        if (lastOnProgress[id]) {\r\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\r\n                                self._onProgress(id, name, loaded, total);\r\n                                self._options.callbacks.onProgress(id, name, loaded, total);\r\n                            }\r\n                        }\r\n                        else {\r\n                            self._onProgress(id, name, loaded, total);\r\n                            self._options.callbacks.onProgress(id, name, loaded, total);\r\n                        }\r\n\r\n                        lastOnProgress[id] = {loaded: loaded, total: total};\r\n\r\n                    },\r\n                    onComplete: function(id, name, result, xhr) {\r\n                        delete lastOnProgress[id];\r\n\r\n                        var status = self.getUploads({id: id}).status,\r\n                            retVal;\r\n\r\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\r\n                        // invoked by the browser multiple times for the same XHR instance with the same state\r\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\r\n                        // done this.\r\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\r\n                            return;\r\n                        }\r\n\r\n                        retVal = self._onComplete(id, name, result, xhr);\r\n\r\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\r\n                        // until the promise has been fulfilled.\r\n                        if (retVal instanceof  qq.Promise) {\r\n                            retVal.done(function() {\r\n                                self._options.callbacks.onComplete(id, name, result, xhr);\r\n                            });\r\n                        }\r\n                        else {\r\n                            self._options.callbacks.onComplete(id, name, result, xhr);\r\n                        }\r\n                    },\r\n                    onCancel: function(id, name, cancelFinalizationEffort) {\r\n                        var promise = new qq.Promise();\r\n\r\n                        self._handleCheckedCallback({\r\n                            name: \"onCancel\",\r\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\r\n                            onFailure: promise.failure,\r\n                            onSuccess: function() {\r\n                                cancelFinalizationEffort.then(function() {\r\n                                    self._onCancel(id, name);\r\n                                });\r\n\r\n                                promise.success();\r\n                            },\r\n                            identifier: id\r\n                        });\r\n\r\n                        return promise;\r\n                    },\r\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\r\n                    onUpload: function(id, name) {\r\n                        self._onUpload(id, name);\r\n                        self._options.callbacks.onUpload(id, name);\r\n                    },\r\n                    onUploadChunk: function(id, name, chunkData) {\r\n                        self._onUploadChunk(id, chunkData);\r\n                        self._options.callbacks.onUploadChunk(id, name, chunkData);\r\n                    },\r\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\r\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\r\n                    },\r\n                    onResume: function(id, name, chunkData) {\r\n                        return self._options.callbacks.onResume(id, name, chunkData);\r\n                    },\r\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\r\n                        return self._onAutoRetry.apply(self, arguments);\r\n                    },\r\n                    onUuidChanged: function(id, newUuid) {\r\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\r\n                        self.setUuid(id, newUuid);\r\n                    },\r\n                    getName: qq.bind(self.getName, self),\r\n                    getUuid: qq.bind(self.getUuid, self),\r\n                    getSize: qq.bind(self.getSize, self),\r\n                    setSize: qq.bind(self._setSize, self),\r\n                    getDataByUuid: function(uuid) {\r\n                        return self.getUploads({uuid: uuid});\r\n                    },\r\n                    isQueued: function(id) {\r\n                        var status = self.getUploads({id: id}).status;\r\n                        return status === qq.status.QUEUED ||\r\n                            status === qq.status.SUBMITTED ||\r\n                            status === qq.status.UPLOAD_RETRYING ||\r\n                            status === qq.status.PAUSED;\r\n                    },\r\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\r\n                    getIdsInBatch: self._uploadData.getIdsInBatch\r\n                };\r\n\r\n            qq.each(this._options.request, function(prop, val) {\r\n                options[prop] = val;\r\n            });\r\n\r\n            options.customHeaders = this._customHeadersStore;\r\n\r\n            if (additionalOptions) {\r\n                qq.each(additionalOptions, function(key, val) {\r\n                    options[key] = val;\r\n                });\r\n            }\r\n\r\n            return new qq.UploadHandlerController(options, namespace);\r\n        },\r\n\r\n        _fileOrBlobRejected: function(id) {\r\n            this._netUploadedOrQueued--;\r\n            this._uploadData.setStatus(id, qq.status.REJECTED);\r\n        },\r\n\r\n        _formatSize: function(bytes) {\r\n            if (bytes === 0) {\r\n                return bytes + this._options.text.sizeSymbols[0];\r\n            }\r\n            var i = -1;\r\n            do {\r\n                bytes = bytes / 1000;\r\n                i++;\r\n            } while (bytes > 999);\r\n\r\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\r\n        },\r\n\r\n        // Creates an internal object that tracks various properties of each extra button,\r\n        // and then actually creates the extra button.\r\n        _generateExtraButtonSpecs: function() {\r\n            var self = this;\r\n\r\n            this._extraButtonSpecs = {};\r\n\r\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\r\n                var multiple = extraButtonOptionEntry.multiple,\r\n                    validation = qq.extend({}, self._options.validation, true),\r\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\r\n\r\n                if (multiple === undefined) {\r\n                    multiple = self._options.multiple;\r\n                }\r\n\r\n                if (extraButtonSpec.validation) {\r\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\r\n                }\r\n\r\n                qq.extend(extraButtonSpec, {\r\n                    multiple: multiple,\r\n                    validation: validation\r\n                }, true);\r\n\r\n                self._initExtraButton(extraButtonSpec);\r\n            });\r\n        },\r\n\r\n        _getButton: function(buttonId) {\r\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\r\n\r\n            if (extraButtonsSpec) {\r\n                return extraButtonsSpec.element;\r\n            }\r\n            else if (buttonId === this._defaultButtonId) {\r\n                return this._options.button;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the internally used tracking ID for a button.\r\n         *\r\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\r\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\r\n         * @private\r\n         */\r\n        _getButtonId: function(buttonOrFileInputOrFile) {\r\n            var inputs, fileInput,\r\n                fileBlobOrInput = buttonOrFileInputOrFile;\r\n\r\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\r\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\r\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\r\n            }\r\n\r\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\r\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\r\n                if (qq.isFile(fileBlobOrInput)) {\r\n                    return fileBlobOrInput.qqButtonId;\r\n                }\r\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\r\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\r\n\r\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\r\n                }\r\n\r\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\r\n\r\n                qq.each(inputs, function(idx, input) {\r\n                    if (input.getAttribute(\"type\") === \"file\") {\r\n                        fileInput = input;\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                if (fileInput) {\r\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\r\n                }\r\n            }\r\n        },\r\n\r\n        _getNotFinished: function() {\r\n            return this._uploadData.retrieve({\r\n                status: [\r\n                    qq.status.UPLOADING,\r\n                    qq.status.UPLOAD_RETRYING,\r\n                    qq.status.QUEUED,\r\n                    qq.status.SUBMITTING,\r\n                    qq.status.SUBMITTED,\r\n                    qq.status.PAUSED\r\n                ]\r\n            }).length;\r\n        },\r\n\r\n        // Get the validation options for this button.  Could be the default validation option\r\n        // or a specific one assigned to this particular button.\r\n        _getValidationBase: function(buttonId) {\r\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\r\n\r\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\r\n        },\r\n\r\n        _getValidationDescriptor: function(fileWrapper) {\r\n            if (fileWrapper.file instanceof qq.BlobProxy) {\r\n                return {\r\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\r\n                    size: fileWrapper.file.referenceBlob.size\r\n                };\r\n            }\r\n\r\n            return {\r\n                name: this.getUploads({id: fileWrapper.id}).name,\r\n                size: this.getUploads({id: fileWrapper.id}).size\r\n            };\r\n        },\r\n\r\n        _getValidationDescriptors: function(fileWrappers) {\r\n            var self = this,\r\n                fileDescriptors = [];\r\n\r\n            qq.each(fileWrappers, function(idx, fileWrapper) {\r\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\r\n            });\r\n\r\n            return fileDescriptors;\r\n        },\r\n\r\n        // Allows camera access on either the default or an extra button for iOS devices.\r\n        _handleCameraAccess: function() {\r\n            if (this._options.camera.ios && qq.ios()) {\r\n                var acceptIosCamera = \"image/*;capture=camera\",\r\n                    button = this._options.camera.button,\r\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\r\n                    optionRoot = this._options;\r\n\r\n                // If we are not targeting the default button, it is an \"extra\" button\r\n                if (buttonId && buttonId !== this._defaultButtonId) {\r\n                    optionRoot = this._extraButtonSpecs[buttonId];\r\n                }\r\n\r\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\r\n                optionRoot.multiple = false;\r\n\r\n                // update the options\r\n                if (optionRoot.validation.acceptFiles === null) {\r\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\r\n                }\r\n                else {\r\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\r\n                }\r\n\r\n                // update the already-created button\r\n                qq.each(this._buttons, function(idx, button) {\r\n                    if (button.getButtonId() === buttonId) {\r\n                        button.setMultiple(optionRoot.multiple);\r\n                        button.setAcceptFiles(optionRoot.acceptFiles);\r\n\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        _handleCheckedCallback: function(details) {\r\n            var self = this,\r\n                callbackRetVal = details.callback();\r\n\r\n            if (qq.isGenericPromise(callbackRetVal)) {\r\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\r\n                return callbackRetVal.then(\r\n                    function(successParam) {\r\n                        self.log(details.name + \" promise success for \" + details.identifier);\r\n                        details.onSuccess(successParam);\r\n                    },\r\n                    function() {\r\n                        if (details.onFailure) {\r\n                            self.log(details.name + \" promise failure for \" + details.identifier);\r\n                            details.onFailure();\r\n                        }\r\n                        else {\r\n                            self.log(details.name + \" promise failure for \" + details.identifier);\r\n                        }\r\n                    });\r\n            }\r\n\r\n            if (callbackRetVal !== false) {\r\n                details.onSuccess(callbackRetVal);\r\n            }\r\n            else {\r\n                if (details.onFailure) {\r\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\r\n                    details.onFailure();\r\n                }\r\n                else {\r\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\r\n                }\r\n            }\r\n\r\n            return callbackRetVal;\r\n        },\r\n\r\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\r\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\r\n            var self = this,\r\n                uuid = qq.getUniqueId(),\r\n                size = -1,\r\n                name = qq.getFilename(file),\r\n                actualFile = file.blob || file,\r\n                handler = this._customNewFileHandler ?\r\n                    this._customNewFileHandler :\r\n                    qq.bind(self._handleNewFileGeneric, self);\r\n\r\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\r\n                size = actualFile.size;\r\n            }\r\n\r\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\r\n                uploadData: self._uploadData,\r\n                paramsStore: self._paramsStore,\r\n                addFileToHandler: function(id, file) {\r\n                    self._handler.add(id, file);\r\n                    self._netUploadedOrQueued++;\r\n                    self._trackButton(id);\r\n                }\r\n            });\r\n        },\r\n\r\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\r\n            var id = this._uploadData.addFile({uuid: uuid, name: name, size: size, batchId: batchId});\r\n\r\n            this._handler.add(id, file);\r\n            this._trackButton(id);\r\n\r\n            this._netUploadedOrQueued++;\r\n\r\n            fileList.push({id: id, file: file});\r\n        },\r\n\r\n        _handlePasteSuccess: function(blob, extSuppliedName) {\r\n            var extension = blob.type.split(\"/\")[1],\r\n                name = extSuppliedName;\r\n\r\n            /*jshint eqeqeq: true, eqnull: true*/\r\n            if (name == null) {\r\n                name = this._options.paste.defaultName;\r\n            }\r\n\r\n            name += \".\" + extension;\r\n\r\n            this.addFiles({\r\n                name: name,\r\n                blob: blob\r\n            });\r\n        },\r\n\r\n        _handleDeleteSuccess: function(id) {\r\n            if (this.getUploads({id: id}).status !== qq.status.DELETED) {\r\n                var name = this.getName(id);\r\n\r\n                this._netUploadedOrQueued--;\r\n                this._netUploaded--;\r\n                this._handler.expunge(id);\r\n                this._uploadData.setStatus(id, qq.status.DELETED);\r\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\r\n            }\r\n        },\r\n\r\n        _handleDeleteFailed: function(id, xhrOrXdr) {\r\n            var name = this.getName(id);\r\n\r\n            this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\r\n            this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\r\n\r\n            // Check first if xhrOrXdr is actually passed or valid\r\n            // For error reporting, we only have access to the response status if this is not\r\n            // an `XDomainRequest`.\r\n            if (!xhrOrXdr || xhrOrXdr.withCredentials === undefined) {\r\n                this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\r\n            }\r\n            else {\r\n                this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\r\n            }\r\n        },\r\n\r\n        // Creates an extra button element\r\n        _initExtraButton: function(spec) {\r\n            var button = this._createUploadButton({\r\n                accept: spec.validation.acceptFiles,\r\n                allowedExtensions: spec.validation.allowedExtensions,\r\n                element: spec.element,\r\n                folders: spec.folders,\r\n                multiple: spec.multiple,\r\n                title: spec.fileInputTitle\r\n            });\r\n\r\n            this._extraButtonSpecs[button.getButtonId()] = spec;\r\n        },\r\n\r\n        _initFormSupportAndParams: function() {\r\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\r\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\r\n            );\r\n\r\n            if (this._formSupport && this._formSupport.attachedToForm) {\r\n                this._paramsStore = this._createStore(\r\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\r\n                );\r\n\r\n                this._options.autoUpload = this._formSupport.newAutoUpload;\r\n                if (this._formSupport.newEndpoint) {\r\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\r\n                }\r\n            }\r\n            else {\r\n                this._paramsStore = this._createStore(this._options.request.params);\r\n            }\r\n        },\r\n\r\n        _isDeletePossible: function() {\r\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\r\n                return false;\r\n            }\r\n\r\n            if (this._options.cors.expected) {\r\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\r\n                    return true;\r\n                }\r\n\r\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        _isAllowedExtension: function(allowed, fileName) {\r\n            var valid = false;\r\n\r\n            if (!allowed.length) {\r\n                return true;\r\n            }\r\n\r\n            qq.each(allowed, function(idx, allowedExt) {\r\n                /**\r\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\r\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\r\n                 */\r\n                if (qq.isString(allowedExt)) {\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\r\n\r\n                    if (fileName.match(extRegex) != null) {\r\n                        valid = true;\r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n\r\n            return valid;\r\n        },\r\n\r\n        /**\r\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\r\n         *\r\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\r\n         * @param maybeNameOrNames names of the items that have failed, if applicable\r\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\r\n         * @private\r\n         */\r\n        _itemError: function(code, maybeNameOrNames, item) {\r\n            var message = this._options.messages[code],\r\n                allowedExtensions = [],\r\n                names = [].concat(maybeNameOrNames),\r\n                name = names[0],\r\n                buttonId = this._getButtonId(item),\r\n                validationBase = this._getValidationBase(buttonId),\r\n                extensionsForMessage, placeholderMatch;\r\n\r\n            function r(name, replacement) { message = message.replace(name, replacement); }\r\n\r\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\r\n                /**\r\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\r\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\r\n                 */\r\n                if (qq.isString(allowedExtension)) {\r\n                    allowedExtensions.push(allowedExtension);\r\n                }\r\n            });\r\n\r\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\r\n\r\n            r(\"{file}\", this._options.formatFileName(name));\r\n            r(\"{extensions}\", extensionsForMessage);\r\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\r\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\r\n\r\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\r\n            if (placeholderMatch !== null) {\r\n                qq.each(placeholderMatch, function(idx, placeholder) {\r\n                    r(placeholder, names[idx]);\r\n                });\r\n            }\r\n\r\n            this._options.callbacks.onError(null, name, message, undefined);\r\n\r\n            return message;\r\n        },\r\n\r\n        /**\r\n         * Conditionally orders a manual retry of a failed upload.\r\n         *\r\n         * @param id File ID of the failed upload\r\n         * @param callback Optional callback to invoke if a retry is prudent.\r\n         * In lieu of asking the upload handler to retry.\r\n         * @returns {boolean} true if a manual retry will occur\r\n         * @private\r\n         */\r\n        _manualRetry: function(id, callback) {\r\n            if (this._onBeforeManualRetry(id)) {\r\n                this._netUploadedOrQueued++;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\r\n\r\n                if (callback) {\r\n                    callback(id);\r\n                }\r\n                else {\r\n                    this._handler.retry(id);\r\n                }\r\n\r\n                return true;\r\n            }\r\n        },\r\n\r\n        _maybeAllComplete: function(id, status) {\r\n            var self = this,\r\n                notFinished = this._getNotFinished();\r\n\r\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\r\n                this._succeededSinceLastAllComplete.push(id);\r\n            }\r\n            else if (status === qq.status.UPLOAD_FAILED) {\r\n                this._failedSinceLastAllComplete.push(id);\r\n            }\r\n\r\n            if (notFinished === 0 &&\r\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\r\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\r\n                setTimeout(function() {\r\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\r\n                }, 0);\r\n            }\r\n        },\r\n\r\n        _maybeHandleIos8SafariWorkaround: function() {\r\n            var self = this;\r\n\r\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\r\n                setTimeout(function() {\r\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\r\n                }, 0);\r\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\r\n            }\r\n        },\r\n\r\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\r\n            // Assuming no one will actually set the response code to something other than 200\r\n            // and still set 'success' to true...\r\n            if (!response.success) {\r\n                if (xhr && xhr.status !== 200 && !response.error) {\r\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\r\n                }\r\n                else {\r\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\r\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\r\n                }\r\n            }\r\n        },\r\n\r\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\r\n            var self = this;\r\n\r\n            if (items.length > index) {\r\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\r\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\r\n                    setTimeout(function() {\r\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\r\n                            buttonId = self._getButtonId(items[index].file),\r\n                            button = self._getButton(buttonId);\r\n\r\n                        self._handleCheckedCallback({\r\n                            name: \"onValidate\",\r\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\r\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\r\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\r\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\r\n                        });\r\n                    }, 0);\r\n                }\r\n                else if (!validItem) {\r\n                    for (; index < items.length; index++) {\r\n                        self._fileOrBlobRejected(items[index].id);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        _onAllComplete: function(successful, failed) {\r\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\r\n\r\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\r\n\r\n            this._succeededSinceLastAllComplete = [];\r\n            this._failedSinceLastAllComplete = [];\r\n        },\r\n\r\n        /**\r\n         * Attempt to automatically retry a failed upload.\r\n         *\r\n         * @param id The file ID of the failed upload\r\n         * @param name The name of the file associated with the failed upload\r\n         * @param responseJSON Response from the server, parsed into a javascript object\r\n         * @param xhr Ajax transport used to send the failed request\r\n         * @param callback Optional callback to be invoked if a retry is prudent.\r\n         * Invoked in lieu of asking the upload handler to retry.\r\n         * @returns {boolean} true if an auto-retry will occur\r\n         * @private\r\n         */\r\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\r\n            var self = this;\r\n\r\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\r\n\r\n            if (self._shouldAutoRetry(id, name, responseJSON)) {\r\n                var retryWaitPeriod = self._options.retry.autoAttemptDelay * 1000;\r\n\r\n                self._maybeParseAndSendUploadError.apply(self, arguments);\r\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\r\n                self._onBeforeAutoRetry(id, name);\r\n\r\n                self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\r\n                self._retryTimeouts[id] = setTimeout(function() {\r\n                    self.log(\"Starting retry for \" + name + \"...\");\r\n\r\n                    if (callback) {\r\n                        callback(id);\r\n                    }\r\n                    else {\r\n                        self._handler.retry(id);\r\n                    }\r\n                }, retryWaitPeriod);\r\n\r\n                return true;\r\n            }\r\n        },\r\n\r\n        _onBeforeAutoRetry: function(id, name) {\r\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\r\n        },\r\n\r\n        //return false if we should not attempt the requested retry\r\n        _onBeforeManualRetry: function(id) {\r\n            var itemLimit = this._currentItemLimit,\r\n                fileName;\r\n\r\n            if (this._preventRetries[id]) {\r\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\r\n                return false;\r\n            }\r\n            else if (this._handler.isValid(id)) {\r\n                fileName = this.getName(id);\r\n\r\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\r\n                    return false;\r\n                }\r\n\r\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\r\n                    this._itemError(\"retryFailTooManyItems\");\r\n                    return false;\r\n                }\r\n\r\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onCancel: function(id, name) {\r\n            this._netUploadedOrQueued--;\r\n\r\n            clearTimeout(this._retryTimeouts[id]);\r\n\r\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\r\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\r\n                this._storedIds.splice(storedItemIndex, 1);\r\n            }\r\n\r\n            this._uploadData.setStatus(id, qq.status.CANCELED);\r\n        },\r\n\r\n        _onComplete: function(id, name, result, xhr) {\r\n            if (!result.success) {\r\n                this._netUploadedOrQueued--;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\r\n\r\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\r\n                    this._preventRetries[id] = true;\r\n                }\r\n            }\r\n            else {\r\n                if (result.thumbnailUrl) {\r\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\r\n                }\r\n\r\n                this._netUploaded++;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\r\n            }\r\n\r\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\r\n\r\n            return result.success ? true : false;\r\n        },\r\n\r\n        _onDelete: function(id) {\r\n            this._uploadData.setStatus(id, qq.status.DELETING);\r\n        },\r\n\r\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\r\n            var name = this.getName(id);\r\n\r\n            if (isError) {\r\n                this._handleDeleteFailed(id, xhrOrXdr);\r\n            }\r\n            else {\r\n                this._handleDeleteSuccess(id);\r\n            }\r\n        },\r\n\r\n        _onInputChange: function(input) {\r\n            var fileIndex;\r\n\r\n            if (qq.supportedFeatures.ajaxUploading) {\r\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\r\n                    this._annotateWithButtonId(input.files[fileIndex], input);\r\n                }\r\n\r\n                this.addFiles(input.files);\r\n            }\r\n            // Android 2.3.x will fire `onchange` even if no file has been selected\r\n            else if (input.value.length > 0) {\r\n                this.addFiles(input);\r\n            }\r\n\r\n            qq.each(this._buttons, function(idx, button) {\r\n                button.reset();\r\n            });\r\n        },\r\n\r\n        _onProgress: function(id, name, loaded, total) {\r\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\r\n        },\r\n\r\n        _onSubmit: function(id, name) {\r\n            //nothing to do yet in core uploader\r\n        },\r\n\r\n        _onSubmitCallbackSuccess: function(id, name) {\r\n            this._onSubmit.apply(this, arguments);\r\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\r\n            this._onSubmitted.apply(this, arguments);\r\n\r\n            if (this._options.autoUpload) {\r\n                this._options.callbacks.onSubmitted.apply(this, arguments);\r\n                this._uploadFile(id);\r\n            }\r\n            else {\r\n                this._storeForLater(id);\r\n                this._options.callbacks.onSubmitted.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\r\n            var uuid = this.getUuid(id),\r\n                adjustedOnSuccessCallback;\r\n\r\n            if (onSuccessCallback) {\r\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\r\n            }\r\n\r\n            if (this._isDeletePossible()) {\r\n                this._handleCheckedCallback({\r\n                    name: \"onSubmitDelete\",\r\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\r\n                    onSuccess: adjustedOnSuccessCallback ||\r\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\r\n                    identifier: id\r\n                });\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\r\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onSubmitted: function(id) {\r\n            //nothing to do in the base uploader\r\n        },\r\n\r\n        _onTotalProgress: function(loaded, total) {\r\n            this._options.callbacks.onTotalProgress(loaded, total);\r\n        },\r\n\r\n        _onUploadPrep: function(id) {\r\n            // nothing to do in the core uploader for now\r\n        },\r\n\r\n        _onUpload: function(id, name) {\r\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\r\n        },\r\n\r\n        _onUploadChunk: function(id, chunkData) {\r\n            //nothing to do in the base uploader\r\n        },\r\n\r\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\r\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\r\n            if (newStatus === qq.status.PAUSED) {\r\n                clearTimeout(this._retryTimeouts[id]);\r\n            }\r\n        },\r\n\r\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\r\n            var self = this;\r\n\r\n            qq.each(fileWrappers, function(idx, fileWrapper) {\r\n                self._fileOrBlobRejected(fileWrapper.id);\r\n            });\r\n        },\r\n\r\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\r\n            var errorMessage,\r\n                itemLimit = this._currentItemLimit,\r\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\r\n\r\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\r\n                if (items.length > 0) {\r\n                    this._handleCheckedCallback({\r\n                        name: \"onValidate\",\r\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\r\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\r\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\r\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\r\n                    });\r\n                }\r\n                else {\r\n                    this._itemError(\"noFilesError\");\r\n                }\r\n            }\r\n            else {\r\n                this._onValidateBatchCallbackFailure(items);\r\n                errorMessage = this._options.messages.tooManyItemsError\r\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\r\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\r\n                this._batchError(errorMessage);\r\n            }\r\n        },\r\n\r\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\r\n            var nextIndex = index + 1;\r\n\r\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\r\n\r\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\r\n        },\r\n\r\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\r\n            var self = this,\r\n                nextIndex = index + 1,\r\n                validationDescriptor = this._getValidationDescriptor(items[index]);\r\n\r\n            this._validateFileOrBlobData(items[index], validationDescriptor)\r\n                .then(\r\n                function() {\r\n                    self._upload(items[index].id, params, endpoint);\r\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\r\n                },\r\n                function() {\r\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\r\n                }\r\n            );\r\n        },\r\n\r\n        _prepareItemsForUpload: function(items, params, endpoint) {\r\n            if (items.length === 0) {\r\n                this._itemError(\"noFilesError\");\r\n                return;\r\n            }\r\n\r\n            var validationDescriptors = this._getValidationDescriptors(items),\r\n                buttonId = this._getButtonId(items[0].file),\r\n                button = this._getButton(buttonId);\r\n\r\n            this._handleCheckedCallback({\r\n                name: \"onValidateBatch\",\r\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\r\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\r\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\r\n                identifier: \"batch validation\"\r\n            });\r\n        },\r\n\r\n        _preventLeaveInProgress: function() {\r\n            var self = this;\r\n\r\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\r\n                if (self.getInProgress()) {\r\n                    e = e || window.event;\r\n                    // for ie, ff\r\n                    e.returnValue = self._options.messages.onLeave;\r\n                    // for webkit\r\n                    return self._options.messages.onLeave;\r\n                }\r\n            });\r\n        },\r\n\r\n        // Attempts to refresh session data only if the `qq.Session` module exists\r\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\r\n        // callback will be invoked once the refresh is complete.\r\n        _refreshSessionData: function() {\r\n            var self = this,\r\n                options = this._options.session;\r\n\r\n            /* jshint eqnull:true */\r\n            if (qq.Session && this._options.session.endpoint != null) {\r\n                if (!this._session) {\r\n                    qq.extend(options, {cors: this._options.cors});\r\n\r\n                    options.log = qq.bind(this.log, this);\r\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\r\n\r\n                    this._session = new qq.Session(options);\r\n                }\r\n\r\n                setTimeout(function() {\r\n                    self._session.refresh().then(function(response, xhrOrXdr) {\r\n                        self._sessionRequestComplete();\r\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\r\n\r\n                    }, function(response, xhrOrXdr) {\r\n\r\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\r\n                    });\r\n                }, 0);\r\n            }\r\n        },\r\n\r\n        _sessionRequestComplete: function() {},\r\n\r\n        _setSize: function(id, newSize) {\r\n            this._uploadData.updateSize(id, newSize);\r\n            this._totalProgress && this._totalProgress.onNewSize(id);\r\n        },\r\n\r\n        _shouldAutoRetry: function(id, name, responseJSON) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            /*jshint laxbreak: true */\r\n            if (!this._preventRetries[id]\r\n                && this._options.retry.enableAuto\r\n                && uploadData.status !== qq.status.PAUSED) {\r\n\r\n                if (this._autoRetries[id] === undefined) {\r\n                    this._autoRetries[id] = 0;\r\n                }\r\n\r\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\r\n                    this._autoRetries[id] += 1;\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        _storeForLater: function(id) {\r\n            this._storedIds.push(id);\r\n        },\r\n\r\n        // Maps a file with the button that was used to select it.\r\n        _trackButton: function(id) {\r\n            var buttonId;\r\n\r\n            if (qq.supportedFeatures.ajaxUploading) {\r\n                buttonId = this._handler.getFile(id).qqButtonId;\r\n            }\r\n            else {\r\n                buttonId = this._getButtonId(this._handler.getInput(id));\r\n            }\r\n\r\n            if (buttonId) {\r\n                this._buttonIdsForFileIds[id] = buttonId;\r\n            }\r\n        },\r\n\r\n        _updateFormSupportAndParams: function(formElementOrId) {\r\n            this._options.form.element = formElementOrId;\r\n\r\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\r\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\r\n                );\r\n\r\n            if (this._formSupport && this._formSupport.attachedToForm) {\r\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\r\n\r\n                this._options.autoUpload = this._formSupport.newAutoUpload;\r\n                if (this._formSupport.newEndpoint) {\r\n                    this.setEndpoint(this._formSupport.newEndpoint);\r\n                }\r\n            }\r\n        },\r\n\r\n        _upload: function(id, params, endpoint) {\r\n            var name = this.getName(id);\r\n\r\n            if (params) {\r\n                this.setParams(params, id);\r\n            }\r\n\r\n            if (endpoint) {\r\n                this.setEndpoint(endpoint, id);\r\n            }\r\n\r\n            this._handleCheckedCallback({\r\n                name: \"onSubmit\",\r\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\r\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\r\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\r\n                identifier: id\r\n            });\r\n        },\r\n\r\n        _uploadFile: function(id) {\r\n            if (!this._handler.upload(id)) {\r\n                this._uploadData.setStatus(id, qq.status.QUEUED);\r\n            }\r\n        },\r\n\r\n        _uploadStoredFiles: function() {\r\n            var idToUpload, stillSubmitting,\r\n                self = this;\r\n\r\n            while (this._storedIds.length) {\r\n                idToUpload = this._storedIds.shift();\r\n                this._uploadFile(idToUpload);\r\n            }\r\n\r\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\r\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\r\n            if (stillSubmitting) {\r\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\r\n                setTimeout(function() {\r\n                    self._uploadStoredFiles();\r\n                }, 1000);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Performs some internal validation checks on an item, defined in the `validation` option.\r\n         *\r\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\r\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\r\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\r\n         * @private\r\n         */\r\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\r\n            var self = this,\r\n                file = (function() {\r\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\r\n                        return fileWrapper.file.referenceBlob;\r\n                    }\r\n                    return fileWrapper.file;\r\n                }()),\r\n                name = validationDescriptor.name,\r\n                size = validationDescriptor.size,\r\n                buttonId = this._getButtonId(fileWrapper.file),\r\n                validationBase = this._getValidationBase(buttonId),\r\n                validityChecker = new qq.Promise();\r\n\r\n            validityChecker.then(\r\n                function() {},\r\n                function() {\r\n                    self._fileOrBlobRejected(fileWrapper.id, name);\r\n                });\r\n\r\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\r\n                this._itemError(\"typeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (!this._options.validation.allowEmpty && size === 0) {\r\n                this._itemError(\"emptyError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\r\n                this._itemError(\"sizeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size > 0 && size < validationBase.minSizeLimit) {\r\n                this._itemError(\"minSizeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\r\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\r\n                    validityChecker.success,\r\n                    function(errorCode) {\r\n                        self._itemError(errorCode + \"ImageError\", name, file);\r\n                        validityChecker.failure();\r\n                    }\r\n                );\r\n            }\r\n            else {\r\n                validityChecker.success();\r\n            }\r\n\r\n            return validityChecker;\r\n        },\r\n\r\n        _wrapCallbacks: function() {\r\n            var self, safeCallback, prop;\r\n\r\n            self = this;\r\n\r\n            safeCallback = function(name, callback, args) {\r\n                var errorMsg;\r\n\r\n                try {\r\n                    return callback.apply(self, args);\r\n                }\r\n                catch (exception) {\r\n                    errorMsg = exception.message || exception.toString();\r\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\r\n                }\r\n            };\r\n\r\n            /* jshint forin: false, loopfunc: true */\r\n            for (prop in this._options.callbacks) {\r\n                (function() {\r\n                    var callbackName, callbackFunc;\r\n                    callbackName = prop;\r\n                    callbackFunc = self._options.callbacks[callbackName];\r\n                    self._options.callbacks[callbackName] = function() {\r\n                        return safeCallback(callbackName, callbackFunc, arguments);\r\n                    };\r\n                }());\r\n            }\r\n        }\r\n    };\r\n}());\r\n","/*globals qq*/\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.FineUploaderBasic = function(o) {\r\n        var self = this;\r\n\r\n        // These options define FineUploaderBasic mode.\r\n        this._options = {\r\n            debug: false,\r\n            button: null,\r\n            multiple: true,\r\n            maxConnections: 3,\r\n            disableCancelForFormUploads: false,\r\n            autoUpload: true,\r\n\r\n            request: {\r\n                customHeaders: {},\r\n                endpoint: \"/server/upload\",\r\n                filenameParam: \"qqfilename\",\r\n                forceMultipart: true,\r\n                inputName: \"qqfile\",\r\n                method: \"POST\",\r\n                params: {},\r\n                paramsInBody: true,\r\n                totalFileSizeName: \"qqtotalfilesize\",\r\n                uuidName: \"qquuid\"\r\n            },\r\n\r\n            validation: {\r\n                allowedExtensions: [],\r\n                sizeLimit: 0,\r\n                minSizeLimit: 0,\r\n                itemLimit: 0,\r\n                stopOnFirstInvalidFile: true,\r\n                acceptFiles: null,\r\n                image: {\r\n                    maxHeight: 0,\r\n                    maxWidth: 0,\r\n                    minHeight: 0,\r\n                    minWidth: 0\r\n                },\r\n                allowEmpty: false\r\n            },\r\n\r\n            callbacks: {\r\n                onSubmit: function(id, name) {},\r\n                onSubmitted: function(id, name) {},\r\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\r\n                onAllComplete: function(successful, failed) {},\r\n                onCancel: function(id, name) {},\r\n                onUpload: function(id, name) {},\r\n                onUploadChunk: function(id, name, chunkData) {},\r\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\r\n                onResume: function(id, fileName, chunkData) {},\r\n                onProgress: function(id, name, loaded, total) {},\r\n                onTotalProgress: function(loaded, total) {},\r\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\r\n                onAutoRetry: function(id, name, attemptNumber) {},\r\n                onManualRetry: function(id, name) {},\r\n                onValidateBatch: function(fileOrBlobData) {},\r\n                onValidate: function(fileOrBlobData) {},\r\n                onSubmitDelete: function(id) {},\r\n                onDelete: function(id) {},\r\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\r\n                onPasteReceived: function(blob) {},\r\n                onStatusChange: function(id, oldStatus, newStatus) {},\r\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\r\n            },\r\n\r\n            messages: {\r\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\r\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\r\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\r\n                emptyError: \"{file} is empty, please select files again without it.\",\r\n                noFilesError: \"No files to upload.\",\r\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\r\n                maxHeightImageError: \"Image is too tall.\",\r\n                maxWidthImageError: \"Image is too wide.\",\r\n                minHeightImageError: \"Image is not tall enough.\",\r\n                minWidthImageError: \"Image is not wide enough.\",\r\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\r\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\r\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\r\n            },\r\n\r\n            retry: {\r\n                enableAuto: false,\r\n                maxAutoAttempts: 3,\r\n                autoAttemptDelay: 5,\r\n                preventRetryResponseProperty: \"preventRetry\"\r\n            },\r\n\r\n            classes: {\r\n                buttonHover: \"qq-upload-button-hover\",\r\n                buttonFocus: \"qq-upload-button-focus\"\r\n            },\r\n\r\n            chunking: {\r\n                enabled: false,\r\n                concurrent: {\r\n                    enabled: false\r\n                },\r\n                mandatory: false,\r\n                paramNames: {\r\n                    partIndex: \"qqpartindex\",\r\n                    partByteOffset: \"qqpartbyteoffset\",\r\n                    chunkSize: \"qqchunksize\",\r\n                    totalFileSize: \"qqtotalfilesize\",\r\n                    totalParts: \"qqtotalparts\"\r\n                },\r\n                partSize: 2000000,\r\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\r\n                success: {\r\n                    endpoint: null\r\n                }\r\n            },\r\n\r\n            resume: {\r\n                enabled: false,\r\n                recordsExpireIn: 7, //days\r\n                paramNames: {\r\n                    resuming: \"qqresume\"\r\n                }\r\n            },\r\n\r\n            formatFileName: function(fileOrBlobName) {\r\n                return fileOrBlobName;\r\n            },\r\n\r\n            text: {\r\n                defaultResponseError: \"Upload failure reason unknown\",\r\n                fileInputTitle: \"file input\",\r\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\r\n            },\r\n\r\n            deleteFile: {\r\n                enabled: false,\r\n                method: \"DELETE\",\r\n                endpoint: \"/server/upload\",\r\n                customHeaders: {},\r\n                params: {}\r\n            },\r\n\r\n            cors: {\r\n                expected: false,\r\n                sendCredentials: false,\r\n                allowXdr: false\r\n            },\r\n\r\n            blobs: {\r\n                defaultName: \"misc_data\"\r\n            },\r\n\r\n            paste: {\r\n                targetElement: null,\r\n                defaultName: \"pasted_image\"\r\n            },\r\n\r\n            camera: {\r\n                ios: false,\r\n\r\n                // if ios is true: button is null means target the default button, otherwise target the button specified\r\n                button: null\r\n            },\r\n\r\n            // This refers to additional upload buttons to be handled by Fine Uploader.\r\n            // Each element is an object, containing `element` as the only required\r\n            // property.  The `element` must be a container that will ultimately\r\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\r\n            // Optional properties of each object include `multiple`, `validation`,\r\n            // and `folders`.\r\n            extraButtons: [],\r\n\r\n            // Depends on the session module.  Used to query the server for an initial file list\r\n            // during initialization and optionally after a `reset`.\r\n            session: {\r\n                endpoint: null,\r\n                params: {},\r\n                customHeaders: {},\r\n                refreshOnReset: true\r\n            },\r\n\r\n            // Send parameters associated with an existing form along with the files\r\n            form: {\r\n                // Element ID, HTMLElement, or null\r\n                element: \"qq-form\",\r\n\r\n                // Overrides the base `autoUpload`, unless `element` is null.\r\n                autoUpload: false,\r\n\r\n                // true = upload files on form submission (and squelch submit event)\r\n                interceptSubmit: true\r\n            },\r\n\r\n            // scale images client side, upload a new file for each scaled version\r\n            scaling: {\r\n                customResizer: null,\r\n\r\n                // send the original file as well\r\n                sendOriginal: true,\r\n\r\n                // fox orientation for scaled images\r\n                orient: true,\r\n\r\n                // If null, scaled image type will match reference image type.  This value will be referred to\r\n                // for any size record that does not specific a type.\r\n                defaultType: null,\r\n\r\n                defaultQuality: 80,\r\n\r\n                failureText: \"Failed to scale\",\r\n\r\n                includeExif: false,\r\n\r\n                // metadata about each requested scaled version\r\n                sizes: []\r\n            },\r\n\r\n            workarounds: {\r\n                iosEmptyVideos: true,\r\n                ios8SafariUploads: true,\r\n                ios8BrowserCrash: false\r\n            }\r\n        };\r\n\r\n        // Replace any default options with user defined ones\r\n        qq.extend(this._options, o, true);\r\n\r\n        this._buttons = [];\r\n        this._extraButtonSpecs = {};\r\n        this._buttonIdsForFileIds = [];\r\n\r\n        this._wrapCallbacks();\r\n        this._disposeSupport =  new qq.DisposeSupport();\r\n\r\n        this._storedIds = [];\r\n        this._autoRetries = [];\r\n        this._retryTimeouts = [];\r\n        this._preventRetries = [];\r\n        this._thumbnailUrls = [];\r\n\r\n        this._netUploadedOrQueued = 0;\r\n        this._netUploaded = 0;\r\n        this._uploadData = this._createUploadDataTracker();\r\n\r\n        this._initFormSupportAndParams();\r\n\r\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\r\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\r\n\r\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\r\n\r\n        this._endpointStore = this._createStore(this._options.request.endpoint);\r\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\r\n\r\n        this._handler = this._createUploadHandler();\r\n\r\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\r\n\r\n        if (this._options.button) {\r\n            this._defaultButtonId = this._createUploadButton({\r\n                element: this._options.button,\r\n                title: this._options.text.fileInputTitle\r\n            }).getButtonId();\r\n        }\r\n\r\n        this._generateExtraButtonSpecs();\r\n\r\n        this._handleCameraAccess();\r\n\r\n        if (this._options.paste.targetElement) {\r\n            if (qq.PasteSupport) {\r\n                this._pasteHandler = this._createPasteHandler();\r\n            }\r\n            else {\r\n                this.log(\"Paste support module not found\", \"error\");\r\n            }\r\n        }\r\n\r\n        this._preventLeaveInProgress();\r\n\r\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\r\n        this._refreshSessionData();\r\n\r\n        this._succeededSinceLastAllComplete = [];\r\n        this._failedSinceLastAllComplete = [];\r\n\r\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\r\n        if (this._scaler.enabled) {\r\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\r\n        }\r\n\r\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\r\n            this._totalProgress = new qq.TotalProgress(\r\n                qq.bind(this._onTotalProgress, this),\r\n\r\n                function(id) {\r\n                    var entry = self._uploadData.retrieve({id: id});\r\n                    return (entry && entry.size) || 0;\r\n                }\r\n            );\r\n        }\r\n\r\n        this._currentItemLimit = this._options.validation.itemLimit;\r\n    };\r\n\r\n    // Define the private & public API methods.\r\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\r\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\r\n}());\r\n","/*globals qq, XDomainRequest*/\r\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\r\nqq.AjaxRequester = function(o) {\r\n    \"use strict\";\r\n\r\n    var log, shouldParamsBeInQueryString,\r\n        queue = [],\r\n        requestData = {},\r\n        options = {\r\n            acceptHeader: null,\r\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\r\n            method: \"POST\",\r\n            contentType: \"application/x-www-form-urlencoded\",\r\n            maxConnections: 3,\r\n            customHeaders: {},\r\n            endpointStore: {},\r\n            paramsStore: {},\r\n            mandatedParams: {},\r\n            allowXRequestedWithAndCacheControl: true,\r\n            successfulResponseCodes: {\r\n                DELETE: [200, 202, 204],\r\n                PATCH: [200, 201, 202, 203, 204],\r\n                POST: [200, 201, 202, 203, 204],\r\n                PUT: [200, 201, 202, 203, 204],\r\n                GET: [200]\r\n            },\r\n            cors: {\r\n                expected: false,\r\n                sendCredentials: false\r\n            },\r\n            log: function(str, level) {},\r\n            onSend: function(id) {},\r\n            onComplete: function(id, xhrOrXdr, isError) {},\r\n            onProgress: null\r\n        };\r\n\r\n    qq.extend(options, o);\r\n    log = options.log;\r\n\r\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\r\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\r\n    }\r\n\r\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\r\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\r\n    // make a CORS request eligible to be exempt from preflighting.\r\n    function isSimpleMethod() {\r\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\r\n    }\r\n\r\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\r\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\r\n    // make a CORS request eligible to be exempt from preflighting.\r\n    function containsNonSimpleHeaders(headers) {\r\n        var containsNonSimple = false;\r\n\r\n        qq.each(containsNonSimple, function(idx, header) {\r\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\r\n                containsNonSimple = true;\r\n                return false;\r\n            }\r\n        });\r\n\r\n        return containsNonSimple;\r\n    }\r\n\r\n    function isXdr(xhr) {\r\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\r\n        return options.cors.expected && xhr.withCredentials === undefined;\r\n    }\r\n\r\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\r\n    function getCorsAjaxTransport() {\r\n        var xhrOrXdr;\r\n\r\n        if (window.XMLHttpRequest || window.ActiveXObject) {\r\n            xhrOrXdr = qq.createXhrInstance();\r\n\r\n            if (xhrOrXdr.withCredentials === undefined) {\r\n                xhrOrXdr = new XDomainRequest();\r\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\r\n                xhrOrXdr.onload = function() {};\r\n                xhrOrXdr.onerror = function() {};\r\n                xhrOrXdr.ontimeout = function() {};\r\n                xhrOrXdr.onprogress = function() {};\r\n            }\r\n        }\r\n\r\n        return xhrOrXdr;\r\n    }\r\n\r\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\r\n    function getXhrOrXdr(id, suppliedXhr) {\r\n        var xhrOrXdr = requestData[id].xhr;\r\n\r\n        if (!xhrOrXdr) {\r\n            if (suppliedXhr) {\r\n                xhrOrXdr = suppliedXhr;\r\n            }\r\n            else {\r\n                if (options.cors.expected) {\r\n                    xhrOrXdr = getCorsAjaxTransport();\r\n                }\r\n                else {\r\n                    xhrOrXdr = qq.createXhrInstance();\r\n                }\r\n            }\r\n\r\n            requestData[id].xhr = xhrOrXdr;\r\n        }\r\n\r\n        return xhrOrXdr;\r\n    }\r\n\r\n    // Removes element from queue, sends next request\r\n    function dequeue(id) {\r\n        var i = qq.indexOf(queue, id),\r\n            max = options.maxConnections,\r\n            nextId;\r\n\r\n        delete requestData[id];\r\n        queue.splice(i, 1);\r\n\r\n        if (queue.length >= max && i < max) {\r\n            nextId = queue[max - 1];\r\n            sendRequest(nextId);\r\n        }\r\n    }\r\n\r\n    function onComplete(id, xdrError) {\r\n        var xhr = getXhrOrXdr(id),\r\n            method = options.method,\r\n            isError = xdrError === true;\r\n\r\n        dequeue(id);\r\n\r\n        if (isError) {\r\n            log(method + \" request for \" + id + \" has failed\", \"error\");\r\n        }\r\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\r\n            isError = true;\r\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\r\n        }\r\n\r\n        options.onComplete(id, xhr, isError);\r\n    }\r\n\r\n    function getParams(id) {\r\n        var onDemandParams = requestData[id].additionalParams,\r\n            mandatedParams = options.mandatedParams,\r\n            params;\r\n\r\n        if (options.paramsStore.get) {\r\n            params = options.paramsStore.get(id);\r\n        }\r\n\r\n        if (onDemandParams) {\r\n            qq.each(onDemandParams, function(name, val) {\r\n                params = params || {};\r\n                params[name] = val;\r\n            });\r\n        }\r\n\r\n        if (mandatedParams) {\r\n            qq.each(mandatedParams, function(name, val) {\r\n                params = params || {};\r\n                params[name] = val;\r\n            });\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n    function sendRequest(id, optXhr) {\r\n        var xhr = getXhrOrXdr(id, optXhr),\r\n            method = options.method,\r\n            params = getParams(id),\r\n            payload = requestData[id].payload,\r\n            url;\r\n\r\n        options.onSend(id);\r\n\r\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\r\n\r\n        // XDR and XHR status detection APIs differ a bit.\r\n        if (isXdr(xhr)) {\r\n            xhr.onload = getXdrLoadHandler(id);\r\n            xhr.onerror = getXdrErrorHandler(id);\r\n        }\r\n        else {\r\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\r\n        }\r\n\r\n        registerForUploadProgress(id);\r\n\r\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\r\n        xhr.open(method, url, true);\r\n\r\n        // Instruct the transport to send cookies along with the CORS request,\r\n        // unless we are using `XDomainRequest`, which is not capable of this.\r\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\r\n            xhr.withCredentials = true;\r\n        }\r\n\r\n        setHeaders(id);\r\n\r\n        log(\"Sending \" + method + \" request for \" + id);\r\n\r\n        if (payload) {\r\n            xhr.send(payload);\r\n        }\r\n        else if (shouldParamsBeInQueryString || !params) {\r\n            xhr.send();\r\n        }\r\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\r\n            xhr.send(qq.obj2url(params, \"\"));\r\n        }\r\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\r\n            xhr.send(JSON.stringify(params));\r\n        }\r\n        else {\r\n            xhr.send(params);\r\n        }\r\n\r\n        return xhr;\r\n    }\r\n\r\n    function createUrl(id, params, additionalQueryParams) {\r\n        var endpoint = options.endpointStore.get(id),\r\n            addToPath = requestData[id].addToPath;\r\n\r\n        /*jshint -W116,-W041 */\r\n        if (addToPath != undefined) {\r\n            endpoint += \"/\" + addToPath;\r\n        }\r\n\r\n        if (shouldParamsBeInQueryString && params) {\r\n            endpoint = qq.obj2url(params, endpoint);\r\n        }\r\n\r\n        if (additionalQueryParams) {\r\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\r\n        }\r\n\r\n        return endpoint;\r\n    }\r\n\r\n    // Invoked by the UA to indicate a number of possible states that describe\r\n    // a live `XMLHttpRequest` transport.\r\n    function getXhrReadyStateChangeHandler(id) {\r\n        return function() {\r\n            if (getXhrOrXdr(id).readyState === 4) {\r\n                onComplete(id);\r\n            }\r\n        };\r\n    }\r\n\r\n    function registerForUploadProgress(id) {\r\n        var onProgress = options.onProgress;\r\n\r\n        if (onProgress) {\r\n            getXhrOrXdr(id).upload.onprogress = function(e) {\r\n                if (e.lengthComputable) {\r\n                    onProgress(id, e.loaded, e.total);\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    // This will be called by IE to indicate **success** for an associated\r\n    // `XDomainRequest` transported request.\r\n    function getXdrLoadHandler(id) {\r\n        return function() {\r\n            onComplete(id);\r\n        };\r\n    }\r\n\r\n    // This will be called by IE to indicate **failure** for an associated\r\n    // `XDomainRequest` transported request.\r\n    function getXdrErrorHandler(id) {\r\n        return function() {\r\n            onComplete(id, true);\r\n        };\r\n    }\r\n\r\n    function setHeaders(id) {\r\n        var xhr = getXhrOrXdr(id),\r\n            customHeaders = options.customHeaders,\r\n            onDemandHeaders = requestData[id].additionalHeaders || {},\r\n            method = options.method,\r\n            allHeaders = {};\r\n\r\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\r\n        if (!isXdr(xhr)) {\r\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\r\n\r\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\r\n            if (options.allowXRequestedWithAndCacheControl) {\r\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\r\n                // OR the cross-origin request contains a non-simple method or header.\r\n                // This is done to ensure a preflight is not triggered exclusively based on the\r\n                // addition of these 2 non-simple headers.\r\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\r\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n                }\r\n            }\r\n\r\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\r\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\r\n            }\r\n\r\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\r\n            qq.extend(allHeaders, onDemandHeaders);\r\n\r\n            qq.each(allHeaders, function(name, val) {\r\n                xhr.setRequestHeader(name, val);\r\n            });\r\n        }\r\n    }\r\n\r\n    function isResponseSuccessful(responseCode) {\r\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\r\n    }\r\n\r\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\r\n        requestData[id] = {\r\n            addToPath: addToPath,\r\n            additionalParams: additionalParams,\r\n            additionalQueryParams: additionalQueryParams,\r\n            additionalHeaders: additionalHeaders,\r\n            payload: payload\r\n        };\r\n\r\n        var len = queue.push(id);\r\n\r\n        // if too many active connections, wait...\r\n        if (len <= options.maxConnections) {\r\n            return sendRequest(id, optXhr);\r\n        }\r\n    }\r\n\r\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\r\n\r\n    qq.extend(this, {\r\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\r\n        initTransport: function(id) {\r\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\r\n\r\n            return {\r\n                // Optionally specify the end of the endpoint path for the request.\r\n                withPath: function(appendToPath) {\r\n                    path = appendToPath;\r\n                    return this;\r\n                },\r\n\r\n                // Optionally specify additional parameters to send along with the request.\r\n                // These will be added to the query string for GET/DELETE requests or the payload\r\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\r\n                // how these parameters should be formatted as well.\r\n                withParams: function(additionalParams) {\r\n                    params = additionalParams;\r\n                    return this;\r\n                },\r\n\r\n                withQueryParams: function(_additionalQueryParams_) {\r\n                    additionalQueryParams = _additionalQueryParams_;\r\n                    return this;\r\n                },\r\n\r\n                // Optionally specify additional headers to send along with the request.\r\n                withHeaders: function(additionalHeaders) {\r\n                    headers = additionalHeaders;\r\n                    return this;\r\n                },\r\n\r\n                // Optionally specify a payload/body for the request.\r\n                withPayload: function(thePayload) {\r\n                    payload = thePayload;\r\n                    return this;\r\n                },\r\n\r\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\r\n                withCacheBuster: function() {\r\n                    cacheBuster = true;\r\n                    return this;\r\n                },\r\n\r\n                // Send the constructed request.\r\n                send: function(optXhr) {\r\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\r\n                        params.qqtimestamp = new Date().getTime();\r\n                    }\r\n\r\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\r\n                }\r\n            };\r\n        },\r\n\r\n        canceled: function(id) {\r\n            dequeue(id);\r\n        }\r\n    });\r\n};\r\n","/* globals qq */\r\n/**\r\n * Common upload handler functions.\r\n *\r\n * @constructor\r\n */\r\nqq.UploadHandler = function(spec) {\r\n    \"use strict\";\r\n\r\n    var proxy = spec.proxy,\r\n        fileState = {},\r\n        onCancel = proxy.onCancel,\r\n        getName = proxy.getName;\r\n\r\n    qq.extend(this, {\r\n        add: function(id, fileItem) {\r\n            fileState[id] = fileItem;\r\n            fileState[id].temp = {};\r\n        },\r\n\r\n        cancel: function(id) {\r\n            var self = this,\r\n                cancelFinalizationEffort = new qq.Promise(),\r\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\r\n\r\n            onCancelRetVal.then(function() {\r\n                if (self.isValid(id)) {\r\n                    fileState[id].canceled = true;\r\n                    self.expunge(id);\r\n                }\r\n                cancelFinalizationEffort.success();\r\n            });\r\n        },\r\n\r\n        expunge: function(id) {\r\n            delete fileState[id];\r\n        },\r\n\r\n        getThirdPartyFileId: function(id) {\r\n            return fileState[id].key;\r\n        },\r\n\r\n        isValid: function(id) {\r\n            return fileState[id] !== undefined;\r\n        },\r\n\r\n        reset: function() {\r\n            fileState = {};\r\n        },\r\n\r\n        _getFileState: function(id) {\r\n            return fileState[id];\r\n        },\r\n\r\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\r\n            fileState[id].key = thirdPartyFileId;\r\n        },\r\n\r\n        _wasCanceled: function(id) {\r\n            return !!fileState[id].canceled;\r\n        }\r\n    });\r\n};\r\n","/*globals qq*/\r\n/**\r\n * Base upload handler module.  Controls more specific handlers.\r\n *\r\n * @param o Options.  Passed along to the specific handler submodule as well.\r\n * @param namespace [optional] Namespace for the specific handler.\r\n */\r\nqq.UploadHandlerController = function(o, namespace) {\r\n    \"use strict\";\r\n\r\n    var controller = this,\r\n        chunkingPossible = false,\r\n        concurrentChunkingPossible = false,\r\n        chunking, preventRetryResponse, log, handler,\r\n\r\n    options = {\r\n        paramsStore: {},\r\n        maxConnections: 3, // maximum number of concurrent uploads\r\n        chunking: {\r\n            enabled: false,\r\n            multiple: {\r\n                enabled: false\r\n            }\r\n        },\r\n        log: function(str, level) {},\r\n        onProgress: function(id, fileName, loaded, total) {},\r\n        onComplete: function(id, fileName, response, xhr) {},\r\n        onCancel: function(id, fileName) {},\r\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\r\n        onUpload: function(id, fileName) {},\r\n        onUploadChunk: function(id, fileName, chunkData) {},\r\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\r\n        onAutoRetry: function(id, fileName, response, xhr) {},\r\n        onResume: function(id, fileName, chunkData) {},\r\n        onUuidChanged: function(id, newUuid) {},\r\n        getName: function(id) {},\r\n        setSize: function(id, newSize) {},\r\n        isQueued: function(id) {},\r\n        getIdsInProxyGroup: function(id) {},\r\n        getIdsInBatch: function(id) {}\r\n    },\r\n\r\n    chunked = {\r\n        // Called when each chunk has uploaded successfully\r\n        done: function(id, chunkIdx, response, xhr) {\r\n            var chunkData = handler._getChunkData(id, chunkIdx);\r\n\r\n            handler._getFileState(id).attemptingResume = false;\r\n\r\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\r\n            handler._getFileState(id).loaded += chunkData.size;\r\n\r\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\r\n        },\r\n\r\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\r\n        // logic associated with closing out the file, such as combining the chunks.\r\n        finalize: function(id) {\r\n            var size = options.getSize(id),\r\n                name = options.getName(id);\r\n\r\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\r\n            handler.finalizeChunks(id).then(\r\n                function(response, xhr) {\r\n                    log(\"Finalize successful for \" + id);\r\n\r\n                    var normaizedResponse = upload.normalizeResponse(response, true);\r\n\r\n                    options.onProgress(id, name, size, size);\r\n                    handler._maybeDeletePersistedChunkData(id);\r\n                    upload.cleanup(id, normaizedResponse, xhr);\r\n                },\r\n                function(response, xhr) {\r\n                    var normaizedResponse = upload.normalizeResponse(response, false);\r\n\r\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normaizedResponse.error, \"error\");\r\n\r\n                    if (normaizedResponse.reset) {\r\n                        chunked.reset(id);\r\n                    }\r\n\r\n                    if (!options.onAutoRetry(id, name, normaizedResponse, xhr)) {\r\n                        upload.cleanup(id, normaizedResponse, xhr);\r\n                    }\r\n                }\r\n            );\r\n        },\r\n\r\n        handleFailure: function(chunkIdx, id, response, xhr) {\r\n            var name = options.getName(id);\r\n\r\n            log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\r\n\r\n            handler.clearCachedChunk(id, chunkIdx);\r\n\r\n            var responseToReport = upload.normalizeResponse(response, false),\r\n                inProgressIdx;\r\n\r\n            if (responseToReport.reset) {\r\n                chunked.reset(id);\r\n            }\r\n            else {\r\n                inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);\r\n                if (inProgressIdx >= 0) {\r\n                    handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\r\n                    handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\r\n                }\r\n            }\r\n\r\n            // We may have aborted all other in-progress chunks for this file due to a failure.\r\n            // If so, ignore the failures associated with those aborts.\r\n            if (!handler._getFileState(id).temp.ignoreFailure) {\r\n                // If this chunk has failed, we want to ignore all other failures of currently in-progress\r\n                // chunks since they will be explicitly aborted\r\n                if (concurrentChunkingPossible) {\r\n                    handler._getFileState(id).temp.ignoreFailure = true;\r\n\r\n                    log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\r\n                    qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\r\n                        log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\r\n                        ckXhr.abort();\r\n                        // Flag the transport, in case we are waiting for some other async operation\r\n                        // to complete before attempting to upload the chunk\r\n                        ckXhr._cancelled = true;\r\n                    });\r\n\r\n                    // We must indicate that all aborted chunks are no longer in progress\r\n                    handler.moveInProgressToRemaining(id);\r\n\r\n                    // Free up any connections used by these chunks, but don't allow any\r\n                    // other files to take up the connections (until we have exhausted all auto-retries)\r\n                    connectionManager.free(id, true);\r\n                }\r\n\r\n                if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\r\n                    // If one chunk fails, abort all of the others to avoid odd race conditions that occur\r\n                    // if a chunk succeeds immediately after one fails before we have determined if the upload\r\n                    // is a failure or not.\r\n                    upload.cleanup(id, responseToReport, xhr);\r\n                }\r\n            }\r\n        },\r\n\r\n        hasMoreParts: function(id) {\r\n            return !!handler._getFileState(id).chunking.remaining.length;\r\n        },\r\n\r\n        nextPart: function(id) {\r\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\r\n\r\n            if (nextIdx >= handler._getTotalChunks(id)) {\r\n                nextIdx = null;\r\n            }\r\n\r\n            return nextIdx;\r\n        },\r\n\r\n        reset: function(id) {\r\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\r\n\r\n            handler._maybeDeletePersistedChunkData(id);\r\n            handler.reevaluateChunking(id);\r\n            handler._getFileState(id).loaded = 0;\r\n        },\r\n\r\n        sendNext: function(id) {\r\n            var size = options.getSize(id),\r\n                name = options.getName(id),\r\n                chunkIdx = chunked.nextPart(id),\r\n                chunkData = handler._getChunkData(id, chunkIdx),\r\n                resuming = handler._getFileState(id).attemptingResume,\r\n                inProgressChunks = handler._getFileState(id).chunking.inProgress || [];\r\n\r\n            if (handler._getFileState(id).loaded == null) {\r\n                handler._getFileState(id).loaded = 0;\r\n            }\r\n\r\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\r\n            if (resuming && options.onResume(id, name, chunkData) === false) {\r\n                chunked.reset(id);\r\n                chunkIdx = chunked.nextPart(id);\r\n                chunkData = handler._getChunkData(id, chunkIdx);\r\n                resuming = false;\r\n            }\r\n\r\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\r\n            if (chunkIdx == null && inProgressChunks.length === 0) {\r\n                chunked.finalize(id);\r\n            }\r\n\r\n            // Send the next chunk\r\n            else {\r\n                log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\r\n                options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\r\n                inProgressChunks.push(chunkIdx);\r\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\r\n\r\n                if (concurrentChunkingPossible) {\r\n                    connectionManager.open(id, chunkIdx);\r\n                }\r\n\r\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\r\n                    chunked.sendNext(id);\r\n                }\r\n\r\n                if (chunkData.blob.size === 0) {\r\n                    log(qq.format(\"Chunk {} for file {} will not be uploaded, zero sized chunk.\", chunkIdx, id), \"error\");\r\n                    chunked.handleFailure(chunkIdx, id, \"File is no longer available\", null);\r\n                }\r\n                else {\r\n                    handler.uploadChunk(id, chunkIdx, resuming).then(\r\n                        // upload chunk success\r\n                        function success(response, xhr) {\r\n                            log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\r\n\r\n                            handler.clearCachedChunk(id, chunkIdx);\r\n\r\n                            var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\r\n                                responseToReport = upload.normalizeResponse(response, true),\r\n                                inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\r\n\r\n                            log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\r\n\r\n                            chunked.done(id, chunkIdx, responseToReport, xhr);\r\n\r\n                            if (inProgressChunkIdx >= 0) {\r\n                                inProgressChunks.splice(inProgressChunkIdx, 1);\r\n                            }\r\n\r\n                            handler._maybePersistChunkedState(id);\r\n\r\n                            if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\r\n                                chunked.finalize(id);\r\n                            }\r\n                            else if (chunked.hasMoreParts(id)) {\r\n                                chunked.sendNext(id);\r\n                            }\r\n                            else {\r\n                                log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\r\n                            }\r\n                        },\r\n\r\n                        // upload chunk failure\r\n                        function failure(response, xhr) {\r\n                            chunked.handleFailure(chunkIdx, id, response, xhr);\r\n                        }\r\n                        )\r\n                        .done(function() {\r\n                            handler.clearXhr(id, chunkIdx);\r\n                        });\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    connectionManager = {\r\n        _open: [],\r\n        _openChunks: {},\r\n        _waiting: [],\r\n\r\n        available: function() {\r\n            var max = options.maxConnections,\r\n                openChunkEntriesCount = 0,\r\n                openChunksCount = 0;\r\n\r\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\r\n                openChunkEntriesCount++;\r\n                openChunksCount += openChunkIndexes.length;\r\n            });\r\n\r\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\r\n        },\r\n\r\n        /**\r\n         * Removes element from queue, starts upload of next\r\n         */\r\n        free: function(id, dontAllowNext) {\r\n            var allowNext = !dontAllowNext,\r\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\r\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\r\n                nextId;\r\n\r\n            delete connectionManager._openChunks[id];\r\n\r\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\r\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\r\n                delete handler._getFileState(id).file;\r\n            }\r\n\r\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\r\n            if (waitingIndex >= 0) {\r\n                connectionManager._waiting.splice(waitingIndex, 1);\r\n            }\r\n            // If this file was consuming a connection, allow the next file to be uploaded\r\n            else if (allowNext && connectionsIndex >= 0) {\r\n                connectionManager._open.splice(connectionsIndex, 1);\r\n\r\n                nextId = connectionManager._waiting.shift();\r\n                if (nextId >= 0) {\r\n                    connectionManager._open.push(nextId);\r\n                    upload.start(nextId);\r\n                }\r\n            }\r\n        },\r\n\r\n        getWaitingOrConnected: function() {\r\n            var waitingOrConnected = [];\r\n\r\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\r\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\r\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\r\n                if (chunks && chunks.length) {\r\n                    waitingOrConnected.push(parseInt(fileId));\r\n                }\r\n            });\r\n\r\n            // For non-chunked files, only one connection will be consumed per file.\r\n            // This is where we aggregate those file IDs.\r\n            qq.each(connectionManager._open, function(idx, fileId) {\r\n                if (!connectionManager._openChunks[fileId]) {\r\n                    waitingOrConnected.push(parseInt(fileId));\r\n                }\r\n            });\r\n\r\n            // There may be files waiting for a connection.\r\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\r\n\r\n            return waitingOrConnected;\r\n        },\r\n\r\n        isUsingConnection: function(id) {\r\n            return qq.indexOf(connectionManager._open, id) >= 0;\r\n        },\r\n\r\n        open: function(id, chunkIdx) {\r\n            if (chunkIdx == null) {\r\n                connectionManager._waiting.push(id);\r\n            }\r\n\r\n            if (connectionManager.available()) {\r\n                if (chunkIdx == null) {\r\n                    connectionManager._waiting.pop();\r\n                    connectionManager._open.push(id);\r\n                }\r\n                else {\r\n                    (function() {\r\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\r\n                        openChunksEntry.push(chunkIdx);\r\n                        connectionManager._openChunks[id] = openChunksEntry;\r\n                    }());\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        reset: function() {\r\n            connectionManager._waiting = [];\r\n            connectionManager._open = [];\r\n        }\r\n    },\r\n\r\n    simple = {\r\n        send: function(id, name) {\r\n            handler._getFileState(id).loaded = 0;\r\n\r\n            log(\"Sending simple upload request for \" + id);\r\n            handler.uploadFile(id).then(\r\n                function(response, optXhr) {\r\n                    log(\"Simple upload request succeeded for \" + id);\r\n\r\n                    var responseToReport = upload.normalizeResponse(response, true),\r\n                        size = options.getSize(id);\r\n\r\n                    options.onProgress(id, name, size, size);\r\n                    upload.maybeNewUuid(id, responseToReport);\r\n                    upload.cleanup(id, responseToReport, optXhr);\r\n                },\r\n\r\n                function(response, optXhr) {\r\n                    log(\"Simple upload request failed for \" + id);\r\n\r\n                    var responseToReport = upload.normalizeResponse(response, false);\r\n\r\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\r\n                        upload.cleanup(id, responseToReport, optXhr);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    },\r\n\r\n    upload = {\r\n        cancel: function(id) {\r\n            log(\"Cancelling \" + id);\r\n            options.paramsStore.remove(id);\r\n            connectionManager.free(id);\r\n        },\r\n\r\n        cleanup: function(id, response, optXhr) {\r\n            var name = options.getName(id);\r\n\r\n            options.onComplete(id, name, response, optXhr);\r\n\r\n            if (handler._getFileState(id)) {\r\n                handler._clearXhrs && handler._clearXhrs(id);\r\n            }\r\n\r\n            connectionManager.free(id);\r\n        },\r\n\r\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\r\n        // if none of these are available for the ID\r\n        getProxyOrBlob: function(id) {\r\n            return (handler.getProxy && handler.getProxy(id)) ||\r\n                (handler.getFile && handler.getFile(id));\r\n        },\r\n\r\n        initHandler: function() {\r\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\r\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\r\n\r\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\r\n                options,\r\n                {\r\n                    getDataByUuid: options.getDataByUuid,\r\n                    getName: options.getName,\r\n                    getSize: options.getSize,\r\n                    getUuid: options.getUuid,\r\n                    log: log,\r\n                    onCancel: options.onCancel,\r\n                    onProgress: options.onProgress,\r\n                    onUuidChanged: options.onUuidChanged\r\n                }\r\n            );\r\n\r\n            if (handler._removeExpiredChunkingRecords) {\r\n                handler._removeExpiredChunkingRecords();\r\n            }\r\n        },\r\n\r\n        isDeferredEligibleForUpload: function(id) {\r\n            return options.isQueued(id);\r\n        },\r\n\r\n        // For Blobs that are part of a group of generated images, along with a reference image,\r\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\r\n        // even if some async processing must be completed on one or more Blobs first.\r\n        maybeDefer: function(id, blob) {\r\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\r\n            // and then submit the upload to the specific handler once the blob is available.\r\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\r\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\r\n\r\n                // Blob creation may take some time, so the caller may want to update the\r\n                // UI to indicate that an operation is in progress, even before the actual\r\n                // upload begins and an onUpload callback is invoked.\r\n                options.onUploadPrep(id);\r\n\r\n                log(\"Attempting to generate a blob on-demand for \" + id);\r\n                blob.create().then(function(generatedBlob) {\r\n                    log(\"Generated an on-demand blob for \" + id);\r\n\r\n                    // Update record associated with this file by providing the generated Blob\r\n                    handler.updateBlob(id, generatedBlob);\r\n\r\n                    // Propagate the size for this generated Blob\r\n                    options.setSize(id, generatedBlob.size);\r\n\r\n                    // Order handler to recalculate chunking possibility, if applicable\r\n                    handler.reevaluateChunking(id);\r\n\r\n                    upload.maybeSendDeferredFiles(id);\r\n                },\r\n\r\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\r\n                function(errorMessage) {\r\n                    var errorResponse = {};\r\n\r\n                    if (errorMessage) {\r\n                        errorResponse.error = errorMessage;\r\n                    }\r\n\r\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\r\n\r\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\r\n                    upload.maybeSendDeferredFiles(id);\r\n                    connectionManager.free(id);\r\n                });\r\n            }\r\n            else {\r\n                return upload.maybeSendDeferredFiles(id);\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\r\n        maybeSendDeferredFiles: function(id) {\r\n            var idsInGroup = options.getIdsInProxyGroup(id),\r\n                uploadedThisId = false;\r\n\r\n            if (idsInGroup && idsInGroup.length) {\r\n                log(\"Maybe ready to upload proxy group file \" + id);\r\n\r\n                qq.each(idsInGroup, function(idx, idInGroup) {\r\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\r\n                        uploadedThisId = idInGroup === id;\r\n                        upload.now(idInGroup);\r\n                    }\r\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                uploadedThisId = true;\r\n                upload.now(id);\r\n            }\r\n\r\n            return uploadedThisId;\r\n        },\r\n\r\n        maybeNewUuid: function(id, response) {\r\n            if (response.newUuid !== undefined) {\r\n                options.onUuidChanged(id, response.newUuid);\r\n            }\r\n        },\r\n\r\n        // The response coming from handler implementations may be in various formats.\r\n        // Instead of hoping a promise nested 5 levels deep will always return an object\r\n        // as its first param, let's just normalize the response here.\r\n        normalizeResponse: function(originalResponse, successful) {\r\n            var response = originalResponse;\r\n\r\n            // The passed \"response\" param may not be a response at all.\r\n            // It could be a string, detailing the error, for example.\r\n            if (!qq.isObject(originalResponse)) {\r\n                response = {};\r\n\r\n                if (qq.isString(originalResponse) && !successful) {\r\n                    response.error = originalResponse;\r\n                }\r\n            }\r\n\r\n            response.success = successful;\r\n\r\n            return response;\r\n        },\r\n\r\n        now: function(id) {\r\n            var name = options.getName(id);\r\n\r\n            if (!controller.isValid(id)) {\r\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\r\n            }\r\n\r\n            options.onUpload(id, name);\r\n\r\n            if (chunkingPossible && handler._shouldChunkThisFile(id)) {\r\n                chunked.sendNext(id);\r\n            }\r\n            else {\r\n                simple.send(id, name);\r\n            }\r\n        },\r\n\r\n        start: function(id) {\r\n            var blobToUpload = upload.getProxyOrBlob(id);\r\n\r\n            if (blobToUpload) {\r\n                return upload.maybeDefer(id, blobToUpload);\r\n            }\r\n            else {\r\n                upload.now(id);\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * Adds file or file input to the queue\r\n         **/\r\n        add: function(id, file) {\r\n            handler.add.apply(this, arguments);\r\n        },\r\n\r\n        /**\r\n         * Sends the file identified by id\r\n         */\r\n        upload: function(id) {\r\n            if (connectionManager.open(id)) {\r\n                return upload.start(id);\r\n            }\r\n            return false;\r\n        },\r\n\r\n        retry: function(id) {\r\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\r\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\r\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\r\n            // any more failures at this point.\r\n            if (concurrentChunkingPossible) {\r\n                handler._getFileState(id).temp.ignoreFailure = false;\r\n            }\r\n\r\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\r\n            // Just go ahead and ask the handler to upload again.\r\n            if (connectionManager.isUsingConnection(id)) {\r\n                return upload.start(id);\r\n            }\r\n\r\n            // If we are attempting to retry a file that is not currently consuming a connection,\r\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\r\n            // before the retry commences.\r\n            else {\r\n                return controller.upload(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Cancels file upload by id\r\n         */\r\n        cancel: function(id) {\r\n            var cancelRetVal = handler.cancel(id);\r\n\r\n            if (qq.isGenericPromise(cancelRetVal)) {\r\n                cancelRetVal.then(function() {\r\n                    upload.cancel(id);\r\n                });\r\n            }\r\n            else if (cancelRetVal !== false) {\r\n                upload.cancel(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Cancels all queued or in-progress uploads\r\n         */\r\n        cancelAll: function() {\r\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\r\n                i;\r\n\r\n            // ensure files are cancelled in reverse order which they were added\r\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\r\n            if (waitingOrConnected.length) {\r\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\r\n                    controller.cancel(waitingOrConnected[i]);\r\n                }\r\n            }\r\n\r\n            connectionManager.reset();\r\n        },\r\n\r\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\r\n        // Undefined if no file record is available.\r\n        getFile: function(id) {\r\n            if (handler.getProxy && handler.getProxy(id)) {\r\n                return handler.getProxy(id).referenceBlob;\r\n            }\r\n\r\n            return handler.getFile && handler.getFile(id);\r\n        },\r\n\r\n        // Returns true if the Blob associated with the ID is related to a proxy s\r\n        isProxied: function(id) {\r\n            return !!(handler.getProxy && handler.getProxy(id));\r\n        },\r\n\r\n        getInput: function(id) {\r\n            if (handler.getInput) {\r\n                return handler.getInput(id);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            log(\"Resetting upload handler\");\r\n            controller.cancelAll();\r\n            connectionManager.reset();\r\n            handler.reset();\r\n        },\r\n\r\n        expunge: function(id) {\r\n            if (controller.isValid(id)) {\r\n                return handler.expunge(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Determine if the file exists.\r\n         */\r\n        isValid: function(id) {\r\n            return handler.isValid(id);\r\n        },\r\n\r\n        getResumableFilesData: function() {\r\n            if (handler.getResumableFilesData) {\r\n                return handler.getResumableFilesData();\r\n            }\r\n            return [];\r\n        },\r\n\r\n        /**\r\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\r\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\r\n         * will be undefined.\r\n         *\r\n         * @param id Internal file ID\r\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\r\n         */\r\n        getThirdPartyFileId: function(id) {\r\n            if (controller.isValid(id)) {\r\n                return handler.getThirdPartyFileId(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\r\n         * @param id ID of the upload/file to pause\r\n         * @returns {boolean} true if the upload was paused\r\n         */\r\n        pause: function(id) {\r\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\r\n                connectionManager.free(id);\r\n                handler.moveInProgressToRemaining(id);\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        // True if the file is eligible for pause/resume.\r\n        isResumable: function(id) {\r\n            return !!handler.isResumable && handler.isResumable(id);\r\n        }\r\n    });\r\n\r\n    qq.extend(options, o);\r\n    log = options.log;\r\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\r\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\r\n\r\n    preventRetryResponse = (function() {\r\n        var response = {};\r\n\r\n        response[options.preventRetryParam] = true;\r\n\r\n        return response;\r\n    }());\r\n\r\n    upload.initHandler();\r\n};\r\n","/*globals qq */\r\n/*jshint -W117 */\r\nqq.WindowReceiveMessage = function(o) {\r\n    \"use strict\";\r\n\r\n    var options = {\r\n            log: function(message, level) {}\r\n        },\r\n        callbackWrapperDetachers = {};\r\n\r\n    qq.extend(options, o);\r\n\r\n    qq.extend(this, {\r\n        receiveMessage: function(id, callback) {\r\n            var onMessageCallbackWrapper = function(event) {\r\n                    callback(event.data);\r\n                };\r\n\r\n            if (window.postMessage) {\r\n                callbackWrapperDetachers[id] = qq(window).attach(\"message\", onMessageCallbackWrapper);\r\n            }\r\n            else {\r\n                log(\"iframe message passing not supported in this browser!\", \"error\");\r\n            }\r\n        },\r\n\r\n        stopReceivingMessages: function(id) {\r\n            if (window.postMessage) {\r\n                var detacher = callbackWrapperDetachers[id];\r\n                if (detacher) {\r\n                    detacher();\r\n                }\r\n            }\r\n        }\r\n    });\r\n};\r\n","/* globals qq */\r\n/**\r\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\r\n * in some cases by specific form upload handlers.\r\n *\r\n * @constructor\r\n */\r\nqq.FormUploadHandler = function(spec) {\r\n    \"use strict\";\r\n\r\n    var options = spec.options,\r\n        handler = this,\r\n        proxy = spec.proxy,\r\n        formHandlerInstanceId = qq.getUniqueId(),\r\n        onloadCallbacks = {},\r\n        detachLoadEvents = {},\r\n        postMessageCallbackTimers = {},\r\n        isCors = options.isCors,\r\n        inputName = options.inputName,\r\n        getUuid = proxy.getUuid,\r\n        log = proxy.log,\r\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\r\n\r\n    /**\r\n     * Remove any trace of the file from the handler.\r\n     *\r\n     * @param id ID of the associated file\r\n     */\r\n    function expungeFile(id) {\r\n        delete detachLoadEvents[id];\r\n\r\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\r\n        // In that case, terminate the timer waiting for a message from the loaded iframe\r\n        // and stop listening for any more messages coming from this iframe.\r\n        if (isCors) {\r\n            clearTimeout(postMessageCallbackTimers[id]);\r\n            delete postMessageCallbackTimers[id];\r\n            corsMessageReceiver.stopReceivingMessages(id);\r\n        }\r\n\r\n        var iframe = document.getElementById(handler._getIframeName(id));\r\n        if (iframe) {\r\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\r\n            // because it doesn't trigger ie6 prompt on https\r\n            /* jshint scripturl:true */\r\n            iframe.setAttribute(\"src\", \"javascript:false;\");\r\n\r\n            qq(iframe).remove();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param iframeName `document`-unique Name of the associated iframe\r\n     * @returns {*} ID of the associated file\r\n     */\r\n    function getFileIdForIframeName(iframeName) {\r\n        return iframeName.split(\"_\")[0];\r\n    }\r\n\r\n    /**\r\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\r\n     * to the current `document`.  Note that the iframe is hidden from view.\r\n     *\r\n     * @param name Name of the iframe.\r\n     * @returns {HTMLIFrameElement} The created iframe\r\n     */\r\n    function initIframeForUpload(name) {\r\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\r\n\r\n        iframe.setAttribute(\"id\", name);\r\n\r\n        iframe.style.display = \"none\";\r\n        document.body.appendChild(iframe);\r\n\r\n        return iframe;\r\n    }\r\n\r\n    /**\r\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\r\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\r\n     *\r\n     * @param iframe Listen for messages on this iframe.\r\n     * @param callback Invoke this callback with the message from the iframe.\r\n     */\r\n    function registerPostMessageCallback(iframe, callback) {\r\n        var iframeName = iframe.id,\r\n            fileId = getFileIdForIframeName(iframeName),\r\n            uuid = getUuid(fileId);\r\n\r\n        onloadCallbacks[uuid] = callback;\r\n\r\n        // When the iframe has loaded (after the server responds to an upload request)\r\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\r\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\r\n            if (handler.getInput(fileId)) {\r\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\r\n\r\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\r\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\r\n                    log(errorMessage, \"error\");\r\n                    callback({\r\n                        error: errorMessage\r\n                    });\r\n                }, 1000);\r\n            }\r\n        });\r\n\r\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\r\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\r\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\r\n            log(\"Received the following window message: '\" + message + \"'\");\r\n            var fileId = getFileIdForIframeName(iframeName),\r\n                response = handler._parseJsonResponse(message),\r\n                uuid = response.uuid,\r\n                onloadCallback;\r\n\r\n            if (uuid && onloadCallbacks[uuid]) {\r\n                log(\"Handling response for iframe name \" + iframeName);\r\n                clearTimeout(postMessageCallbackTimers[iframeName]);\r\n                delete postMessageCallbackTimers[iframeName];\r\n\r\n                handler._detachLoadEvent(iframeName);\r\n\r\n                onloadCallback = onloadCallbacks[uuid];\r\n\r\n                delete onloadCallbacks[uuid];\r\n                corsMessageReceiver.stopReceivingMessages(iframeName);\r\n                onloadCallback(response);\r\n            }\r\n            else if (!uuid) {\r\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\r\n            }\r\n        });\r\n    }\r\n\r\n    qq.extend(this, new qq.UploadHandler(spec));\r\n\r\n    qq.override(this, function(super_) {\r\n        return {\r\n            /**\r\n             * Adds File or Blob to the queue\r\n             **/\r\n            add: function(id, fileInput) {\r\n                super_.add(id, {input: fileInput});\r\n\r\n                fileInput.setAttribute(\"name\", inputName);\r\n\r\n                // remove file input from DOM\r\n                if (fileInput.parentNode) {\r\n                    qq(fileInput).remove();\r\n                }\r\n            },\r\n\r\n            expunge: function(id) {\r\n                expungeFile(id);\r\n                super_.expunge(id);\r\n            },\r\n\r\n            isValid: function(id) {\r\n                return super_.isValid(id) &&\r\n                    handler._getFileState(id).input !== undefined;\r\n            }\r\n        };\r\n    });\r\n\r\n    qq.extend(this, {\r\n        getInput: function(id) {\r\n            return handler._getFileState(id).input;\r\n        },\r\n\r\n        /**\r\n         * This function either delegates to a more specific message handler if CORS is involved,\r\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\r\n         * after determining if the content of the iframe is accessible.\r\n         *\r\n         * @param iframe Associated iframe\r\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\r\n         */\r\n        _attachLoadEvent: function(iframe, callback) {\r\n            /*jslint eqeq: true*/\r\n            var responseDescriptor;\r\n\r\n            if (isCors) {\r\n                registerPostMessageCallback(iframe, callback);\r\n            }\r\n            else {\r\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\r\n                    log(\"Received response for \" + iframe.id);\r\n\r\n                    // when we remove iframe from dom\r\n                    // the request stops, but in IE load\r\n                    // event fires\r\n                    if (!iframe.parentNode) {\r\n                        return;\r\n                    }\r\n\r\n                    try {\r\n                        // fixing Opera 10.53\r\n                        if (iframe.contentDocument &&\r\n                            iframe.contentDocument.body &&\r\n                            iframe.contentDocument.body.innerHTML == \"false\") {\r\n                            // In Opera event is fired second time\r\n                            // when body.innerHTML changed from false\r\n                            // to server response approx. after 1 sec\r\n                            // when we upload file with iframe\r\n                            return;\r\n                        }\r\n                    }\r\n                    catch (error) {\r\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\r\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\r\n                        responseDescriptor = {success: false};\r\n                    }\r\n\r\n                    callback(responseDescriptor);\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates an iframe with a specific document-unique name.\r\n         *\r\n         * @param id ID of the associated file\r\n         * @returns {HTMLIFrameElement}\r\n         */\r\n        _createIframe: function(id) {\r\n            var iframeName = handler._getIframeName(id);\r\n\r\n            return initIframeForUpload(iframeName);\r\n        },\r\n\r\n        /**\r\n         * Called when we are no longer interested in being notified when an iframe has loaded.\r\n         *\r\n         * @param id Associated file ID\r\n         */\r\n        _detachLoadEvent: function(id) {\r\n            if (detachLoadEvents[id] !== undefined) {\r\n                detachLoadEvents[id]();\r\n                delete detachLoadEvents[id];\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param fileId ID of the associated file\r\n         * @returns {string} The `document`-unique name of the iframe\r\n         */\r\n        _getIframeName: function(fileId) {\r\n            return fileId + \"_\" + formHandlerInstanceId;\r\n        },\r\n\r\n        /**\r\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\r\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\r\n         * that the form is hidden from view.\r\n         *\r\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\r\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\r\n         * @returns {HTMLFormElement} The created form\r\n         */\r\n        _initFormForUpload: function(spec) {\r\n            var method = spec.method,\r\n                endpoint = spec.endpoint,\r\n                params = spec.params,\r\n                paramsInBody = spec.paramsInBody,\r\n                targetName = spec.targetName,\r\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\r\n                url = endpoint;\r\n\r\n            if (paramsInBody) {\r\n                qq.obj2Inputs(params, form);\r\n            }\r\n            else {\r\n                url = qq.obj2url(params, endpoint);\r\n            }\r\n\r\n            form.setAttribute(\"action\", url);\r\n            form.setAttribute(\"target\", targetName);\r\n            form.style.display = \"none\";\r\n            document.body.appendChild(form);\r\n\r\n            return form;\r\n        },\r\n\r\n        /**\r\n         * @param innerHtmlOrMessage JSON message\r\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\r\n         */\r\n        _parseJsonResponse: function(innerHtmlOrMessage) {\r\n            var response = {};\r\n\r\n            try {\r\n                response = qq.parseJson(innerHtmlOrMessage);\r\n            }\r\n            catch (error) {\r\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\r\n            }\r\n\r\n            return response;\r\n        }\r\n    });\r\n};\r\n","/* globals qq */\r\n/**\r\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\r\n * XHR upload handlers.\r\n *\r\n * @constructor\r\n */\r\nqq.XhrUploadHandler = function(spec) {\r\n    \"use strict\";\r\n\r\n    var handler = this,\r\n        namespace = spec.options.namespace,\r\n        proxy = spec.proxy,\r\n        chunking = spec.options.chunking,\r\n        resume = spec.options.resume,\r\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\r\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\r\n        getName = proxy.getName,\r\n        getSize = proxy.getSize,\r\n        getUuid = proxy.getUuid,\r\n        getEndpoint = proxy.getEndpoint,\r\n        getDataByUuid = proxy.getDataByUuid,\r\n        onUuidChanged = proxy.onUuidChanged,\r\n        onProgress = proxy.onProgress,\r\n        log = proxy.log;\r\n\r\n    function abort(id) {\r\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\r\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\r\n\r\n            xhr.onreadystatechange = null;\r\n            xhr.upload.onprogress = null;\r\n            xhr.abort();\r\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\r\n        });\r\n    }\r\n\r\n    qq.extend(this, new qq.UploadHandler(spec));\r\n\r\n    qq.override(this, function(super_) {\r\n        return {\r\n            /**\r\n             * Adds File or Blob to the queue\r\n             **/\r\n            add: function(id, blobOrProxy) {\r\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\r\n                    super_.add(id, {file: blobOrProxy});\r\n                }\r\n                else if (blobOrProxy instanceof qq.BlobProxy) {\r\n                    super_.add(id, {proxy: blobOrProxy});\r\n                }\r\n                else {\r\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\r\n                }\r\n\r\n                handler._initTempState(id);\r\n                resumeEnabled && handler._maybePrepareForResume(id);\r\n            },\r\n\r\n            expunge: function(id) {\r\n                abort(id);\r\n                handler._maybeDeletePersistedChunkData(id);\r\n                handler._clearXhrs(id);\r\n                super_.expunge(id);\r\n            }\r\n        };\r\n    });\r\n\r\n    qq.extend(this, {\r\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\r\n        clearCachedChunk: function(id, chunkIdx) {\r\n            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];\r\n        },\r\n\r\n        clearXhr: function(id, chunkIdx) {\r\n            var tempState = handler._getFileState(id).temp;\r\n\r\n            if (tempState.xhrs) {\r\n                delete tempState.xhrs[chunkIdx];\r\n            }\r\n            if (tempState.ajaxRequesters) {\r\n                delete tempState.ajaxRequesters[chunkIdx];\r\n            }\r\n        },\r\n\r\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\r\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\r\n        finalizeChunks: function(id, responseParser) {\r\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\r\n                xhr = handler._getXhr(id, lastChunkIdx);\r\n\r\n            if (responseParser) {\r\n                return new qq.Promise().success(responseParser(xhr), xhr);\r\n            }\r\n\r\n            return new qq.Promise().success({}, xhr);\r\n        },\r\n\r\n        getFile: function(id) {\r\n            return handler.isValid(id) && handler._getFileState(id).file;\r\n        },\r\n\r\n        getProxy: function(id) {\r\n            return handler.isValid(id) && handler._getFileState(id).proxy;\r\n        },\r\n\r\n        /**\r\n         * @returns {Array} Array of objects containing properties useful to integrators\r\n         * when it is important to determine which files are potentially resumable.\r\n         */\r\n        getResumableFilesData: function() {\r\n            var resumableFilesData = [];\r\n\r\n            handler._iterateResumeRecords(function(key, uploadData) {\r\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\r\n\r\n                var data = {\r\n                    name: uploadData.name,\r\n                    remaining: uploadData.chunking.remaining,\r\n                    size: uploadData.size,\r\n                    uuid: uploadData.uuid\r\n                };\r\n\r\n                if (uploadData.key) {\r\n                    data.key = uploadData.key;\r\n                }\r\n\r\n                resumableFilesData.push(data);\r\n            });\r\n\r\n            return resumableFilesData;\r\n        },\r\n\r\n        isResumable: function(id) {\r\n            return !!chunking && handler.isValid(id) && !handler._getFileState(id).notResumable;\r\n        },\r\n\r\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\r\n            var inProgress = optInProgress || handler._getFileState(id).chunking.inProgress,\r\n                remaining = optRemaining || handler._getFileState(id).chunking.remaining;\r\n\r\n            if (inProgress) {\r\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\r\n                inProgress.reverse();\r\n                qq.each(inProgress, function(idx, chunkIdx) {\r\n                    remaining.unshift(chunkIdx);\r\n                });\r\n                inProgress.length = 0;\r\n            }\r\n        },\r\n\r\n        pause: function(id) {\r\n            if (handler.isValid(id)) {\r\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\r\n                handler._getFileState(id).paused = true;\r\n                abort(id);\r\n                return true;\r\n            }\r\n        },\r\n\r\n        reevaluateChunking: function(id) {\r\n            if (chunking && handler.isValid(id)) {\r\n                var state = handler._getFileState(id),\r\n                    totalChunks,\r\n                    i;\r\n\r\n                delete state.chunking;\r\n\r\n                state.chunking = {};\r\n                totalChunks = handler._getTotalChunks(id);\r\n                if (totalChunks > 1 || chunking.mandatory) {\r\n                    state.chunking.enabled = true;\r\n                    state.chunking.parts = totalChunks;\r\n                    state.chunking.remaining = [];\r\n\r\n                    for (i = 0; i < totalChunks; i++) {\r\n                        state.chunking.remaining.push(i);\r\n                    }\r\n\r\n                    handler._initTempState(id);\r\n                }\r\n                else {\r\n                    state.chunking.enabled = false;\r\n                }\r\n            }\r\n        },\r\n\r\n        updateBlob: function(id, newBlob) {\r\n            if (handler.isValid(id)) {\r\n                handler._getFileState(id).file = newBlob;\r\n            }\r\n        },\r\n\r\n        _clearXhrs: function(id) {\r\n            var tempState = handler._getFileState(id).temp;\r\n\r\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\r\n                delete tempState.ajaxRequesters[chunkId];\r\n            });\r\n\r\n            qq.each(tempState.xhrs, function(chunkId) {\r\n                delete tempState.xhrs[chunkId];\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Creates an XHR instance for this file and stores it in the fileState.\r\n         *\r\n         * @param id File ID\r\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\r\n         * @returns {XMLHttpRequest}\r\n         */\r\n        _createXhr: function(id, optChunkIdx) {\r\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\r\n        },\r\n\r\n        _getAjaxRequester: function(id, optChunkIdx) {\r\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\r\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\r\n        },\r\n\r\n        _getChunkData: function(id, chunkIndex) {\r\n            var chunkSize = chunking.partSize,\r\n                fileSize = getSize(id),\r\n                fileOrBlob = handler.getFile(id),\r\n                startBytes = chunkSize * chunkIndex,\r\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\r\n                totalChunks = handler._getTotalChunks(id),\r\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\r\n\r\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\r\n            // See https://github.com/Widen/fine-uploader/issues/937#issuecomment-41418760\r\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\r\n\r\n            cachedChunks[chunkIndex] = blob;\r\n\r\n            return {\r\n                part: chunkIndex,\r\n                start: startBytes,\r\n                end: endBytes,\r\n                count: totalChunks,\r\n                blob: blob,\r\n                size: endBytes - startBytes\r\n            };\r\n        },\r\n\r\n        _getChunkDataForCallback: function(chunkData) {\r\n            return {\r\n                partIndex: chunkData.part,\r\n                startByte: chunkData.start + 1,\r\n                endByte: chunkData.end,\r\n                totalParts: chunkData.count\r\n            };\r\n        },\r\n\r\n        /**\r\n         * @param id File ID\r\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\r\n         */\r\n        _getLocalStorageId: function(id) {\r\n            var formatVersion = \"5.0\",\r\n                name = getName(id),\r\n                size = getSize(id),\r\n                chunkSize = chunking.partSize,\r\n                endpoint = getEndpoint(id);\r\n\r\n            return qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\r\n        },\r\n\r\n        _getMimeType: function(id) {\r\n            return handler.getFile(id).type;\r\n        },\r\n\r\n        _getPersistableData: function(id) {\r\n            return handler._getFileState(id).chunking;\r\n        },\r\n\r\n        /**\r\n         * @param id ID of the associated file\r\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\r\n         */\r\n        _getTotalChunks: function(id) {\r\n            if (chunking) {\r\n                var fileSize = getSize(id),\r\n                    chunkSize = chunking.partSize;\r\n\r\n                return Math.ceil(fileSize / chunkSize);\r\n            }\r\n        },\r\n\r\n        _getXhr: function(id, optChunkIdx) {\r\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\r\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\r\n        },\r\n\r\n        _getXhrs: function(id) {\r\n            return handler._getFileState(id).temp.xhrs;\r\n        },\r\n\r\n        // Iterates through all XHR handler-created resume records (in local storage),\r\n        // invoking the passed callback and passing in the key and value of each local storage record.\r\n        _iterateResumeRecords: function(callback) {\r\n            if (resumeEnabled) {\r\n                qq.each(localStorage, function(key, item) {\r\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\r\n                        var uploadData = JSON.parse(item);\r\n                        callback(key, uploadData);\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        _initTempState: function(id) {\r\n            handler._getFileState(id).temp = {\r\n                ajaxRequesters: {},\r\n                chunkProgress: {},\r\n                xhrs: {},\r\n                cachedChunks: {}\r\n            };\r\n        },\r\n\r\n        _markNotResumable: function(id) {\r\n            handler._getFileState(id).notResumable = true;\r\n        },\r\n\r\n        // Removes a chunked upload record from local storage, if possible.\r\n        // Returns true if the item was removed, false otherwise.\r\n        _maybeDeletePersistedChunkData: function(id) {\r\n            var localStorageId;\r\n\r\n            if (resumeEnabled && handler.isResumable(id)) {\r\n                localStorageId = handler._getLocalStorageId(id);\r\n\r\n                if (localStorageId && localStorage.getItem(localStorageId)) {\r\n                    localStorage.removeItem(localStorageId);\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\r\n        // so we can pick up from where we left off.\r\n        _maybePrepareForResume: function(id) {\r\n            var state = handler._getFileState(id),\r\n                localStorageId, persistedData;\r\n\r\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\r\n            // so prepare for a resume attempt.\r\n            if (resumeEnabled && state.key === undefined) {\r\n                localStorageId = handler._getLocalStorageId(id);\r\n                persistedData = localStorage.getItem(localStorageId);\r\n\r\n                // If we found this item in local storage, maybe we should resume it.\r\n                if (persistedData) {\r\n                    persistedData = JSON.parse(persistedData);\r\n\r\n                    // If we found a resume record but we have already handled this file in this session,\r\n                    // don't try to resume it & ensure we don't persist future check data\r\n                    if (getDataByUuid(persistedData.uuid)) {\r\n                        handler._markNotResumable(id);\r\n                    }\r\n                    else {\r\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\r\n\r\n                        onUuidChanged(id, persistedData.uuid);\r\n\r\n                        state.key = persistedData.key;\r\n                        state.chunking = persistedData.chunking;\r\n                        state.loaded = persistedData.loaded;\r\n                        state.attemptingResume = true;\r\n\r\n                        handler.moveInProgressToRemaining(id);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        // Persist any data needed to resume this upload in a new session.\r\n        _maybePersistChunkedState: function(id) {\r\n            var state = handler._getFileState(id),\r\n                localStorageId, persistedData;\r\n\r\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\r\n            if (resumeEnabled && handler.isResumable(id)) {\r\n                localStorageId = handler._getLocalStorageId(id);\r\n\r\n                persistedData = {\r\n                    name: getName(id),\r\n                    size: getSize(id),\r\n                    uuid: getUuid(id),\r\n                    key: state.key,\r\n                    chunking: state.chunking,\r\n                    loaded: state.loaded,\r\n                    lastUpdated: Date.now()\r\n                };\r\n\r\n                try {\r\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\r\n                }\r\n                catch (error) {\r\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\r\n                }\r\n            }\r\n        },\r\n\r\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\r\n            var xhr = handler._getXhr(id, chunkIdx),\r\n                name = getName(id),\r\n                progressCalculator = {\r\n                    simple: function(loaded, total) {\r\n                        var fileSize = getSize(id);\r\n\r\n                        if (loaded === total) {\r\n                            onProgress(id, name, fileSize, fileSize);\r\n                        }\r\n                        else {\r\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\r\n                        }\r\n                    },\r\n\r\n                    chunked: function(loaded, total) {\r\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\r\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\r\n                            loadedForRequest = loaded,\r\n                            totalForRequest = total,\r\n                            totalFileSize = getSize(id),\r\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\r\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\r\n\r\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\r\n\r\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\r\n                            totalLoadedForFile += chunkLoaded;\r\n                        });\r\n\r\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\r\n                    }\r\n                };\r\n\r\n            xhr.upload.onprogress = function(e) {\r\n                if (e.lengthComputable) {\r\n                    /* jshint eqnull: true */\r\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\r\n                    progressCalculator[type](e.loaded, e.total);\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Registers an XHR transport instance created elsewhere.\r\n         *\r\n         * @param id ID of the associated file\r\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\r\n         * @param xhr XMLHttpRequest object instance\r\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\r\n         * @returns {XMLHttpRequest}\r\n         */\r\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\r\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\r\n                tempState = handler._getFileState(id).temp;\r\n\r\n            tempState.xhrs = tempState.xhrs || {};\r\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\r\n\r\n            tempState.xhrs[xhrsId] = xhr;\r\n\r\n            if (optAjaxRequester) {\r\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\r\n            }\r\n\r\n            return xhr;\r\n        },\r\n\r\n        // Deletes any local storage records that are \"expired\".\r\n        _removeExpiredChunkingRecords: function() {\r\n            var expirationDays = resume.recordsExpireIn;\r\n\r\n            handler._iterateResumeRecords(function(key, uploadData) {\r\n                var expirationDate = new Date(uploadData.lastUpdated);\r\n\r\n                // transform updated date into expiration date\r\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\r\n\r\n                if (expirationDate.getTime() <= Date.now()) {\r\n                    log(\"Removing expired resume record with key \" + key);\r\n                    localStorage.removeItem(key);\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Determine if the associated file should be chunked.\r\n         *\r\n         * @param id ID of the associated file\r\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\r\n         */\r\n        _shouldChunkThisFile: function(id) {\r\n            var state = handler._getFileState(id);\r\n\r\n            if (!state.chunking) {\r\n                handler.reevaluateChunking(id);\r\n            }\r\n\r\n            return state.chunking.enabled;\r\n        }\r\n    });\r\n};\r\n","/*globals qq, XMLHttpRequest*/\r\nqq.DeleteFileAjaxRequester = function(o) {\r\n    \"use strict\";\r\n\r\n    var requester,\r\n        options = {\r\n            method: \"DELETE\",\r\n            uuidParamName: \"qquuid\",\r\n            endpointStore: {},\r\n            maxConnections: 3,\r\n            customHeaders: function(id) {return {};},\r\n            paramsStore: {},\r\n            cors: {\r\n                expected: false,\r\n                sendCredentials: false\r\n            },\r\n            log: function(str, level) {},\r\n            onDelete: function(id) {},\r\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\r\n        };\r\n\r\n    qq.extend(options, o);\r\n\r\n    function getMandatedParams() {\r\n        if (options.method.toUpperCase() === \"POST\") {\r\n            return {\r\n                _method: \"DELETE\"\r\n            };\r\n        }\r\n\r\n        return {};\r\n    }\r\n\r\n    requester = qq.extend(this, new qq.AjaxRequester({\r\n        acceptHeader: \"application/json\",\r\n        validMethods: [\"POST\", \"DELETE\"],\r\n        method: options.method,\r\n        endpointStore: options.endpointStore,\r\n        paramsStore: options.paramsStore,\r\n        mandatedParams: getMandatedParams(),\r\n        maxConnections: options.maxConnections,\r\n        customHeaders: function(id) {\r\n            return options.customHeaders.get(id);\r\n        },\r\n        log: options.log,\r\n        onSend: options.onDelete,\r\n        onComplete: options.onDeleteComplete,\r\n        cors: options.cors\r\n    }));\r\n\r\n    qq.extend(this, {\r\n        sendDelete: function(id, uuid, additionalMandatedParams) {\r\n            var additionalOptions = additionalMandatedParams || {};\r\n\r\n            options.log(\"Submitting delete file request for \" + id);\r\n\r\n            if (options.method === \"DELETE\") {\r\n                requester.initTransport(id)\r\n                    .withPath(uuid)\r\n                    .withParams(additionalOptions)\r\n                    .send();\r\n            }\r\n            else {\r\n                additionalOptions[options.uuidParamName] = uuid;\r\n                requester.initTransport(id)\r\n                    .withParams(additionalOptions)\r\n                    .send();\r\n            }\r\n        }\r\n    });\r\n};\r\n","/*global qq, define */\r\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\r\n/**\r\n * Mega pixel image rendering library for iOS6+\r\n *\r\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\r\n * which causes unexpected subsampling when drawing it in canvas.\r\n * By using this library, you can safely render the image with proper stretching.\r\n *\r\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\r\n * Released under the MIT license\r\n *\r\n * Heavily modified by Widen for Fine Uploader\r\n */\r\n(function() {\r\n\r\n    /**\r\n     * Detect subsampling in loaded image.\r\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\r\n     */\r\n    function detectSubsampling(img) {\r\n        var iw = img.naturalWidth,\r\n            ih = img.naturalHeight,\r\n            canvas = document.createElement(\"canvas\"),\r\n            ctx;\r\n\r\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\r\n            canvas.width = canvas.height = 1;\r\n            ctx = canvas.getContext(\"2d\");\r\n            ctx.drawImage(img, -iw + 1, 0);\r\n            // subsampled image becomes half smaller in rendering size.\r\n            // check alpha channel value to confirm image is covering edge pixel or not.\r\n            // if alpha value is 0 image is not covering, hence subsampled.\r\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detecting vertical squash in loaded image.\r\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\r\n     */\r\n    function detectVerticalSquash(img, iw, ih) {\r\n        var canvas = document.createElement(\"canvas\"),\r\n            sy = 0,\r\n            ey = ih,\r\n            py = ih,\r\n            ctx, data, alpha, ratio;\r\n\r\n        canvas.width = 1;\r\n        canvas.height = ih;\r\n        ctx = canvas.getContext(\"2d\");\r\n        ctx.drawImage(img, 0, 0);\r\n        data = ctx.getImageData(0, 0, 1, ih).data;\r\n\r\n        // search image edge pixel position in case it is squashed vertically.\r\n        while (py > sy) {\r\n            alpha = data[(py - 1) * 4 + 3];\r\n            if (alpha === 0) {\r\n                ey = py;\r\n            } else {\r\n                sy = py;\r\n            }\r\n            py = (ey + sy) >> 1;\r\n        }\r\n\r\n        ratio = (py / ih);\r\n        return (ratio === 0) ? 1 : ratio;\r\n    }\r\n\r\n    /**\r\n     * Rendering image element (with resizing) and get its data URL\r\n     */\r\n    function renderImageToDataURL(img, blob, options, doSquash) {\r\n        var canvas = document.createElement(\"canvas\"),\r\n            mime = options.mime || \"image/jpeg\",\r\n            promise = new qq.Promise();\r\n\r\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\r\n            .then(function() {\r\n                promise.success(\r\n                    canvas.toDataURL(mime, options.quality || 0.8)\r\n                );\r\n            });\r\n\r\n        return promise;\r\n    }\r\n\r\n    function maybeCalculateDownsampledDimensions(spec) {\r\n        var maxPixels = 5241000; //iOS specific value\r\n\r\n        if (!qq.ios()) {\r\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\r\n        }\r\n\r\n        if (spec.origHeight * spec.origWidth > maxPixels) {\r\n            return {\r\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\r\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rendering image element (with resizing) into the canvas element\r\n     */\r\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\r\n        var iw = img.naturalWidth,\r\n            ih = img.naturalHeight,\r\n            width = options.width,\r\n            height = options.height,\r\n            ctx = canvas.getContext(\"2d\"),\r\n            promise = new qq.Promise(),\r\n            modifiedDimensions;\r\n\r\n        ctx.save();\r\n\r\n        if (options.resize) {\r\n            return renderImageToCanvasWithCustomResizer({\r\n                blob: blob,\r\n                canvas: canvas,\r\n                image: img,\r\n                imageHeight: ih,\r\n                imageWidth: iw,\r\n                orientation: options.orientation,\r\n                resize: options.resize,\r\n                targetHeight: height,\r\n                targetWidth: width\r\n            });\r\n        }\r\n\r\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\r\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\r\n                origWidth: width,\r\n                origHeight: height\r\n            });\r\n\r\n            if (modifiedDimensions) {\r\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\r\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\r\n                    \"warn\");\r\n\r\n                width = modifiedDimensions.newWidth;\r\n                height = modifiedDimensions.newHeight;\r\n            }\r\n        }\r\n\r\n        transformCoordinate(canvas, width, height, options.orientation);\r\n\r\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\r\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\r\n        if (qq.ios()) {\r\n            (function() {\r\n                if (detectSubsampling(img)) {\r\n                    iw /= 2;\r\n                    ih /= 2;\r\n                }\r\n\r\n                var d = 1024, // size of tiling canvas\r\n                    tmpCanvas = document.createElement(\"canvas\"),\r\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\r\n                    dw = Math.ceil(d * width / iw),\r\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\r\n                    sy = 0,\r\n                    dy = 0,\r\n                    tmpCtx, sx, dx;\r\n\r\n                tmpCanvas.width = tmpCanvas.height = d;\r\n                tmpCtx = tmpCanvas.getContext(\"2d\");\r\n\r\n                while (sy < ih) {\r\n                    sx = 0;\r\n                    dx = 0;\r\n                    while (sx < iw) {\r\n                        tmpCtx.clearRect(0, 0, d, d);\r\n                        tmpCtx.drawImage(img, -sx, -sy);\r\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\r\n                        sx += d;\r\n                        dx += dw;\r\n                    }\r\n                    sy += d;\r\n                    dy += dh;\r\n                }\r\n                ctx.restore();\r\n                tmpCanvas = tmpCtx = null;\r\n            }());\r\n        }\r\n        else {\r\n            ctx.drawImage(img, 0, 0, width, height);\r\n        }\r\n\r\n        canvas.qqImageRendered && canvas.qqImageRendered();\r\n        promise.success();\r\n\r\n        return promise;\r\n    }\r\n\r\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\r\n        var blob = resizeInfo.blob,\r\n            image = resizeInfo.image,\r\n            imageHeight = resizeInfo.imageHeight,\r\n            imageWidth = resizeInfo.imageWidth,\r\n            orientation = resizeInfo.orientation,\r\n            promise = new qq.Promise(),\r\n            resize = resizeInfo.resize,\r\n            sourceCanvas = document.createElement(\"canvas\"),\r\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\r\n            targetCanvas = resizeInfo.canvas,\r\n            targetHeight = resizeInfo.targetHeight,\r\n            targetWidth = resizeInfo.targetWidth;\r\n\r\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\r\n\r\n        targetCanvas.height = targetHeight;\r\n        targetCanvas.width = targetWidth;\r\n\r\n        sourceCanvasContext.drawImage(image, 0, 0);\r\n\r\n        resize({\r\n            blob: blob,\r\n            height: targetHeight,\r\n            image: image,\r\n            sourceCanvas: sourceCanvas,\r\n            targetCanvas: targetCanvas,\r\n            width: targetWidth\r\n        })\r\n            .then(\r\n                function success() {\r\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\r\n                    promise.success();\r\n                },\r\n                promise.failure\r\n            );\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Transform canvas coordination according to specified frame size and orientation\r\n     * Orientation value is from EXIF tag\r\n     */\r\n    function transformCoordinate(canvas, width, height, orientation) {\r\n        switch (orientation) {\r\n            case 5:\r\n            case 6:\r\n            case 7:\r\n            case 8:\r\n                canvas.width = height;\r\n                canvas.height = width;\r\n                break;\r\n            default:\r\n                canvas.width = width;\r\n                canvas.height = height;\r\n        }\r\n        var ctx = canvas.getContext(\"2d\");\r\n        switch (orientation) {\r\n            case 2:\r\n                // horizontal flip\r\n                ctx.translate(width, 0);\r\n                ctx.scale(-1, 1);\r\n                break;\r\n            case 3:\r\n                // 180 rotate left\r\n                ctx.translate(width, height);\r\n                ctx.rotate(Math.PI);\r\n                break;\r\n            case 4:\r\n                // vertical flip\r\n                ctx.translate(0, height);\r\n                ctx.scale(1, -1);\r\n                break;\r\n            case 5:\r\n                // vertical flip + 90 rotate right\r\n                ctx.rotate(0.5 * Math.PI);\r\n                ctx.scale(1, -1);\r\n                break;\r\n            case 6:\r\n                // 90 rotate right\r\n                ctx.rotate(0.5 * Math.PI);\r\n                ctx.translate(0, -height);\r\n                break;\r\n            case 7:\r\n                // horizontal flip + 90 rotate right\r\n                ctx.rotate(0.5 * Math.PI);\r\n                ctx.translate(width, -height);\r\n                ctx.scale(-1, 1);\r\n                break;\r\n            case 8:\r\n                // 90 rotate left\r\n                ctx.rotate(-0.5 * Math.PI);\r\n                ctx.translate(-width, 0);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * MegaPixImage class\r\n     */\r\n    function MegaPixImage(srcImage, errorCallback) {\r\n        var self = this;\r\n\r\n        if (window.Blob && srcImage instanceof Blob) {\r\n            (function() {\r\n                var img = new Image(),\r\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\r\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\r\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\r\n                img.src = URL.createObjectURL(srcImage);\r\n                self.blob = srcImage;\r\n                srcImage = img;\r\n            }());\r\n        }\r\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\r\n            srcImage.onload = function() {\r\n                var listeners = self.imageLoadListeners;\r\n                if (listeners) {\r\n                    self.imageLoadListeners = null;\r\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\r\n                    // so let's push this to the end of the UI thread queue.\r\n                    setTimeout(function() {\r\n                        for (var i = 0, len = listeners.length; i < len; i++) {\r\n                            listeners[i]();\r\n                        }\r\n                    }, 0);\r\n                }\r\n            };\r\n            srcImage.onerror = errorCallback;\r\n            this.imageLoadListeners = [];\r\n        }\r\n        this.srcImage = srcImage;\r\n    }\r\n\r\n    /**\r\n     * Rendering megapix image into specified target element\r\n     */\r\n    MegaPixImage.prototype.render = function(target, options) {\r\n        options = options || {};\r\n\r\n        var self = this,\r\n            imgWidth = this.srcImage.naturalWidth,\r\n            imgHeight = this.srcImage.naturalHeight,\r\n            width = options.width,\r\n            height = options.height,\r\n            maxWidth = options.maxWidth,\r\n            maxHeight = options.maxHeight,\r\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\r\n            tagName = target.tagName.toLowerCase(),\r\n            opt;\r\n\r\n        if (this.imageLoadListeners) {\r\n            this.imageLoadListeners.push(function() { self.render(target, options); });\r\n            return;\r\n        }\r\n\r\n        if (width && !height) {\r\n            height = (imgHeight * width / imgWidth) << 0;\r\n        } else if (height && !width) {\r\n            width = (imgWidth * height / imgHeight) << 0;\r\n        } else {\r\n            width = imgWidth;\r\n            height = imgHeight;\r\n        }\r\n        if (maxWidth && width > maxWidth) {\r\n            width = maxWidth;\r\n            height = (imgHeight * width / imgWidth) << 0;\r\n        }\r\n        if (maxHeight && height > maxHeight) {\r\n            height = maxHeight;\r\n            width = (imgWidth * height / imgHeight) << 0;\r\n        }\r\n\r\n        opt = { width: width, height: height },\r\n        qq.each(options, function(optionsKey, optionsValue) {\r\n            opt[optionsKey] = optionsValue;\r\n        });\r\n\r\n        if (tagName === \"img\") {\r\n            (function() {\r\n                var oldTargetSrc = target.src;\r\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\r\n                    .then(function(dataUri) {\r\n                        target.src = dataUri;\r\n                        oldTargetSrc === target.src && target.onload();\r\n                    });\r\n            }());\r\n        } else if (tagName === \"canvas\") {\r\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\r\n        }\r\n        if (typeof this.onrender === \"function\") {\r\n            this.onrender(target);\r\n        }\r\n    };\r\n\r\n    qq.MegaPixImage = MegaPixImage;\r\n})();\r\n","/*globals qq */\r\n/**\r\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\r\n *\r\n * @constructor\r\n */\r\nqq.ImageGenerator = function(log) {\r\n    \"use strict\";\r\n\r\n    function isImg(el) {\r\n        return el.tagName.toLowerCase() === \"img\";\r\n    }\r\n\r\n    function isCanvas(el) {\r\n        return el.tagName.toLowerCase() === \"canvas\";\r\n    }\r\n\r\n    function isImgCorsSupported() {\r\n        return new Image().crossOrigin !== undefined;\r\n    }\r\n\r\n    function isCanvasSupported() {\r\n        var canvas = document.createElement(\"canvas\");\r\n\r\n        return canvas.getContext && canvas.getContext(\"2d\");\r\n    }\r\n\r\n    // This is only meant to determine the MIME type of a renderable image file.\r\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\r\n    // are rendered correctly, among other things.\r\n    function determineMimeOfFileName(nameWithPath) {\r\n        /*jshint -W015 */\r\n        var pathSegments = nameWithPath.split(\"/\"),\r\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\r\n            extension = qq.getExtension(name);\r\n\r\n        extension = extension && extension.toLowerCase();\r\n\r\n        switch (extension) {\r\n            case \"jpeg\":\r\n            case \"jpg\":\r\n                return \"image/jpeg\";\r\n            case \"png\":\r\n                return \"image/png\";\r\n            case \"bmp\":\r\n                return \"image/bmp\";\r\n            case \"gif\":\r\n                return \"image/gif\";\r\n            case \"tiff\":\r\n            case \"tif\":\r\n                return \"image/tiff\";\r\n        }\r\n    }\r\n\r\n    // This will likely not work correctly in IE8 and older.\r\n    // It's only used as part of a formula to determine\r\n    // if a canvas can be used to scale a server-hosted thumbnail.\r\n    // If canvas isn't supported by the UA (IE8 and older)\r\n    // this method should not even be called.\r\n    function isCrossOrigin(url) {\r\n        var targetAnchor = document.createElement(\"a\"),\r\n            targetProtocol, targetHostname, targetPort;\r\n\r\n        targetAnchor.href = url;\r\n\r\n        targetProtocol = targetAnchor.protocol;\r\n        targetPort = targetAnchor.port;\r\n        targetHostname = targetAnchor.hostname;\r\n\r\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\r\n            return true;\r\n        }\r\n\r\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\r\n            return true;\r\n        }\r\n\r\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\r\n        if (targetPort !== window.location.port && !qq.ie()) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function registerImgLoadListeners(img, promise) {\r\n        img.onload = function() {\r\n            img.onload = null;\r\n            img.onerror = null;\r\n            promise.success(img);\r\n        };\r\n\r\n        img.onerror = function() {\r\n            img.onload = null;\r\n            img.onerror = null;\r\n            log(\"Problem drawing thumbnail!\", \"error\");\r\n            promise.failure(img, \"Problem drawing thumbnail!\");\r\n        };\r\n    }\r\n\r\n    function registerCanvasDrawImageListener(canvas, promise) {\r\n        // The image is drawn on the canvas by a third-party library,\r\n        // and we want to know when this is completed.  Since the library\r\n        // may invoke drawImage many times in a loop, we need to be called\r\n        // back when the image is fully rendered.  So, we are expecting the\r\n        // code that draws this image to follow a convention that involves a\r\n        // function attached to the canvas instance be invoked when it is done.\r\n        canvas.qqImageRendered = function() {\r\n            promise.success(canvas);\r\n        };\r\n    }\r\n\r\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\r\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\r\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\r\n    // attempt was not successful.\r\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\r\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\r\n\r\n        if (isImg(imgOrCanvas)) {\r\n            registerImgLoadListeners(imgOrCanvas, promise);\r\n        }\r\n        else if (isCanvas(imgOrCanvas)) {\r\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\r\n        }\r\n        else {\r\n            promise.failure(imgOrCanvas);\r\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\r\n        }\r\n\r\n        return registered;\r\n    }\r\n\r\n    // Draw a preview iff the current UA can natively display it.\r\n    // Also rotate the image if necessary.\r\n    function draw(fileOrBlob, container, options) {\r\n        var drawPreview = new qq.Promise(),\r\n            identifier = new qq.Identify(fileOrBlob, log),\r\n            maxSize = options.maxSize,\r\n            // jshint eqnull:true\r\n            orient = options.orient == null ? true : options.orient,\r\n            megapixErrorHandler = function() {\r\n                container.onerror = null;\r\n                container.onload = null;\r\n                log(\"Could not render preview, file may be too large!\", \"error\");\r\n                drawPreview.failure(container, \"Browser cannot render image!\");\r\n            };\r\n\r\n        identifier.isPreviewable().then(\r\n            function(mime) {\r\n                // If options explicitly specify that Orientation is not desired,\r\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\r\n                var dummyExif = {\r\n                        parse: function() {\r\n                            return new qq.Promise().success();\r\n                        }\r\n                    },\r\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\r\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\r\n\r\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\r\n                    exif.parse().then(\r\n                        function(exif) {\r\n                            var orientation = exif && exif.Orientation;\r\n\r\n                            mpImg.render(container, {\r\n                                maxWidth: maxSize,\r\n                                maxHeight: maxSize,\r\n                                orientation: orientation,\r\n                                mime: mime,\r\n                                resize: options.customResizeFunction\r\n                            });\r\n                        },\r\n\r\n                        function(failureMsg) {\r\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\r\n\r\n                            mpImg.render(container, {\r\n                                maxWidth: maxSize,\r\n                                maxHeight: maxSize,\r\n                                mime: mime,\r\n                                resize: options.customResizeFunction\r\n                            });\r\n                        }\r\n                    );\r\n                }\r\n            },\r\n\r\n            function() {\r\n                log(\"Not previewable\");\r\n                drawPreview.failure(container, \"Not previewable\");\r\n            }\r\n        );\r\n\r\n        return drawPreview;\r\n    }\r\n\r\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\r\n        var tempImg = new Image(),\r\n            tempImgRender = new qq.Promise();\r\n\r\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\r\n\r\n        if (isCrossOrigin(url)) {\r\n            tempImg.crossOrigin = \"anonymous\";\r\n        }\r\n\r\n        tempImg.src = url;\r\n\r\n        tempImgRender.then(\r\n            function rendered() {\r\n                registerThumbnailRenderedListener(canvasOrImg, draw);\r\n\r\n                var mpImg = new qq.MegaPixImage(tempImg);\r\n                mpImg.render(canvasOrImg, {\r\n                    maxWidth: maxSize,\r\n                    maxHeight: maxSize,\r\n                    mime: determineMimeOfFileName(url),\r\n                    resize: customResizeFunction\r\n                });\r\n            },\r\n\r\n            draw.failure\r\n        );\r\n    }\r\n\r\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\r\n        registerThumbnailRenderedListener(img, draw);\r\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\r\n        // that must drop back to CSS is known and exploited by the templating module.\r\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\r\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\r\n        qq(img).css({\r\n            maxWidth: maxSize + \"px\",\r\n            maxHeight: maxSize + \"px\"\r\n        });\r\n\r\n        img.src = url;\r\n    }\r\n\r\n    // Draw a (server-hosted) thumbnail given a URL.\r\n    // This will optionally scale the thumbnail as well.\r\n    // It attempts to use <canvas> to scale, but will fall back\r\n    // to max-width and max-height style properties if the UA\r\n    // doesn't support canvas or if the images is cross-domain and\r\n    // the UA doesn't support the crossorigin attribute on img tags,\r\n    // which is required to scale a cross-origin image using <canvas> &\r\n    // then export it back to an <img>.\r\n    function drawFromUrl(url, container, options) {\r\n        var draw = new qq.Promise(),\r\n            scale = options.scale,\r\n            maxSize = scale ? options.maxSize : null;\r\n\r\n        // container is an img, scaling needed\r\n        if (scale && isImg(container)) {\r\n            // Iff canvas is available in this UA, try to use it for scaling.\r\n            // Otherwise, fall back to CSS scaling\r\n            if (isCanvasSupported()) {\r\n                // Attempt to use <canvas> for image scaling,\r\n                // but we must fall back to scaling via CSS/styles\r\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\r\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\r\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\r\n                }\r\n                else {\r\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\r\n                }\r\n            }\r\n            else {\r\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\r\n            }\r\n        }\r\n        // container is a canvas, scaling optional\r\n        else if (isCanvas(container)) {\r\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\r\n        }\r\n        // container is an img & no scaling: just set the src attr to the passed url\r\n        else if (registerThumbnailRenderedListener(container, draw)) {\r\n            container.src = url;\r\n        }\r\n\r\n        return draw;\r\n    }\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\r\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\r\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\r\n         *\r\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\r\n         * @param container <img> or <canvas> to contain the preview\r\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\r\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\r\n         */\r\n        generate: function(fileBlobOrUrl, container, options) {\r\n            if (qq.isString(fileBlobOrUrl)) {\r\n                log(\"Attempting to update thumbnail based on server response.\");\r\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\r\n            }\r\n            else {\r\n                log(\"Attempting to draw client-side image preview.\");\r\n                return draw(fileBlobOrUrl, container, options || {});\r\n            }\r\n        }\r\n    });\r\n\r\n    /*<testing>*/\r\n    this._testing = {};\r\n    this._testing.isImg = isImg;\r\n    this._testing.isCanvas = isCanvas;\r\n    this._testing.isCrossOrigin = isCrossOrigin;\r\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\r\n    /*</testing>*/\r\n};\r\n","/*globals qq */\r\n/**\r\n * EXIF image data parser.  Currently only parses the Orientation tag value,\r\n * but this may be expanded to other tags in the future.\r\n *\r\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\r\n * @constructor\r\n */\r\nqq.Exif = function(fileOrBlob, log) {\r\n    \"use strict\";\r\n\r\n    // Orientation is the only tag parsed here at this time.\r\n    var TAG_IDS = [274],\r\n        TAG_INFO = {\r\n            274: {\r\n                name: \"Orientation\",\r\n                bytes: 2\r\n            }\r\n        };\r\n\r\n    // Convert a little endian (hex string) to big endian (decimal).\r\n    function parseLittleEndian(hex) {\r\n        var result = 0,\r\n            pow = 0;\r\n\r\n        while (hex.length > 0) {\r\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\r\n            hex = hex.substring(2, hex.length);\r\n            pow += 8;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Find the byte offset, of Application Segment 1 (EXIF).\r\n    // External callers need not supply any arguments.\r\n    function seekToApp1(offset, promise) {\r\n        var theOffset = offset,\r\n            thePromise = promise;\r\n        if (theOffset === undefined) {\r\n            theOffset = 2;\r\n            thePromise = new qq.Promise();\r\n        }\r\n\r\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\r\n            var match = /^ffe([0-9])/.exec(hex),\r\n                segmentLength;\r\n\r\n            if (match) {\r\n                if (match[1] !== \"1\") {\r\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\r\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\r\n                }\r\n                else {\r\n                    thePromise.success(theOffset);\r\n                }\r\n            }\r\n            else {\r\n                thePromise.failure(\"No EXIF header to be found!\");\r\n            }\r\n        });\r\n\r\n        return thePromise;\r\n    }\r\n\r\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\r\n    function getApp1Offset() {\r\n        var promise = new qq.Promise();\r\n\r\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\r\n            if (hex.indexOf(\"ffd8\") !== 0) {\r\n                promise.failure(\"Not a valid JPEG!\");\r\n            }\r\n            else {\r\n                seekToApp1().then(function(offset) {\r\n                    promise.success(offset);\r\n                },\r\n                function(error) {\r\n                    promise.failure(error);\r\n                });\r\n            }\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    // Determine the byte ordering of the EXIF header.\r\n    function isLittleEndian(app1Start) {\r\n        var promise = new qq.Promise();\r\n\r\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\r\n            promise.success(hex === \"4949\");\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    // Determine the number of directory entries in the EXIF header.\r\n    function getDirEntryCount(app1Start, littleEndian) {\r\n        var promise = new qq.Promise();\r\n\r\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\r\n            if (littleEndian) {\r\n                return promise.success(parseLittleEndian(hex));\r\n            }\r\n            else {\r\n                promise.success(parseInt(hex, 16));\r\n            }\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    // Get the IFD portion of the EXIF header as a hex string.\r\n    function getIfd(app1Start, dirEntries) {\r\n        var offset = app1Start + 20,\r\n            bytes = dirEntries * 12;\r\n\r\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\r\n    }\r\n\r\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\r\n    function getDirEntries(ifdHex) {\r\n        var entries = [],\r\n            offset = 0;\r\n\r\n        while (offset + 24 <= ifdHex.length) {\r\n            entries.push(ifdHex.slice(offset, offset + 24));\r\n            offset += 24;\r\n        }\r\n\r\n        return entries;\r\n    }\r\n\r\n    // Obtain values for all relevant tags and return them.\r\n    function getTagValues(littleEndian, dirEntries) {\r\n        var TAG_VAL_OFFSET = 16,\r\n            tagsToFind = qq.extend([], TAG_IDS),\r\n            vals = {};\r\n\r\n        qq.each(dirEntries, function(idx, entry) {\r\n            var idHex = entry.slice(0, 4),\r\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\r\n                tagsToFindIdx = tagsToFind.indexOf(id),\r\n                tagValHex, tagName, tagValLength;\r\n\r\n            if (tagsToFindIdx >= 0) {\r\n                tagName = TAG_INFO[id].name;\r\n                tagValLength = TAG_INFO[id].bytes;\r\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\r\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\r\n\r\n                tagsToFind.splice(tagsToFindIdx, 1);\r\n            }\r\n\r\n            if (tagsToFind.length === 0) {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        return vals;\r\n    }\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\r\n         *\r\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\r\n         * If successful, the parsed EXIF header as an object will be included.\r\n         */\r\n        parse: function() {\r\n            var parser = new qq.Promise(),\r\n                onParseFailure = function(message) {\r\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\r\n                    parser.failure(message);\r\n                };\r\n\r\n            getApp1Offset().then(function(app1Offset) {\r\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\r\n\r\n                isLittleEndian(app1Offset).then(function(littleEndian) {\r\n\r\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\r\n\r\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\r\n\r\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\r\n\r\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\r\n                            var dirEntries = getDirEntries(ifdHex),\r\n                                tagValues = getTagValues(littleEndian, dirEntries);\r\n\r\n                            log(\"Successfully parsed some EXIF tags\");\r\n\r\n                            parser.success(tagValues);\r\n                        }, onParseFailure);\r\n                    }, onParseFailure);\r\n                }, onParseFailure);\r\n            }, onParseFailure);\r\n\r\n            return parser;\r\n        }\r\n    });\r\n\r\n    /*<testing>*/\r\n    this._testing = {};\r\n    this._testing.parseLittleEndian = parseLittleEndian;\r\n    /*</testing>*/\r\n};\r\n","/*globals qq */\r\nqq.Identify = function(fileOrBlob, log) {\r\n    \"use strict\";\r\n\r\n    function isIdentifiable(magicBytes, questionableBytes) {\r\n        var identifiable = false,\r\n            magicBytesEntries = [].concat(magicBytes);\r\n\r\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\r\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\r\n                identifiable = true;\r\n                return false;\r\n            }\r\n        });\r\n\r\n        return identifiable;\r\n    }\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\r\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\r\n         * file, we will examine the blob's type attribute to save CPU cycles.\r\n         *\r\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\r\n         * If successful, the MIME string is passed to the success handler.\r\n         */\r\n        isPreviewable: function() {\r\n            var self = this,\r\n                identifier = new qq.Promise(),\r\n                previewable = false,\r\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\r\n\r\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\r\n\r\n            log(\"First pass: check type attribute of blob object.\");\r\n\r\n            if (this.isPreviewableSync()) {\r\n                log(\"Second pass: check for magic bytes in file header.\");\r\n\r\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\r\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\r\n                        if (isIdentifiable(bytes, hex)) {\r\n                            // Safari is the only supported browser that can deal with TIFFs natively,\r\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\r\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\r\n                                previewable = true;\r\n                                identifier.success(mime);\r\n                            }\r\n\r\n                            return false;\r\n                        }\r\n                    });\r\n\r\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\r\n\r\n                    if (!previewable) {\r\n                        identifier.failure();\r\n                    }\r\n                },\r\n                function() {\r\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\r\n                    identifier.failure();\r\n                });\r\n            }\r\n            else {\r\n                identifier.failure();\r\n            }\r\n\r\n            return identifier;\r\n        },\r\n\r\n        /**\r\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\r\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\r\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\r\n         * file's magic bytes.\r\n         *\r\n         * @returns {Boolean} true if the blob can be rendered in the current browser\r\n         */\r\n        isPreviewableSync: function() {\r\n            var fileMime = fileOrBlob.type,\r\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\r\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\r\n                previewable = false,\r\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\r\n\r\n            if (isRecognizedImage) {\r\n                if (fileMime === \"image/tiff\") {\r\n                    previewable = qq.supportedFeatures.tiffPreviews;\r\n                }\r\n                else {\r\n                    previewable = true;\r\n                }\r\n            }\r\n\r\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\r\n\r\n            return previewable;\r\n        }\r\n    });\r\n};\r\n\r\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\r\n    \"image/jpeg\": \"ffd8ff\",\r\n    \"image/gif\": \"474946\",\r\n    \"image/png\": \"89504e\",\r\n    \"image/bmp\": \"424d\",\r\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\r\n};\r\n","/*globals qq*/\r\n/**\r\n * Attempts to validate an image, wherever possible.\r\n *\r\n * @param blob File or Blob representing a user-selecting image.\r\n * @param log Uses this to post log messages to the console.\r\n * @constructor\r\n */\r\nqq.ImageValidation = function(blob, log) {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * @param limits Object with possible image-related limits to enforce.\r\n     * @returns {boolean} true if at least one of the limits has a non-zero value\r\n     */\r\n    function hasNonZeroLimits(limits) {\r\n        var atLeastOne = false;\r\n\r\n        qq.each(limits, function(limit, value) {\r\n            if (value > 0) {\r\n                atLeastOne = true;\r\n                return false;\r\n            }\r\n        });\r\n\r\n        return atLeastOne;\r\n    }\r\n\r\n    /**\r\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\r\n     * Otherwise, `success` is called on the returned promise with an object containing\r\n     * `width` and `height` properties.\r\n     */\r\n    function getWidthHeight() {\r\n        var sizeDetermination = new qq.Promise();\r\n\r\n        new qq.Identify(blob, log).isPreviewable().then(function() {\r\n            var image = new Image(),\r\n                url = window.URL && window.URL.createObjectURL ? window.URL :\r\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\r\n                      null;\r\n\r\n            if (url) {\r\n                image.onerror = function() {\r\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\r\n                    sizeDetermination.failure();\r\n                };\r\n\r\n                image.onload = function() {\r\n                    sizeDetermination.success({\r\n                        width: this.width,\r\n                        height: this.height\r\n                    });\r\n                };\r\n\r\n                image.src = url.createObjectURL(blob);\r\n            }\r\n            else {\r\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\r\n                sizeDetermination.failure();\r\n            }\r\n        }, sizeDetermination.failure);\r\n\r\n        return sizeDetermination;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param limits Object with possible image-related limits to enforce.\r\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\r\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\r\n     */\r\n    function getFailingLimit(limits, dimensions) {\r\n        var failingLimit;\r\n\r\n        qq.each(limits, function(limitName, limitValue) {\r\n            if (limitValue > 0) {\r\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\r\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\r\n                    actualValue = dimensions[dimensionPropName];\r\n\r\n                /*jshint -W015*/\r\n                switch (limitMatcher[1]) {\r\n                    case \"min\":\r\n                        if (actualValue < limitValue) {\r\n                            failingLimit = limitName;\r\n                            return false;\r\n                        }\r\n                        break;\r\n                    case \"max\":\r\n                        if (actualValue > limitValue) {\r\n                            failingLimit = limitName;\r\n                            return false;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n\r\n        return failingLimit;\r\n    }\r\n\r\n    /**\r\n     * Validate the associated blob.\r\n     *\r\n     * @param limits\r\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\r\n     * if the blob is not an image, or if the image is not verifiable.\r\n     * Otherwise, `failure` with the name of the failing limit.\r\n     */\r\n    this.validate = function(limits) {\r\n        var validationEffort = new qq.Promise();\r\n\r\n        log(\"Attempting to validate image.\");\r\n\r\n        if (hasNonZeroLimits(limits)) {\r\n            getWidthHeight().then(function(dimensions) {\r\n                var failingLimit = getFailingLimit(limits, dimensions);\r\n\r\n                if (failingLimit) {\r\n                    validationEffort.failure(failingLimit);\r\n                }\r\n                else {\r\n                    validationEffort.success();\r\n                }\r\n            }, validationEffort.success);\r\n        }\r\n        else {\r\n            validationEffort.success();\r\n        }\r\n\r\n        return validationEffort;\r\n    };\r\n};\r\n","/* globals qq */\r\n/**\r\n * Module used to control populating the initial list of files.\r\n *\r\n * @constructor\r\n */\r\nqq.Session = function(spec) {\r\n    \"use strict\";\r\n\r\n    var options = {\r\n        endpoint: null,\r\n        params: {},\r\n        customHeaders: {},\r\n        cors: {},\r\n        addFileRecord: function(sessionData) {},\r\n        log: function(message, level) {}\r\n    };\r\n\r\n    qq.extend(options, spec, true);\r\n\r\n    function isJsonResponseValid(response) {\r\n        if (qq.isArray(response)) {\r\n            return true;\r\n        }\r\n\r\n        options.log(\"Session response is not an array.\", \"error\");\r\n    }\r\n\r\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\r\n        var someItemsIgnored = false;\r\n\r\n        success = success && isJsonResponseValid(fileItems);\r\n\r\n        if (success) {\r\n            qq.each(fileItems, function(idx, fileItem) {\r\n                /* jshint eqnull:true */\r\n                if (fileItem.uuid == null) {\r\n                    someItemsIgnored = true;\r\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\r\n                }\r\n                else if (fileItem.name == null) {\r\n                    someItemsIgnored = true;\r\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\r\n                }\r\n                else {\r\n                    try {\r\n                        options.addFileRecord(fileItem);\r\n                        return true;\r\n                    }\r\n                    catch (err) {\r\n                        someItemsIgnored = true;\r\n                        options.log(err.message, \"error\");\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            });\r\n        }\r\n\r\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\r\n    }\r\n\r\n    // Initiate a call to the server that will be used to populate the initial file list.\r\n    // Returns a `qq.Promise`.\r\n    this.refresh = function() {\r\n        /*jshint indent:false */\r\n        var refreshEffort = new qq.Promise(),\r\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\r\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\r\n            },\r\n            requesterOptions = qq.extend({}, options),\r\n            requester = new qq.SessionAjaxRequester(\r\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\r\n            );\r\n\r\n        requester.queryServer();\r\n\r\n        return refreshEffort;\r\n    };\r\n};\r\n","/*globals qq, XMLHttpRequest*/\r\n/**\r\n * Thin module used to send GET requests to the server, expecting information about session\r\n * data used to initialize an uploader instance.\r\n *\r\n * @param spec Various options used to influence the associated request.\r\n * @constructor\r\n */\r\nqq.SessionAjaxRequester = function(spec) {\r\n    \"use strict\";\r\n\r\n    var requester,\r\n        options = {\r\n            endpoint: null,\r\n            customHeaders: {},\r\n            params: {},\r\n            cors: {\r\n                expected: false,\r\n                sendCredentials: false\r\n            },\r\n            onComplete: function(response, success, xhrOrXdr) {},\r\n            log: function(str, level) {}\r\n        };\r\n\r\n    qq.extend(options, spec);\r\n\r\n    function onComplete(id, xhrOrXdr, isError) {\r\n        var response = null;\r\n\r\n        /* jshint eqnull:true */\r\n        if (xhrOrXdr.responseText != null) {\r\n            try {\r\n                response = qq.parseJson(xhrOrXdr.responseText);\r\n            }\r\n            catch (err) {\r\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\r\n                isError = true;\r\n            }\r\n        }\r\n\r\n        options.onComplete(response, !isError, xhrOrXdr);\r\n    }\r\n\r\n    requester = qq.extend(this, new qq.AjaxRequester({\r\n        acceptHeader: \"application/json\",\r\n        validMethods: [\"GET\"],\r\n        method: \"GET\",\r\n        endpointStore: {\r\n            get: function() {\r\n                return options.endpoint;\r\n            }\r\n        },\r\n        customHeaders: options.customHeaders,\r\n        log: options.log,\r\n        onComplete: onComplete,\r\n        cors: options.cors\r\n    }));\r\n\r\n    qq.extend(this, {\r\n        queryServer: function() {\r\n            var params = qq.extend({}, options.params);\r\n\r\n            options.log(\"Session query request.\");\r\n\r\n            requester.initTransport(\"sessionRefresh\")\r\n                .withParams(params)\r\n                .withCacheBuster()\r\n                .send();\r\n        }\r\n    });\r\n};\r\n","/* globals qq, ExifRestorer */\r\n/**\r\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\r\n * Scaled images are generated and converted to blobs on-demand.\r\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\r\n *\r\n * @param spec Information about the scaled images to generate.\r\n * @param log Logger instance\r\n * @constructor\r\n */\r\nqq.Scaler = function(spec, log) {\r\n    \"use strict\";\r\n\r\n    var self = this,\r\n        customResizeFunction = spec.customResizer,\r\n        includeOriginal = spec.sendOriginal,\r\n        orient = spec.orient,\r\n        defaultType = spec.defaultType,\r\n        defaultQuality = spec.defaultQuality / 100,\r\n        failedToScaleText = spec.failureText,\r\n        includeExif = spec.includeExif,\r\n        sizes = this._getSortedSizes(spec.sizes);\r\n\r\n    // Revealed API for instances of this module\r\n    qq.extend(this, {\r\n        // If no targeted sizes have been declared or if this browser doesn't support\r\n        // client-side image preview generation, there is no scaling to do.\r\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\r\n\r\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\r\n            var self = this,\r\n                records = [],\r\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\r\n                identifier = new qq.Identify(originalBlob, log);\r\n\r\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\r\n            if (identifier.isPreviewableSync()) {\r\n                // Create records for each scaled version & add them to the records array, smallest first.\r\n                qq.each(sizes, function(idx, sizeRecord) {\r\n                    var outputType = self._determineOutputType({\r\n                        defaultType: defaultType,\r\n                        requestedType: sizeRecord.type,\r\n                        refType: originalBlob.type\r\n                    });\r\n\r\n                    records.push({\r\n                        uuid: qq.getUniqueId(),\r\n                        name: self._getName(originalFileName, {\r\n                            name: sizeRecord.name,\r\n                            type: outputType,\r\n                            refType: originalBlob.type\r\n                        }),\r\n                        blob: new qq.BlobProxy(originalBlob,\r\n                        qq.bind(self._generateScaledImage, self, {\r\n                            customResizeFunction: customResizeFunction,\r\n                            maxSize: sizeRecord.maxSize,\r\n                            orient: orient,\r\n                            type: outputType,\r\n                            quality: defaultQuality,\r\n                            failedText: failedToScaleText,\r\n                            includeExif: includeExif,\r\n                            log: log\r\n                        }))\r\n                    });\r\n                });\r\n\r\n                records.push({\r\n                    uuid: originalFileUuid,\r\n                    name: originalFileName,\r\n                    size: originalBlob.size,\r\n                    blob: includeOriginal ? originalBlob : null\r\n                });\r\n            }\r\n            else {\r\n                records.push({\r\n                    uuid: originalFileUuid,\r\n                    name: originalFileName,\r\n                    size: originalBlob.size,\r\n                    blob: originalBlob\r\n                });\r\n            }\r\n\r\n            return records;\r\n        },\r\n\r\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\r\n            var self = this,\r\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\r\n                scaledIds = [],\r\n                originalId = null,\r\n                addFileToHandler = api.addFileToHandler,\r\n                uploadData = api.uploadData,\r\n                paramsStore = api.paramsStore,\r\n                proxyGroupId = qq.getUniqueId();\r\n\r\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\r\n                var blobSize = record.size,\r\n                    id;\r\n\r\n                if (record.blob instanceof qq.BlobProxy) {\r\n                    blobSize = -1;\r\n                }\r\n\r\n                id = uploadData.addFile({\r\n                    uuid: record.uuid,\r\n                    name: record.name,\r\n                    size: blobSize,\r\n                    batchId: batchId,\r\n                    proxyGroupId: proxyGroupId\r\n                });\r\n\r\n                if (record.blob instanceof qq.BlobProxy) {\r\n                    scaledIds.push(id);\r\n                }\r\n                else {\r\n                    originalId = id;\r\n                }\r\n\r\n                if (record.blob) {\r\n                    addFileToHandler(id, record.blob);\r\n                    fileList.push({id: id, file: record.blob});\r\n                }\r\n                else {\r\n                    uploadData.setStatus(id, qq.status.REJECTED);\r\n                }\r\n            });\r\n\r\n            // If we are potentially uploading an original file and some scaled versions,\r\n            // ensure the scaled versions include reference's to the parent's UUID and size\r\n            // in their associated upload requests.\r\n            if (originalId !== null) {\r\n                qq.each(scaledIds, function(idx, scaledId) {\r\n                    var params = {\r\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\r\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\r\n                    };\r\n\r\n                    // Make sure the UUID for each scaled image is sent with the upload request,\r\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\r\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\r\n\r\n                    uploadData.setParentId(scaledId, originalId);\r\n                    paramsStore.addReadOnly(scaledId, params);\r\n                });\r\n\r\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\r\n                // parameter as well.\r\n                if (scaledIds.length) {\r\n                    (function() {\r\n                        var param = {};\r\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\r\n                        paramsStore.addReadOnly(originalId, param);\r\n                    }());\r\n                }\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nqq.extend(qq.Scaler.prototype, {\r\n    scaleImage: function(id, specs, api) {\r\n        \"use strict\";\r\n\r\n        if (!qq.supportedFeatures.scaling) {\r\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\r\n        }\r\n\r\n        var scalingEffort = new qq.Promise(),\r\n            log = api.log,\r\n            file = api.getFile(id),\r\n            uploadData = api.uploadData.retrieve({id: id}),\r\n            name = uploadData && uploadData.name,\r\n            uuid = uploadData && uploadData.uuid,\r\n            scalingOptions = {\r\n                customResizer: specs.customResizer,\r\n                sendOriginal: false,\r\n                orient: specs.orient,\r\n                defaultType: specs.type || null,\r\n                defaultQuality: specs.quality,\r\n                failedToScaleText: \"Unable to scale\",\r\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\r\n            },\r\n            scaler = new qq.Scaler(scalingOptions, log);\r\n\r\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\r\n            scalingEffort.failure();\r\n\r\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\r\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\r\n        }\r\n        else {\r\n            (qq.bind(function() {\r\n                // Assumption: There will never be more than one record\r\n                var record = scaler.getFileRecords(uuid, name, file)[0];\r\n\r\n                if (record && record.blob instanceof qq.BlobProxy) {\r\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\r\n                }\r\n                else {\r\n                    log(id + \" is not a scalable image!\", \"error\");\r\n                    scalingEffort.failure();\r\n                }\r\n            }, this)());\r\n        }\r\n\r\n        return scalingEffort;\r\n    },\r\n\r\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\r\n    // image/jpeg and image/png are the only safe choices at this time.\r\n    _determineOutputType: function(spec) {\r\n        \"use strict\";\r\n\r\n        var requestedType = spec.requestedType,\r\n            defaultType = spec.defaultType,\r\n            referenceType = spec.refType;\r\n\r\n        // If a default type and requested type have not been specified, this should be a\r\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\r\n        if (!defaultType && !requestedType) {\r\n            if (referenceType !== \"image/jpeg\") {\r\n                return \"image/png\";\r\n            }\r\n            return referenceType;\r\n        }\r\n\r\n        // A specified default type is used when a requested type is not specified.\r\n        if (!requestedType) {\r\n            return defaultType;\r\n        }\r\n\r\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\r\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\r\n            if (requestedType === \"image/tiff\") {\r\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\r\n            }\r\n\r\n            return requestedType;\r\n        }\r\n\r\n        return defaultType;\r\n    },\r\n\r\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\r\n    _getName: function(originalName, scaledVersionProperties) {\r\n        \"use strict\";\r\n\r\n        var startOfExt = originalName.lastIndexOf(\".\"),\r\n            versionType = scaledVersionProperties.type || \"image/png\",\r\n            referenceType = scaledVersionProperties.refType,\r\n            scaledName = \"\",\r\n            scaledExt = qq.getExtension(originalName),\r\n            nameAppendage = \"\";\r\n\r\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\r\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\r\n        }\r\n\r\n        if (startOfExt >= 0) {\r\n            scaledName = originalName.substr(0, startOfExt);\r\n\r\n            if (referenceType !== versionType) {\r\n                scaledExt = versionType.split(\"/\")[1];\r\n            }\r\n\r\n            scaledName += nameAppendage + \".\" + scaledExt;\r\n        }\r\n        else {\r\n            scaledName = originalName + nameAppendage;\r\n        }\r\n\r\n        return scaledName;\r\n    },\r\n\r\n    // We want the smallest scaled file to be uploaded first\r\n    _getSortedSizes: function(sizes) {\r\n        \"use strict\";\r\n\r\n        sizes = qq.extend([], sizes);\r\n\r\n        return sizes.sort(function(a, b) {\r\n            if (a.maxSize > b.maxSize) {\r\n                return 1;\r\n            }\r\n            if (a.maxSize < b.maxSize) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        });\r\n    },\r\n\r\n    _generateScaledImage: function(spec, sourceFile) {\r\n        \"use strict\";\r\n\r\n        var self = this,\r\n            customResizeFunction = spec.customResizeFunction,\r\n            log = spec.log,\r\n            maxSize = spec.maxSize,\r\n            orient = spec.orient,\r\n            type = spec.type,\r\n            quality = spec.quality,\r\n            failedText = spec.failedText,\r\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\r\n            scalingEffort = new qq.Promise(),\r\n            imageGenerator = new qq.ImageGenerator(log),\r\n            canvas = document.createElement(\"canvas\");\r\n\r\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\r\n\r\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\r\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\r\n                signalSuccess = function() {\r\n                    log(\"Success generating scaled version for \" + sourceFile.name);\r\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\r\n                    scalingEffort.success(blob);\r\n                };\r\n\r\n            if (includeExif) {\r\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\r\n                    scaledImageDataUri = scaledImageDataUriWithExif;\r\n                    signalSuccess();\r\n                },\r\n                function() {\r\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\r\n                    signalSuccess();\r\n                });\r\n            }\r\n            else {\r\n                signalSuccess();\r\n            }\r\n        }, function() {\r\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\r\n            scalingEffort.failure(failedText);\r\n        });\r\n\r\n        return scalingEffort;\r\n    },\r\n\r\n    // Attempt to insert the original image's EXIF header into a scaled version.\r\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\r\n        \"use strict\";\r\n\r\n        var reader = new FileReader(),\r\n            insertionEffort = new qq.Promise(),\r\n            originalImageDataUri = \"\";\r\n\r\n        reader.onload = function() {\r\n            originalImageDataUri = reader.result;\r\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\r\n        };\r\n\r\n        reader.onerror = function() {\r\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\r\n            insertionEffort.failure();\r\n        };\r\n\r\n        reader.readAsDataURL(originalImage);\r\n\r\n        return insertionEffort;\r\n    },\r\n\r\n    _dataUriToBlob: function(dataUri) {\r\n        \"use strict\";\r\n\r\n        var byteString, mimeString, arrayBuffer, intArray;\r\n\r\n        // convert base64 to raw binary data held in a string\r\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\r\n            byteString = atob(dataUri.split(\",\")[1]);\r\n        }\r\n        else {\r\n            byteString = decodeURI(dataUri.split(\",\")[1]);\r\n        }\r\n\r\n        // extract the MIME\r\n        mimeString = dataUri.split(\",\")[0]\r\n            .split(\":\")[1]\r\n            .split(\";\")[0];\r\n\r\n        // write the bytes of the binary string to an ArrayBuffer\r\n        arrayBuffer = new ArrayBuffer(byteString.length);\r\n        intArray = new Uint8Array(arrayBuffer);\r\n        qq.each(byteString, function(idx, character) {\r\n            intArray[idx] = character.charCodeAt(0);\r\n        });\r\n\r\n        return this._createBlob(arrayBuffer, mimeString);\r\n    },\r\n\r\n    _createBlob: function(data, mime) {\r\n        \"use strict\";\r\n\r\n        var BlobBuilder = window.BlobBuilder ||\r\n                window.WebKitBlobBuilder ||\r\n                window.MozBlobBuilder ||\r\n                window.MSBlobBuilder,\r\n            blobBuilder = BlobBuilder && new BlobBuilder();\r\n\r\n        if (blobBuilder) {\r\n            blobBuilder.append(data);\r\n            return blobBuilder.getBlob(mime);\r\n        }\r\n        else {\r\n            return new Blob([data], {type: mime});\r\n        }\r\n    }\r\n});\r\n","//Based on MinifyJpeg\r\n//http://elicon.blog57.fc2.com/blog-entry-206.html\r\n\r\nqq.ExifRestorer = (function()\r\n{\r\n   \r\n\tvar ExifRestorer = {};\r\n\t \r\n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\r\n                         \"QRSTUVWXYZabcdef\" +\r\n                         \"ghijklmnopqrstuv\" +\r\n                         \"wxyz0123456789+/\" +\r\n                         \"=\";\r\n\r\n    ExifRestorer.encode64 = function(input)\r\n    {\r\n        var output = \"\",\r\n            chr1, chr2, chr3 = \"\",\r\n            enc1, enc2, enc3, enc4 = \"\",\r\n            i = 0;\r\n\r\n        do {\r\n            chr1 = input[i++];\r\n            chr2 = input[i++];\r\n            chr3 = input[i++];\r\n\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n\r\n            if (isNaN(chr2)) {\r\n               enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n               enc4 = 64;\r\n            }\r\n\r\n            output = output +\r\n               this.KEY_STR.charAt(enc1) +\r\n               this.KEY_STR.charAt(enc2) +\r\n               this.KEY_STR.charAt(enc3) +\r\n               this.KEY_STR.charAt(enc4);\r\n            chr1 = chr2 = chr3 = \"\";\r\n            enc1 = enc2 = enc3 = enc4 = \"\";\r\n        } while (i < input.length);\r\n\r\n        return output;\r\n    };\r\n    \r\n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\r\n    {\r\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\r\n\r\n        if (!origFileBase64.match(expectedBase64Header))\r\n        {\r\n        \treturn resizedFileBase64;\r\n        }       \r\n        \r\n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\r\n        var segments = this.slice2Segments(rawImage);\r\n                \r\n        var image = this.exifManipulation(resizedFileBase64, segments);\r\n        \r\n        return expectedBase64Header + this.encode64(image);\r\n        \r\n    };\r\n\r\n\r\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\r\n    {\r\n            var exifArray = this.getExifArray(segments),\r\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\r\n                aBuffer = new Uint8Array(newImageArray);\r\n\r\n            return aBuffer;\r\n    };\r\n\r\n\r\n    ExifRestorer.getExifArray = function(segments)\r\n    {\r\n            var seg;\r\n            for (var x = 0; x < segments.length; x++)\r\n            {\r\n                seg = segments[x];\r\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\r\n                {\r\n                    return seg;\r\n                }\r\n            }\r\n            return [];\r\n    };\r\n\r\n\r\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\r\n    {\r\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\r\n                buf = this.decode64(imageData),\r\n                separatePoint = buf.indexOf(255,3),\r\n                mae = buf.slice(0, separatePoint),\r\n                ato = buf.slice(separatePoint),\r\n                array = mae;\r\n\r\n            array = array.concat(exifArray);\r\n            array = array.concat(ato);\r\n           return array;\r\n    };\r\n\r\n\r\n    \r\n    ExifRestorer.slice2Segments = function(rawImageArray)\r\n    {\r\n        var head = 0,\r\n            segments = [];\r\n\r\n        while (1)\r\n        {\r\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\r\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\r\n            {\r\n                head += 2;\r\n            }\r\n            else\r\n            {\r\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\r\n                    endPoint = head + length + 2,\r\n                    seg = rawImageArray.slice(head, endPoint);\r\n                segments.push(seg);\r\n                head = endPoint;\r\n            }\r\n            if (head > rawImageArray.length){break;}\r\n        }\r\n\r\n        return segments;\r\n    };\r\n\r\n\r\n    \r\n    ExifRestorer.decode64 = function(input) \r\n    {\r\n        var output = \"\",\r\n            chr1, chr2, chr3 = \"\",\r\n            enc1, enc2, enc3, enc4 = \"\",\r\n            i = 0,\r\n            buf = [];\r\n\r\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\r\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\r\n        if (base64test.exec(input)) {\r\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\r\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\r\n        }\r\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\r\n\r\n        do {\r\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\r\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\r\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\r\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\r\n\r\n            chr1 = (enc1 << 2) | (enc2 >> 4);\r\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n            chr3 = ((enc3 & 3) << 6) | enc4;\r\n\r\n            buf.push(chr1);\r\n\r\n            if (enc3 != 64) {\r\n               buf.push(chr2);\r\n            }\r\n            if (enc4 != 64) {\r\n               buf.push(chr3);\r\n            }\r\n\r\n            chr1 = chr2 = chr3 = \"\";\r\n            enc1 = enc2 = enc3 = enc4 = \"\";\r\n\r\n        } while (i < input.length);\r\n\r\n        return buf;\r\n    };\r\n\r\n    \r\n    return ExifRestorer;\r\n})();\r\n","/* globals qq */\r\n/**\r\n * Keeps a running tally of total upload progress for a batch of files.\r\n *\r\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\r\n * @param getSize Function that returns the size of a file given its ID\r\n * @constructor\r\n */\r\nqq.TotalProgress = function(callback, getSize) {\r\n    \"use strict\";\r\n\r\n    var perFileProgress = {},\r\n        totalLoaded = 0,\r\n        totalSize = 0,\r\n\r\n        lastLoadedSent = -1,\r\n        lastTotalSent = -1,\r\n        callbackProxy = function(loaded, total) {\r\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\r\n                callback(loaded, total);\r\n            }\r\n\r\n            lastLoadedSent = loaded;\r\n            lastTotalSent = total;\r\n        },\r\n\r\n        /**\r\n         * @param failed Array of file IDs that have failed\r\n         * @param retryable Array of file IDs that are retryable\r\n         * @returns true if none of the failed files are eligible for retry\r\n         */\r\n        noRetryableFiles = function(failed, retryable) {\r\n            var none = true;\r\n\r\n            qq.each(failed, function(idx, failedId) {\r\n                if (qq.indexOf(retryable, failedId) >= 0) {\r\n                    none = false;\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            return none;\r\n        },\r\n\r\n        onCancel = function(id) {\r\n            updateTotalProgress(id, -1, -1);\r\n            delete perFileProgress[id];\r\n        },\r\n\r\n        onAllComplete = function(successful, failed, retryable) {\r\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\r\n                callbackProxy(totalSize, totalSize);\r\n                this.reset();\r\n            }\r\n        },\r\n\r\n        onNew = function(id) {\r\n            var size = getSize(id);\r\n\r\n            // We might not know the size yet, such as for blob proxies\r\n            if (size > 0) {\r\n                updateTotalProgress(id, 0, size);\r\n                perFileProgress[id] = {loaded: 0, total: size};\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\r\n         * be appropriate to re-calculate and disseminate this data.\r\n         *\r\n         * @param id ID of a file that has changed in some important way\r\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\r\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\r\n         */\r\n        updateTotalProgress = function(id, newLoaded, newTotal) {\r\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\r\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\r\n\r\n            if (newLoaded === -1 && newTotal === -1) {\r\n                totalLoaded -= oldLoaded;\r\n                totalSize -= oldTotal;\r\n            }\r\n            else {\r\n                if (newLoaded) {\r\n                    totalLoaded += newLoaded - oldLoaded;\r\n                }\r\n                if (newTotal) {\r\n                    totalSize += newTotal - oldTotal;\r\n                }\r\n            }\r\n\r\n            callbackProxy(totalLoaded, totalSize);\r\n        };\r\n\r\n    qq.extend(this, {\r\n        // Called when a batch of files has completed uploading.\r\n        onAllComplete: onAllComplete,\r\n\r\n        // Called when the status of a file has changed.\r\n        onStatusChange: function(id, oldStatus, newStatus) {\r\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\r\n                onCancel(id);\r\n            }\r\n            else if (newStatus === qq.status.SUBMITTING) {\r\n                onNew(id);\r\n            }\r\n        },\r\n\r\n        // Called whenever the upload progress of an individual file has changed.\r\n        onIndividualProgress: function(id, loaded, total) {\r\n            updateTotalProgress(id, loaded, total);\r\n            perFileProgress[id] = {loaded: loaded, total: total};\r\n        },\r\n\r\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\r\n        onNewSize: function(id) {\r\n            onNew(id);\r\n        },\r\n\r\n        reset: function() {\r\n            perFileProgress = {};\r\n            totalLoaded = 0;\r\n            totalSize = 0;\r\n        }\r\n    });\r\n};\r\n","/*globals qq*/\r\nqq.PasteSupport = function(o) {\r\n    \"use strict\";\r\n\r\n    var options, detachPasteHandler;\r\n\r\n    options = {\r\n        targetElement: null,\r\n        callbacks: {\r\n            log: function(message, level) {},\r\n            pasteReceived: function(blob) {}\r\n        }\r\n    };\r\n\r\n    function isImage(item) {\r\n        return item.type &&\r\n            item.type.indexOf(\"image/\") === 0;\r\n    }\r\n\r\n    function registerPasteHandler() {\r\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\r\n            var clipboardData = event.clipboardData;\r\n\r\n            if (clipboardData) {\r\n                qq.each(clipboardData.items, function(idx, item) {\r\n                    if (isImage(item)) {\r\n                        var blob = item.getAsFile();\r\n                        options.callbacks.pasteReceived(blob);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    function unregisterPasteHandler() {\r\n        if (detachPasteHandler) {\r\n            detachPasteHandler();\r\n        }\r\n    }\r\n\r\n    qq.extend(options, o);\r\n    registerPasteHandler();\r\n\r\n    qq.extend(this, {\r\n        reset: function() {\r\n            unregisterPasteHandler();\r\n        }\r\n    });\r\n};\r\n","/* globals qq */\r\n/**\r\n * Module that handles support for existing forms.\r\n *\r\n * @param options Options passed from the integrator-supplied options related to form support.\r\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\r\n * @param log Proxy for the logger\r\n * @constructor\r\n */\r\nqq.FormSupport = function(options, startUpload, log) {\r\n    \"use strict\";\r\n    var self  = this,\r\n        interceptSubmit = options.interceptSubmit,\r\n        formEl = options.element,\r\n        autoUpload = options.autoUpload;\r\n\r\n    // Available on the public API associated with this module.\r\n    qq.extend(this, {\r\n        // To be used by the caller to determine if the endpoint will be determined by some processing\r\n        // that occurs in this module, such as if the form has an action attribute.\r\n        // Ignore if `attachToForm === false`.\r\n        newEndpoint: null,\r\n\r\n        // To be used by the caller to determine if auto uploading should be allowed.\r\n        // Ignore if `attachToForm === false`.\r\n        newAutoUpload: autoUpload,\r\n\r\n        // true if a form was detected and is being tracked by this module\r\n        attachedToForm: false,\r\n\r\n        // Returns an object with names and values for all valid form elements associated with the attached form.\r\n        getFormInputsAsObject: function() {\r\n            /* jshint eqnull:true */\r\n            if (formEl == null) {\r\n                return null;\r\n            }\r\n\r\n            return self._form2Obj(formEl);\r\n        }\r\n    });\r\n\r\n    // If the form contains an action attribute, this should be the new upload endpoint.\r\n    function determineNewEndpoint(formEl) {\r\n        if (formEl.getAttribute(\"action\")) {\r\n            self.newEndpoint = formEl.getAttribute(\"action\");\r\n        }\r\n    }\r\n\r\n    // Return true only if the form is valid, or if we cannot make this determination.\r\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\r\n    function validateForm(formEl, nativeSubmit) {\r\n        if (formEl.checkValidity && !formEl.checkValidity()) {\r\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\r\n            nativeSubmit();\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\r\n    function maybeUploadOnSubmit(formEl) {\r\n        var nativeSubmit = formEl.submit;\r\n\r\n        // Intercept and squelch submit events.\r\n        qq(formEl).attach(\"submit\", function(event) {\r\n            event = event || window.event;\r\n\r\n            if (event.preventDefault) {\r\n                event.preventDefault();\r\n            }\r\n            else {\r\n                event.returnValue = false;\r\n            }\r\n\r\n            validateForm(formEl, nativeSubmit) && startUpload();\r\n        });\r\n\r\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\r\n        // Intercept that too.\r\n        formEl.submit = function() {\r\n            validateForm(formEl, nativeSubmit) && startUpload();\r\n        };\r\n    }\r\n\r\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\r\n    // The rest of the code in this module depends on this being an HTMLElement.\r\n    function determineFormEl(formEl) {\r\n        if (formEl) {\r\n            if (qq.isString(formEl)) {\r\n                formEl = document.getElementById(formEl);\r\n            }\r\n\r\n            if (formEl) {\r\n                log(\"Attaching to form element.\");\r\n                determineNewEndpoint(formEl);\r\n                interceptSubmit && maybeUploadOnSubmit(formEl);\r\n            }\r\n        }\r\n\r\n        return formEl;\r\n    }\r\n\r\n    formEl = determineFormEl(formEl);\r\n    this.attachedToForm = !!formEl;\r\n};\r\n\r\nqq.extend(qq.FormSupport.prototype, {\r\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\r\n    // construct from a given form when the form is submitted.\r\n    _form2Obj: function(form) {\r\n        \"use strict\";\r\n        var obj = {},\r\n            notIrrelevantType = function(type) {\r\n                var irrelevantTypes = [\r\n                    \"button\",\r\n                    \"image\",\r\n                    \"reset\",\r\n                    \"submit\"\r\n                ];\r\n\r\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\r\n            },\r\n            radioOrCheckbox = function(type) {\r\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\r\n            },\r\n            ignoreValue = function(el) {\r\n                if (radioOrCheckbox(el.type) && !el.checked) {\r\n                    return true;\r\n                }\r\n\r\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\r\n            },\r\n            selectValue = function(select) {\r\n                var value = null;\r\n\r\n                qq.each(qq(select).children(), function(idx, child) {\r\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\r\n                        value = child.value;\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                return value;\r\n            };\r\n\r\n        qq.each(form.elements, function(idx, el) {\r\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\r\n                notIrrelevantType(el.type) &&\r\n                !ignoreValue(el)) {\r\n\r\n                obj[el.name] = el.value;\r\n            }\r\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\r\n                var value = selectValue(el);\r\n\r\n                if (value !== null) {\r\n                    obj[el.name] = value;\r\n                }\r\n            }\r\n        });\r\n\r\n        return obj;\r\n    }\r\n});\r\n","/*globals qq */\r\nqq.azure = qq.azure || {};\r\nqq.azure.util = qq.azure.util || (function() {\r\n    \"use strict\";\r\n\r\n    return {\r\n        AZURE_PARAM_PREFIX: \"x-ms-meta-\",\r\n\r\n        /** Test if a request header is actually a known Azure parameter. See: https://msdn.microsoft.com/en-us/library/azure/dd179451.aspx\r\n         *\r\n         * @param name Name of the Request Header parameter.\r\n         * @returns {Boolean} Test result.\r\n         */\r\n        _paramNameMatchesAzureParameter: function(name) {\r\n            switch (name) {\r\n                case \"Cache-Control\":\r\n                case \"Content-Disposition\":\r\n                case \"Content-Encoding\":\r\n                case \"Content-MD5\":\r\n                case \"x-ms-blob-content-encoding\":\r\n                case \"x-ms-blob-content-disposition\":\r\n                case \"x-ms-blob-content-md5\":\r\n                case \"x-ms-blob-cache-control\":\r\n                    return true;\r\n                default:\r\n                    return false;\r\n            }\r\n        },\r\n\r\n        /** Create Prefixed request headers which are appropriate for Azure.\r\n         *\r\n         * If the request header is appropriate for Azure (e.g. Cache-Control) then it should be\r\n         * passed along without a metadata prefix. For all other request header parameter names,\r\n         * qq.azure.util.AZURE_PARAM_PREFIX should be prepended.\r\n         *\r\n         * @param name Name of the Request Header parameter to construct a (possibly) prefixed name.\r\n         * @returns {String} A valid Request Header parameter name.\r\n         */\r\n        _getPrefixedParamName: function(name) {\r\n            if (qq.azure.util._paramNameMatchesAzureParameter(name)) {\r\n                return name;\r\n            }\r\n            else {\r\n                return qq.azure.util.AZURE_PARAM_PREFIX + name;\r\n            }\r\n        },\r\n\r\n        getParamsAsHeaders: function(params) {\r\n            var headers = {};\r\n\r\n            qq.each(params, function(name, val) {\r\n                var headerName = qq.azure.util._getPrefixedParamName(name),\r\n                    value = null;\r\n\r\n                if (qq.isFunction(val)) {\r\n                    value = String(val());\r\n                }\r\n                else if (qq.isObject(val)) {\r\n                    qq.extend(headers, qq.azure.util.getParamsAsHeaders(val));\r\n                }\r\n                else {\r\n                    value = String(val);\r\n                }\r\n\r\n                if (value !== null) {\r\n                    if (qq.azure.util._paramNameMatchesAzureParameter(name)) {\r\n                        headers[headerName] = value;\r\n                    } else {\r\n                        headers[headerName] = encodeURIComponent(value);\r\n                    }\r\n                }\r\n            });\r\n\r\n            return headers;\r\n        },\r\n\r\n        parseAzureError: function(responseText, log) {\r\n            var domParser = new DOMParser(),\r\n                responseDoc = domParser.parseFromString(responseText, \"application/xml\"),\r\n                errorTag = responseDoc.getElementsByTagName(\"Error\")[0],\r\n                errorDetails = {},\r\n                codeTag, messageTag;\r\n\r\n            log(\"Received error response: \" + responseText, \"error\");\r\n\r\n            if (errorTag) {\r\n                messageTag = errorTag.getElementsByTagName(\"Message\")[0];\r\n                if (messageTag) {\r\n                    errorDetails.message = messageTag.textContent;\r\n                }\r\n\r\n                codeTag = errorTag.getElementsByTagName(\"Code\")[0];\r\n                if (codeTag) {\r\n                    errorDetails.code = codeTag.textContent;\r\n                }\r\n\r\n                log(\"Parsed Azure error: \" + JSON.stringify(errorDetails), \"error\");\r\n\r\n                return errorDetails;\r\n            }\r\n        }\r\n    };\r\n}());\r\n","/*globals qq*/\r\n/**\r\n * Defines the public API for non-traditional FineUploaderBasic mode.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.nonTraditionalBasePublicApi = {\r\n        setUploadSuccessParams: function(params, id) {\r\n            this._uploadSuccessParamsStore.set(params, id);\r\n        },\r\n        setUploadSuccessEndpoint: function(endpoint, id) {\r\n            this._uploadSuccessEndpointStore.set(endpoint, id);\r\n        }\r\n    };\r\n\r\n    qq.nonTraditionalBasePrivateApi = {\r\n        /**\r\n         * When the upload has completed, if it is successful, send a request to the `successEndpoint` (if defined).\r\n         * This will hold up the call to the `onComplete` callback until we have determined success of the upload\r\n         * according to the local server, if a `successEndpoint` has been defined by the integrator.\r\n         *\r\n         * @param id ID of the completed upload\r\n         * @param name Name of the associated item\r\n         * @param result Object created from the server's parsed JSON response.\r\n         * @param xhr Associated XmlHttpRequest, if this was used to send the request.\r\n         * @returns {boolean || qq.Promise} true/false if success can be determined immediately, otherwise a `qq.Promise`\r\n         * if we need to ask the server.\r\n         * @private\r\n         */\r\n        _onComplete: function(id, name, result, xhr) {\r\n            var success = result.success ? true : false,\r\n                self = this,\r\n                onCompleteArgs = arguments,\r\n                successEndpoint = this._uploadSuccessEndpointStore.get(id),\r\n                successCustomHeaders = this._options.uploadSuccess.customHeaders,\r\n                successMethod = this._options.uploadSuccess.method,\r\n                cors = this._options.cors,\r\n                promise = new qq.Promise(),\r\n                uploadSuccessParams = this._uploadSuccessParamsStore.get(id),\r\n                fileParams = this._paramsStore.get(id),\r\n\r\n                // If we are waiting for confirmation from the local server, and have received it,\r\n                // include properties from the local server response in the `response` parameter\r\n                // sent to the `onComplete` callback, delegate to the parent `_onComplete`, and\r\n                // fulfill the associated promise.\r\n                onSuccessFromServer = function(successRequestResult) {\r\n                    delete self._failedSuccessRequestCallbacks[id];\r\n                    qq.extend(result, successRequestResult);\r\n                    qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\r\n                    promise.success(successRequestResult);\r\n                },\r\n\r\n                // If the upload success request fails, attempt to re-send the success request (via the core retry code).\r\n                // The entire upload may be restarted if the server returns a \"reset\" property with a value of true as well.\r\n                onFailureFromServer = function(successRequestResult) {\r\n                    var callback = submitSuccessRequest;\r\n\r\n                    qq.extend(result, successRequestResult);\r\n\r\n                    if (result && result.reset) {\r\n                        callback = null;\r\n                    }\r\n\r\n                    if (!callback) {\r\n                        delete self._failedSuccessRequestCallbacks[id];\r\n                    }\r\n                    else {\r\n                        self._failedSuccessRequestCallbacks[id] = callback;\r\n                    }\r\n\r\n                    if (!self._onAutoRetry(id, name, result, xhr, callback)) {\r\n                        qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\r\n                        promise.failure(successRequestResult);\r\n                    }\r\n                },\r\n                submitSuccessRequest,\r\n                successAjaxRequester;\r\n\r\n            // Ask the local server if the file sent is ok.\r\n            if (success && successEndpoint) {\r\n                successAjaxRequester = new qq.UploadSuccessAjaxRequester({\r\n                    endpoint: successEndpoint,\r\n                    method: successMethod,\r\n                    customHeaders: successCustomHeaders,\r\n                    cors: cors,\r\n                    log: qq.bind(this.log, this)\r\n                });\r\n\r\n                // combine custom params and default params\r\n                qq.extend(uploadSuccessParams, self._getEndpointSpecificParams(id, result, xhr), true);\r\n\r\n                // include any params associated with the file\r\n                fileParams && qq.extend(uploadSuccessParams, fileParams, true);\r\n\r\n                submitSuccessRequest = qq.bind(function() {\r\n                    successAjaxRequester.sendSuccessRequest(id, uploadSuccessParams)\r\n                        .then(onSuccessFromServer, onFailureFromServer);\r\n                }, self);\r\n\r\n                submitSuccessRequest();\r\n\r\n                return promise;\r\n            }\r\n\r\n            // If we are not asking the local server about the file, just delegate to the parent `_onComplete`.\r\n            return qq.FineUploaderBasic.prototype._onComplete.apply(this, arguments);\r\n        },\r\n\r\n        // If the failure occurred on an upload success request (and a reset was not ordered), try to resend that instead.\r\n        _manualRetry: function(id) {\r\n            var successRequestCallback = this._failedSuccessRequestCallbacks[id];\r\n\r\n            return qq.FineUploaderBasic.prototype._manualRetry.call(this, id, successRequestCallback);\r\n        }\r\n    };\r\n}());\r\n","/*globals qq */\r\n/**\r\n * This defines FineUploaderBasic mode w/ support for uploading to Azure, which provides all the basic\r\n * functionality of Fine Uploader Basic as well as code to handle uploads directly to Azure.\r\n * Some inherited options and API methods have a special meaning in the context of the Azure uploader.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.azure.FineUploaderBasic = function(o) {\r\n        if (!qq.supportedFeatures.ajaxUploading) {\r\n            throw new qq.Error(\"Uploading directly to Azure is not possible in this browser.\");\r\n        }\r\n\r\n        var options = {\r\n            signature: {\r\n                endpoint: null,\r\n\r\n                customHeaders: {}\r\n            },\r\n\r\n            // 'uuid', 'filename', or a function which may be promissory\r\n            blobProperties: {\r\n                name: \"uuid\"\r\n            },\r\n\r\n            uploadSuccess: {\r\n                endpoint: null,\r\n\r\n                method: \"POST\",\r\n\r\n                // In addition to the default params sent by Fine Uploader\r\n                params: {},\r\n\r\n                customHeaders: {}\r\n            },\r\n\r\n            chunking: {\r\n                // If this is increased, Azure may respond with a 413\r\n                partSize: 4000000,\r\n                // Don't chunk files less than this size\r\n                minFileSize: 4000001\r\n            }\r\n        };\r\n\r\n        // Replace any default options with user defined ones\r\n        qq.extend(options, o, true);\r\n\r\n        // Call base module\r\n        qq.FineUploaderBasic.call(this, options);\r\n\r\n        this._uploadSuccessParamsStore = this._createStore(this._options.uploadSuccess.params);\r\n        this._uploadSuccessEndpointStore = this._createStore(this._options.uploadSuccess.endpoint);\r\n\r\n        // This will hold callbacks for failed uploadSuccess requests that will be invoked on retry.\r\n        // Indexed by file ID.\r\n        this._failedSuccessRequestCallbacks = {};\r\n\r\n        // Holds blob names for file representations constructed from a session request.\r\n        this._cannedBlobNames = {};\r\n    };\r\n\r\n    // Inherit basic public & private API methods.\r\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.basePublicApi);\r\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.basePrivateApi);\r\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.nonTraditionalBasePublicApi);\r\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.nonTraditionalBasePrivateApi);\r\n\r\n    // Define public & private API methods for this module.\r\n    qq.extend(qq.azure.FineUploaderBasic.prototype, {\r\n        getBlobName: function(id) {\r\n            /* jshint eqnull:true */\r\n            if (this._cannedBlobNames[id] == null) {\r\n                return this._handler.getThirdPartyFileId(id);\r\n            }\r\n            return this._cannedBlobNames[id];\r\n        },\r\n\r\n        _getEndpointSpecificParams: function(id) {\r\n            return {\r\n                blob: this.getBlobName(id),\r\n                uuid: this.getUuid(id),\r\n                name: this.getName(id),\r\n                container: this._endpointStore.get(id)\r\n            };\r\n        },\r\n\r\n        _createUploadHandler: function() {\r\n            return qq.FineUploaderBasic.prototype._createUploadHandler.call(this,\r\n                {\r\n                    signature: this._options.signature,\r\n                    onGetBlobName: qq.bind(this._determineBlobName, this),\r\n                    deleteBlob: qq.bind(this._deleteBlob, this, true)\r\n                },\r\n                \"azure\");\r\n        },\r\n\r\n        _determineBlobName: function(id) {\r\n            var self = this,\r\n                blobNameOptionValue = this._options.blobProperties.name,\r\n                uuid = this.getUuid(id),\r\n                filename = this.getName(id),\r\n                fileExtension = qq.getExtension(filename),\r\n                blobNameToUse = uuid;\r\n\r\n            if (qq.isString(blobNameOptionValue)) {\r\n                switch (blobNameOptionValue) {\r\n                    case \"uuid\":\r\n                        if (fileExtension !== undefined) {\r\n                            blobNameToUse += \".\" + fileExtension;\r\n                        }\r\n                        return new qq.Promise().success(blobNameToUse);\r\n                    case \"filename\":\r\n                        return new qq.Promise().success(filename);\r\n                    default:\r\n                        return new qq.Promise.failure(\"Invalid blobName option value - \" + blobNameOptionValue);\r\n                }\r\n            }\r\n            else {\r\n                return blobNameOptionValue.call(this, id);\r\n            }\r\n        },\r\n\r\n        _addCannedFile: function(sessionData) {\r\n            var id;\r\n\r\n            /* jshint eqnull:true */\r\n            if (sessionData.blobName == null) {\r\n                throw new qq.Error(\"Did not find blob name property in server session response.  This is required!\");\r\n            }\r\n            else {\r\n                id = qq.FineUploaderBasic.prototype._addCannedFile.apply(this, arguments);\r\n                this._cannedBlobNames[id] = sessionData.blobName;\r\n            }\r\n\r\n            return id;\r\n        },\r\n\r\n        _deleteBlob: function(relatedToCancel, id) {\r\n            var self = this,\r\n                deleteBlobSasUri = {},\r\n                blobUriStore = {\r\n                    get: function(id) {\r\n                        return self._endpointStore.get(id) + \"/\" + self.getBlobName(id);\r\n                    }\r\n                },\r\n                deleteFileEndpointStore = {\r\n                    get: function(id) {\r\n                        return deleteBlobSasUri[id];\r\n                    }\r\n                },\r\n                getSasSuccess = function(id, sasUri) {\r\n                    deleteBlobSasUri[id] = sasUri;\r\n                    deleteBlob.send(id);\r\n                },\r\n                getSasFailure = function(id, reason, xhr) {\r\n                    if (relatedToCancel) {\r\n                        self.log(\"Will cancel upload, but cannot remove uncommitted parts from Azure due to issue retrieving SAS\", \"error\");\r\n                        qq.FineUploaderBasic.prototype._onCancel.call(self, id, self.getName(id));\r\n                    }\r\n                    else {\r\n                        self._onDeleteComplete(id, xhr, true);\r\n                        self._options.callbacks.onDeleteComplete(id, xhr, true);\r\n                    }\r\n                },\r\n                deleteBlob = new qq.azure.DeleteBlob({\r\n                    endpointStore: deleteFileEndpointStore,\r\n                    log: qq.bind(self.log, self),\r\n                    onDelete: function(id) {\r\n                        self._onDelete(id);\r\n                        self._options.callbacks.onDelete(id);\r\n                    },\r\n                    onDeleteComplete: function(id, xhrOrXdr, isError) {\r\n                        delete deleteBlobSasUri[id];\r\n\r\n                        if (isError) {\r\n                            if (relatedToCancel) {\r\n                                self.log(\"Will cancel upload, but failed to remove uncommitted parts from Azure.\", \"error\");\r\n                            }\r\n                            else {\r\n                                qq.azure.util.parseAzureError(xhrOrXdr.responseText, qq.bind(self.log, self));\r\n                            }\r\n                        }\r\n\r\n                        if (relatedToCancel) {\r\n                            qq.FineUploaderBasic.prototype._onCancel.call(self, id, self.getName(id));\r\n                            self.log(\"Deleted uncommitted blob chunks for \" + id);\r\n                        }\r\n                        else {\r\n                            self._onDeleteComplete(id, xhrOrXdr, isError);\r\n                            self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\r\n                        }\r\n                    }\r\n                }),\r\n                getSas = new qq.azure.GetSas({\r\n                    cors: this._options.cors,\r\n                    customHeaders: this._options.signature.customHeaders,\r\n                    endpointStore: {\r\n                        get: function() {\r\n                            return self._options.signature.endpoint;\r\n                        }\r\n                    },\r\n                    restRequestVerb: deleteBlob.method,\r\n                    log: qq.bind(self.log, self)\r\n                });\r\n\r\n            getSas.request(id, blobUriStore.get(id)).then(\r\n                qq.bind(getSasSuccess, self, id),\r\n                qq.bind(getSasFailure, self, id));\r\n        },\r\n\r\n        _createDeleteHandler: function() {\r\n            var self = this;\r\n\r\n            return {\r\n                sendDelete: function(id, uuid) {\r\n                    self._deleteBlob(false, id);\r\n                }\r\n            };\r\n        }\r\n    });\r\n}());\r\n","/*globals qq */\r\n/**\r\n * Upload handler used by the upload to Azure module that depends on File API support, and, therefore, makes use of\r\n * `XMLHttpRequest` level 2 to upload `File`s and `Blob`s directly to Azure Blob Storage containers via the\r\n * associated Azure API.\r\n *\r\n * @param spec Options passed from the base handler\r\n * @param proxy Callbacks & methods used to query for or push out data/changes\r\n */\r\n// TODO l18n for error messages returned to UI\r\nqq.azure.XhrUploadHandler = function(spec, proxy) {\r\n    \"use strict\";\r\n\r\n    var handler = this,\r\n        log = proxy.log,\r\n        cors = spec.cors,\r\n        endpointStore = spec.endpointStore,\r\n        paramsStore = spec.paramsStore,\r\n        signature = spec.signature,\r\n        filenameParam = spec.filenameParam,\r\n        minFileSizeForChunking = spec.chunking.minFileSize,\r\n        deleteBlob = spec.deleteBlob,\r\n        onGetBlobName = spec.onGetBlobName,\r\n        getName = proxy.getName,\r\n        getSize = proxy.getSize,\r\n\r\n        getBlobMetadata = function(id) {\r\n            var params = paramsStore.get(id);\r\n            params[filenameParam] = getName(id);\r\n            return params;\r\n        },\r\n\r\n        api = {\r\n            putBlob: new qq.azure.PutBlob({\r\n                getBlobMetadata: getBlobMetadata,\r\n                log: log\r\n            }),\r\n\r\n            putBlock: new qq.azure.PutBlock({\r\n                log: log\r\n            }),\r\n\r\n            putBlockList: new qq.azure.PutBlockList({\r\n                getBlobMetadata: getBlobMetadata,\r\n                log: log\r\n            }),\r\n\r\n            getSasForPutBlobOrBlock: new qq.azure.GetSas({\r\n                cors: cors,\r\n                customHeaders: signature.customHeaders,\r\n                endpointStore: {\r\n                    get: function() {\r\n                        return signature.endpoint;\r\n                    }\r\n                },\r\n                log: log,\r\n                restRequestVerb: \"PUT\"\r\n            })\r\n        };\r\n\r\n    function combineChunks(id) {\r\n        var promise = new qq.Promise();\r\n\r\n        getSignedUrl(id).then(function(sasUri) {\r\n            var mimeType = handler._getMimeType(id),\r\n                blockIdEntries = handler._getPersistableData(id).blockIdEntries;\r\n\r\n            api.putBlockList.send(id, sasUri, blockIdEntries, mimeType, function(xhr) {\r\n                handler._registerXhr(id, null, xhr, api.putBlockList);\r\n            })\r\n                .then(function(xhr) {\r\n                    log(\"Success combining chunks for id \" + id);\r\n                    promise.success({}, xhr);\r\n                }, function(xhr) {\r\n                    log(\"Attempt to combine chunks failed for id \" + id, \"error\");\r\n                    handleFailure(xhr, promise);\r\n                });\r\n\r\n        },\r\n        promise.failure);\r\n\r\n        return promise;\r\n    }\r\n\r\n    function determineBlobUrl(id) {\r\n        var containerUrl = endpointStore.get(id),\r\n            promise = new qq.Promise(),\r\n            getBlobNameSuccess = function(blobName) {\r\n                handler._setThirdPartyFileId(id, blobName);\r\n                promise.success(containerUrl + \"/\" + blobName);\r\n            },\r\n            getBlobNameFailure = function(reason) {\r\n                promise.failure(reason);\r\n            };\r\n\r\n        onGetBlobName(id).then(getBlobNameSuccess, getBlobNameFailure);\r\n\r\n        return promise;\r\n    }\r\n\r\n    function getSignedUrl(id, optChunkIdx) {\r\n        // We may have multiple SAS requests in progress for the same file, so we must include the chunk idx\r\n        // as part of the ID when communicating with the SAS ajax requester to avoid collisions.\r\n        var getSasId = optChunkIdx == null ? id : id + \".\" + optChunkIdx,\r\n\r\n            promise = new qq.Promise(),\r\n            getSasSuccess = function(sasUri) {\r\n                log(\"GET SAS request succeeded.\");\r\n                promise.success(sasUri);\r\n            },\r\n            getSasFailure = function(reason, getSasXhr) {\r\n                log(\"GET SAS request failed: \" + reason, \"error\");\r\n                promise.failure({error: \"Problem communicating with local server\"}, getSasXhr);\r\n            },\r\n            determineBlobUrlSuccess = function(blobUrl) {\r\n                api.getSasForPutBlobOrBlock.request(getSasId, blobUrl).then(\r\n                    getSasSuccess,\r\n                    getSasFailure\r\n                );\r\n            },\r\n            determineBlobUrlFailure = function(reason) {\r\n                log(qq.format(\"Failed to determine blob name for ID {} - {}\", id, reason), \"error\");\r\n                promise.failure({error: reason});\r\n            };\r\n\r\n        determineBlobUrl(id).then(determineBlobUrlSuccess, determineBlobUrlFailure);\r\n\r\n        return promise;\r\n    }\r\n\r\n    function handleFailure(xhr, promise) {\r\n        var azureError = qq.azure.util.parseAzureError(xhr.responseText, log),\r\n            errorMsg = \"Problem sending file to Azure\";\r\n\r\n        promise.failure({error: errorMsg,\r\n            azureError: azureError && azureError.message,\r\n            reset: xhr.status === 403\r\n        });\r\n    }\r\n\r\n    qq.extend(this, {\r\n        uploadChunk: function(id, chunkIdx) {\r\n            var promise = new qq.Promise();\r\n\r\n            getSignedUrl(id, chunkIdx).then(\r\n                function(sasUri) {\r\n                    var xhr = handler._createXhr(id, chunkIdx),\r\n                    chunkData = handler._getChunkData(id, chunkIdx);\r\n\r\n                    handler._registerProgressHandler(id, chunkIdx, chunkData.size);\r\n                    handler._registerXhr(id, chunkIdx, xhr, api.putBlock);\r\n\r\n                    // We may have multiple put block requests in progress for the same file, so we must include the chunk idx\r\n                    // as part of the ID when communicating with the put block ajax requester to avoid collisions.\r\n                    api.putBlock.upload(id + \".\" + chunkIdx, xhr, sasUri, chunkIdx, chunkData.blob).then(\r\n                        function(blockIdEntry) {\r\n                            if (!handler._getPersistableData(id).blockIdEntries) {\r\n                                handler._getPersistableData(id).blockIdEntries = [];\r\n                            }\r\n\r\n                            handler._getPersistableData(id).blockIdEntries.push(blockIdEntry);\r\n                            log(\"Put Block call succeeded for \" + id);\r\n                            promise.success({}, xhr);\r\n                        },\r\n                        function() {\r\n                            log(qq.format(\"Put Block call failed for ID {} on part {}\", id, chunkIdx), \"error\");\r\n                            handleFailure(xhr, promise);\r\n                        }\r\n                    );\r\n                },\r\n                promise.failure\r\n            );\r\n\r\n            return promise;\r\n        },\r\n\r\n        uploadFile: function(id) {\r\n            var promise = new qq.Promise(),\r\n                fileOrBlob = handler.getFile(id);\r\n\r\n            getSignedUrl(id).then(function(sasUri) {\r\n                var xhr = handler._createXhr(id);\r\n\r\n                handler._registerProgressHandler(id);\r\n\r\n                api.putBlob.upload(id, xhr, sasUri, fileOrBlob).then(\r\n                    function() {\r\n                        log(\"Put Blob call succeeded for \" + id);\r\n                        promise.success({}, xhr);\r\n                    },\r\n                    function() {\r\n                        log(\"Put Blob call failed for \" + id, \"error\");\r\n                        handleFailure(xhr, promise);\r\n                    }\r\n                );\r\n            },\r\n            promise.failure);\r\n\r\n            return promise;\r\n        }\r\n    });\r\n\r\n    qq.extend(this,\r\n        new qq.XhrUploadHandler({\r\n            options: qq.extend({namespace: \"azure\"}, spec),\r\n            proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\r\n        }\r\n    ));\r\n\r\n    qq.override(this, function(super_) {\r\n        return {\r\n            expunge: function(id) {\r\n                var relatedToCancel = handler._wasCanceled(id),\r\n                    chunkingData = handler._getPersistableData(id),\r\n                    blockIdEntries = (chunkingData && chunkingData.blockIdEntries) || [];\r\n\r\n                if (relatedToCancel && blockIdEntries.length > 0) {\r\n                    deleteBlob(id);\r\n                }\r\n\r\n                super_.expunge(id);\r\n            },\r\n\r\n            finalizeChunks: function(id) {\r\n                return combineChunks(id);\r\n            },\r\n\r\n            _shouldChunkThisFile: function(id) {\r\n                var maybePossible = super_._shouldChunkThisFile(id);\r\n                return maybePossible && getSize(id) >= minFileSizeForChunking;\r\n            }\r\n        };\r\n    });\r\n};\r\n","/* globals qq */\r\n/**\r\n * Sends a GET request to the integrator's server, which should return a Shared Access Signature URI used to\r\n * make a specific request on a Blob via the Azure REST API.\r\n */\r\nqq.azure.GetSas = function(o) {\r\n    \"use strict\";\r\n\r\n    var requester,\r\n        options = {\r\n            cors: {\r\n                expected: false,\r\n                sendCredentials: false\r\n            },\r\n            customHeaders: {},\r\n            restRequestVerb: \"PUT\",\r\n            endpointStore: null,\r\n            log: function(str, level) {}\r\n        },\r\n        requestPromises = {};\r\n\r\n    qq.extend(options, o);\r\n\r\n    function sasResponseReceived(id, xhr, isError) {\r\n        var promise = requestPromises[id];\r\n\r\n        if (isError) {\r\n            promise.failure(\"Received response code \" + xhr.status, xhr);\r\n        }\r\n        else {\r\n            if (xhr.responseText.length) {\r\n                promise.success(xhr.responseText);\r\n            }\r\n            else {\r\n                promise.failure(\"Empty response.\", xhr);\r\n            }\r\n        }\r\n\r\n        delete requestPromises[id];\r\n    }\r\n\r\n    requester = qq.extend(this, new qq.AjaxRequester({\r\n        acceptHeader: \"application/json\",\r\n        validMethods: [\"GET\"],\r\n        method: \"GET\",\r\n        successfulResponseCodes: {\r\n            GET: [200]\r\n        },\r\n        contentType: null,\r\n        customHeaders: options.customHeaders,\r\n        endpointStore: options.endpointStore,\r\n        cors: options.cors,\r\n        log: options.log,\r\n        onComplete: sasResponseReceived\r\n    }));\r\n\r\n    qq.extend(this, {\r\n        request: function(id, blobUri) {\r\n            var requestPromise = new qq.Promise(),\r\n                restVerb = options.restRequestVerb;\r\n\r\n            options.log(qq.format(\"Submitting GET SAS request for a {} REST request related to file ID {}.\", restVerb, id));\r\n\r\n            requestPromises[id] = requestPromise;\r\n\r\n            requester.initTransport(id)\r\n                .withParams({\r\n                    bloburi: blobUri,\r\n                    _method: restVerb\r\n                })\r\n                .withCacheBuster()\r\n                .send();\r\n\r\n            return requestPromise;\r\n        }\r\n    });\r\n};\r\n","/*globals qq, XMLHttpRequest*/\r\n/**\r\n * Sends a POST request to the server to notify it of a successful upload to an endpoint.  The server is expected to indicate success\r\n * or failure via the response status.  Specific information about the failure can be passed from the server via an `error`\r\n * property (by default) in an \"application/json\" response.\r\n *\r\n * @param o Options associated with all requests.\r\n * @constructor\r\n */\r\nqq.UploadSuccessAjaxRequester = function(o) {\r\n    \"use strict\";\r\n\r\n    var requester,\r\n        pendingRequests = [],\r\n        options = {\r\n            method: \"POST\",\r\n            endpoint: null,\r\n            maxConnections: 3,\r\n            customHeaders: {},\r\n            paramsStore: {},\r\n            cors: {\r\n                expected: false,\r\n                sendCredentials: false\r\n            },\r\n            log: function(str, level) {}\r\n        };\r\n\r\n    qq.extend(options, o);\r\n\r\n    function handleSuccessResponse(id, xhrOrXdr, isError) {\r\n        var promise = pendingRequests[id],\r\n            responseJson = xhrOrXdr.responseText,\r\n            successIndicator = {success: true},\r\n            failureIndicator = {success: false},\r\n            parsedResponse;\r\n\r\n        delete pendingRequests[id];\r\n\r\n        options.log(qq.format(\"Received the following response body to an upload success request for id {}: {}\", id, responseJson));\r\n\r\n        try {\r\n            parsedResponse = qq.parseJson(responseJson);\r\n\r\n            // If this is a cross-origin request, the server may return a 200 response w/ error or success properties\r\n            // in order to ensure any specific error message is picked up by Fine Uploader for all browsers,\r\n            // since XDomainRequest (used in IE9 and IE8) doesn't give you access to the\r\n            // response body for an \"error\" response.\r\n            if (isError || (parsedResponse && (parsedResponse.error || parsedResponse.success === false))) {\r\n                options.log(\"Upload success request was rejected by the server.\", \"error\");\r\n                promise.failure(qq.extend(parsedResponse, failureIndicator));\r\n            }\r\n            else {\r\n                options.log(\"Upload success was acknowledged by the server.\");\r\n                promise.success(qq.extend(parsedResponse, successIndicator));\r\n            }\r\n        }\r\n        catch (error) {\r\n            // This will be executed if a JSON response is not present.  This is not mandatory, so account for this properly.\r\n            if (isError) {\r\n                options.log(qq.format(\"Your server indicated failure in its upload success request response for id {}!\", id), \"error\");\r\n                promise.failure(failureIndicator);\r\n            }\r\n            else {\r\n                options.log(\"Upload success was acknowledged by the server.\");\r\n                promise.success(successIndicator);\r\n            }\r\n        }\r\n    }\r\n\r\n    requester = qq.extend(this, new qq.AjaxRequester({\r\n        acceptHeader: \"application/json\",\r\n        method: options.method,\r\n        endpointStore: {\r\n            get: function() {\r\n                return options.endpoint;\r\n            }\r\n        },\r\n        paramsStore: options.paramsStore,\r\n        maxConnections: options.maxConnections,\r\n        customHeaders: options.customHeaders,\r\n        log: options.log,\r\n        onComplete: handleSuccessResponse,\r\n        cors: options.cors\r\n    }));\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * Sends a request to the server, notifying it that a recently submitted file was successfully sent.\r\n         *\r\n         * @param id ID of the associated file\r\n         * @param spec `Object` with the properties that correspond to important values that we want to\r\n         * send to the server with this request.\r\n         * @returns {qq.Promise} A promise to be fulfilled when the response has been received and parsed.  The parsed\r\n         * payload of the response will be passed into the `failure` or `success` promise method.\r\n         */\r\n        sendSuccessRequest: function(id, spec) {\r\n            var promise = new qq.Promise();\r\n\r\n            options.log(\"Submitting upload success request/notification for \" + id);\r\n\r\n            requester.initTransport(id)\r\n                .withParams(spec)\r\n                .send();\r\n\r\n            pendingRequests[id] = promise;\r\n\r\n            return promise;\r\n        }\r\n    });\r\n};\r\n","/* globals qq */\r\n/**\r\n * Implements the Delete Blob Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179413.aspx.\r\n */\r\nqq.azure.DeleteBlob = function(o) {\r\n    \"use strict\";\r\n\r\n    var requester,\r\n        method = \"DELETE\",\r\n        options = {\r\n            endpointStore: {},\r\n            onDelete: function(id) {},\r\n            onDeleteComplete: function(id, xhr, isError) {},\r\n            log: function(str, level) {}\r\n        };\r\n\r\n    qq.extend(options, o);\r\n\r\n    requester = qq.extend(this, new qq.AjaxRequester({\r\n        validMethods: [method],\r\n        method: method,\r\n        successfulResponseCodes: (function() {\r\n            var codes = {};\r\n            codes[method] = [202];\r\n            return codes;\r\n        }()),\r\n        contentType: null,\r\n        endpointStore: options.endpointStore,\r\n        allowXRequestedWithAndCacheControl: false,\r\n        cors: {\r\n            expected: true\r\n        },\r\n        log: options.log,\r\n        onSend: options.onDelete,\r\n        onComplete: options.onDeleteComplete\r\n    }));\r\n\r\n    qq.extend(this, {\r\n        method: method,\r\n        send: function(id) {\r\n            options.log(\"Submitting Delete Blob request for \" + id);\r\n\r\n            return requester.initTransport(id)\r\n                .send();\r\n        }\r\n    });\r\n};\r\n","/* globals qq */\r\n/**\r\n * Implements the Put Blob Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179451.aspx.\r\n */\r\nqq.azure.PutBlob = function(o) {\r\n    \"use strict\";\r\n\r\n    var requester,\r\n        method = \"PUT\",\r\n        options = {\r\n            getBlobMetadata: function(id) {},\r\n            log: function(str, level) {}\r\n        },\r\n        endpoints = {},\r\n        promises = {},\r\n        endpointHandler = {\r\n            get: function(id) {\r\n                return endpoints[id];\r\n            }\r\n        };\r\n\r\n    qq.extend(options, o);\r\n\r\n    requester = qq.extend(this, new qq.AjaxRequester({\r\n        validMethods: [method],\r\n        method: method,\r\n        successfulResponseCodes: (function() {\r\n            var codes = {};\r\n            codes[method] = [201];\r\n            return codes;\r\n        }()),\r\n        contentType: null,\r\n        customHeaders: function(id) {\r\n            var params = options.getBlobMetadata(id),\r\n                headers = qq.azure.util.getParamsAsHeaders(params);\r\n\r\n            headers[\"x-ms-blob-type\"] = \"BlockBlob\";\r\n\r\n            return headers;\r\n        },\r\n        endpointStore: endpointHandler,\r\n        allowXRequestedWithAndCacheControl: false,\r\n        cors: {\r\n            expected: true\r\n        },\r\n        log: options.log,\r\n        onComplete: function(id, xhr, isError) {\r\n            var promise = promises[id];\r\n\r\n            delete endpoints[id];\r\n            delete promises[id];\r\n\r\n            if (isError) {\r\n                promise.failure();\r\n            }\r\n            else {\r\n                promise.success();\r\n            }\r\n        }\r\n    }));\r\n\r\n    qq.extend(this, {\r\n        method: method,\r\n        upload: function(id, xhr, url, file) {\r\n            var promise = new qq.Promise();\r\n\r\n            options.log(\"Submitting Put Blob request for \" + id);\r\n\r\n            promises[id] = promise;\r\n            endpoints[id] = url;\r\n\r\n            requester.initTransport(id)\r\n                .withPayload(file)\r\n                .withHeaders({\"Content-Type\": file.type})\r\n                .send(xhr);\r\n\r\n            return promise;\r\n        }\r\n    });\r\n};\r\n","/* globals qq */\r\n/**\r\n * Implements the Put Block Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd135726.aspx.\r\n */\r\nqq.azure.PutBlock = function(o) {\r\n    \"use strict\";\r\n\r\n    var requester,\r\n        method = \"PUT\",\r\n        blockIdEntries = {},\r\n        promises = {},\r\n        options = {\r\n            log: function(str, level) {}\r\n        },\r\n        endpoints = {},\r\n        endpointHandler = {\r\n            get: function(id) {\r\n                return endpoints[id];\r\n            }\r\n        };\r\n\r\n    qq.extend(options, o);\r\n\r\n    requester = qq.extend(this, new qq.AjaxRequester({\r\n        validMethods: [method],\r\n        method: method,\r\n        successfulResponseCodes: (function() {\r\n            var codes = {};\r\n            codes[method] = [201];\r\n            return codes;\r\n        }()),\r\n        contentType: null,\r\n        endpointStore: endpointHandler,\r\n        allowXRequestedWithAndCacheControl: false,\r\n        cors: {\r\n            expected: true\r\n        },\r\n        log: options.log,\r\n        onComplete: function(id, xhr, isError) {\r\n            var promise = promises[id],\r\n                blockIdEntry = blockIdEntries[id];\r\n\r\n            delete endpoints[id];\r\n            delete promises[id];\r\n            delete blockIdEntries[id];\r\n\r\n            if (isError) {\r\n                promise.failure();\r\n            }\r\n            else {\r\n                promise.success(blockIdEntry);\r\n            }\r\n        }\r\n    }));\r\n\r\n    function createBlockId(partNum) {\r\n        var digits = 5,\r\n            zeros = new Array(digits + 1).join(\"0\"),\r\n            paddedPartNum = (zeros + partNum).slice(-digits);\r\n\r\n        return btoa(paddedPartNum);\r\n    }\r\n\r\n    qq.extend(this, {\r\n        method: method,\r\n        upload: function(id, xhr, sasUri, partNum, blob) {\r\n            var promise = new qq.Promise(),\r\n                blockId = createBlockId(partNum);\r\n\r\n            promises[id] = promise;\r\n\r\n            options.log(qq.format(\"Submitting Put Block request for {} = part {}\", id, partNum));\r\n\r\n            endpoints[id] = qq.format(\"{}&comp=block&blockid={}\", sasUri, encodeURIComponent(blockId));\r\n            blockIdEntries[id] = {part: partNum, id: blockId};\r\n\r\n            requester.initTransport(id)\r\n                .withPayload(blob)\r\n                .send(xhr);\r\n\r\n            return promise;\r\n        }\r\n    });\r\n};\r\n","/* globals qq */\r\n/**\r\n * Implements the Put Block List Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179467.aspx.\r\n */\r\nqq.azure.PutBlockList = function(o) {\r\n    \"use strict\";\r\n\r\n    var requester,\r\n        method = \"PUT\",\r\n        promises = {},\r\n        options = {\r\n            getBlobMetadata: function(id) {},\r\n            log: function(str, level) {}\r\n        },\r\n        endpoints = {},\r\n        endpointHandler = {\r\n            get: function(id) {\r\n                return endpoints[id];\r\n            }\r\n        };\r\n\r\n    qq.extend(options, o);\r\n\r\n    requester = qq.extend(this, new qq.AjaxRequester({\r\n        validMethods: [method],\r\n        method: method,\r\n        successfulResponseCodes: (function() {\r\n            var codes = {};\r\n            codes[method] = [201];\r\n            return codes;\r\n        }()),\r\n        customHeaders: function(id) {\r\n            var params = options.getBlobMetadata(id);\r\n\r\n            return qq.azure.util.getParamsAsHeaders(params);\r\n        },\r\n        contentType: \"text/plain\",\r\n        endpointStore: endpointHandler,\r\n        allowXRequestedWithAndCacheControl: false,\r\n        cors: {\r\n            expected: true\r\n        },\r\n        log: options.log,\r\n        onSend: function() {},\r\n        onComplete: function(id, xhr, isError) {\r\n            var promise = promises[id];\r\n\r\n            delete endpoints[id];\r\n            delete promises[id];\r\n\r\n            if (isError) {\r\n                promise.failure(xhr);\r\n            }\r\n            else {\r\n                promise.success(xhr);\r\n            }\r\n\r\n        }\r\n    }));\r\n\r\n    function createRequestBody(blockIdEntries) {\r\n        var doc = document.implementation.createDocument(null, \"BlockList\", null);\r\n\r\n        // If we don't sort the block ID entries by part number, the file will be combined incorrectly by Azure\r\n        blockIdEntries.sort(function(a, b) {\r\n            return a.part - b.part;\r\n        });\r\n\r\n        // Construct an XML document for each pair of etag/part values that correspond to part uploads.\r\n        qq.each(blockIdEntries, function(idx, blockIdEntry) {\r\n            var latestEl = doc.createElement(\"Latest\"),\r\n                latestTextEl = doc.createTextNode(blockIdEntry.id);\r\n\r\n            latestEl.appendChild(latestTextEl);\r\n            qq(doc).children()[0].appendChild(latestEl);\r\n        });\r\n\r\n        // Turn the resulting XML document into a string fit for transport.\r\n        return new XMLSerializer().serializeToString(doc);\r\n    }\r\n\r\n    qq.extend(this, {\r\n        method: method,\r\n        send: function(id, sasUri, blockIdEntries, fileMimeType, registerXhrCallback) {\r\n            var promise = new qq.Promise(),\r\n                blockIdsXml = createRequestBody(blockIdEntries),\r\n                xhr;\r\n\r\n            promises[id] = promise;\r\n\r\n            options.log(qq.format(\"Submitting Put Block List request for {}\", id));\r\n\r\n            endpoints[id] = qq.format(\"{}&comp=blocklist\", sasUri);\r\n\r\n            xhr = requester.initTransport(id)\r\n                .withPayload(blockIdsXml)\r\n                .withHeaders({\"x-ms-blob-content-type\": fileMimeType})\r\n                .send();\r\n            registerXhrCallback(xhr);\r\n\r\n            return promise;\r\n        }\r\n    });\r\n};\r\n","/*globals qq, document, CustomEvent*/\r\nqq.DragAndDrop = function(o) {\r\n    \"use strict\";\r\n\r\n    var options,\r\n        HIDE_ZONES_EVENT_NAME = \"qq-hidezones\",\r\n        HIDE_BEFORE_ENTER_ATTR = \"qq-hide-dropzone\",\r\n        uploadDropZones = [],\r\n        droppedFiles = [],\r\n        disposeSupport = new qq.DisposeSupport();\r\n\r\n    options = {\r\n        dropZoneElements: [],\r\n        allowMultipleItems: true,\r\n        classes: {\r\n            dropActive: null\r\n        },\r\n        callbacks: new qq.DragAndDrop.callbacks()\r\n    };\r\n\r\n    qq.extend(options, o, true);\r\n\r\n    function uploadDroppedFiles(files, uploadDropZone) {\r\n        // We need to convert the `FileList` to an actual `Array` to avoid iteration issues\r\n        var filesAsArray = Array.prototype.slice.call(files);\r\n\r\n        options.callbacks.dropLog(\"Grabbed \" + files.length + \" dropped files.\");\r\n        uploadDropZone.dropDisabled(false);\r\n        options.callbacks.processingDroppedFilesComplete(filesAsArray, uploadDropZone.getElement());\r\n    }\r\n\r\n    function traverseFileTree(entry) {\r\n        var parseEntryPromise = new qq.Promise();\r\n\r\n        if (entry.isFile) {\r\n            entry.file(function(file) {\r\n                var name = entry.name,\r\n                    fullPath = entry.fullPath,\r\n                    indexOfNameInFullPath = fullPath.indexOf(name);\r\n\r\n                // remove file name from full path string\r\n                fullPath = fullPath.substr(0, indexOfNameInFullPath);\r\n\r\n                // remove leading slash in full path string\r\n                if (fullPath.charAt(0) === \"/\") {\r\n                    fullPath = fullPath.substr(1);\r\n                }\r\n\r\n                file.qqPath = fullPath;\r\n                droppedFiles.push(file);\r\n                parseEntryPromise.success();\r\n            },\r\n            function(fileError) {\r\n                options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\r\n                parseEntryPromise.failure();\r\n            });\r\n        }\r\n        else if (entry.isDirectory) {\r\n            getFilesInDirectory(entry).then(\r\n                function allEntriesRead(entries) {\r\n                    var entriesLeft = entries.length;\r\n\r\n                    qq.each(entries, function(idx, entry) {\r\n                        traverseFileTree(entry).done(function() {\r\n                            entriesLeft -= 1;\r\n\r\n                            if (entriesLeft === 0) {\r\n                                parseEntryPromise.success();\r\n                            }\r\n                        });\r\n                    });\r\n\r\n                    if (!entries.length) {\r\n                        parseEntryPromise.success();\r\n                    }\r\n                },\r\n\r\n                function readFailure(fileError) {\r\n                    options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\r\n                    parseEntryPromise.failure();\r\n                }\r\n            );\r\n        }\r\n\r\n        return parseEntryPromise;\r\n    }\r\n\r\n    // Promissory.  Guaranteed to read all files in the root of the passed directory.\r\n    function getFilesInDirectory(entry, reader, accumEntries, existingPromise) {\r\n        var promise = existingPromise || new qq.Promise(),\r\n            dirReader = reader || entry.createReader();\r\n\r\n        dirReader.readEntries(\r\n            function readSuccess(entries) {\r\n                var newEntries = accumEntries ? accumEntries.concat(entries) : entries;\r\n\r\n                if (entries.length) {\r\n                    setTimeout(function() { // prevent stack overflow, however unlikely\r\n                        getFilesInDirectory(entry, dirReader, newEntries, promise);\r\n                    }, 0);\r\n                }\r\n                else {\r\n                    promise.success(newEntries);\r\n                }\r\n            },\r\n\r\n            promise.failure\r\n        );\r\n\r\n        return promise;\r\n    }\r\n\r\n    function handleDataTransfer(dataTransfer, uploadDropZone) {\r\n        var pendingFolderPromises = [],\r\n            handleDataTransferPromise = new qq.Promise();\r\n\r\n        options.callbacks.processingDroppedFiles();\r\n        uploadDropZone.dropDisabled(true);\r\n\r\n        if (dataTransfer.files.length > 1 && !options.allowMultipleItems) {\r\n            options.callbacks.processingDroppedFilesComplete([]);\r\n            options.callbacks.dropError(\"tooManyFilesError\", \"\");\r\n            uploadDropZone.dropDisabled(false);\r\n            handleDataTransferPromise.failure();\r\n        }\r\n        else {\r\n            droppedFiles = [];\r\n\r\n            if (qq.isFolderDropSupported(dataTransfer)) {\r\n                qq.each(dataTransfer.items, function(idx, item) {\r\n                    var entry = item.webkitGetAsEntry();\r\n\r\n                    if (entry) {\r\n                        //due to a bug in Chrome's File System API impl - #149735\r\n                        if (entry.isFile) {\r\n                            droppedFiles.push(item.getAsFile());\r\n                        }\r\n\r\n                        else {\r\n                            pendingFolderPromises.push(traverseFileTree(entry).done(function() {\r\n                                pendingFolderPromises.pop();\r\n                                if (pendingFolderPromises.length === 0) {\r\n                                    handleDataTransferPromise.success();\r\n                                }\r\n                            }));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                droppedFiles = dataTransfer.files;\r\n            }\r\n\r\n            if (pendingFolderPromises.length === 0) {\r\n                handleDataTransferPromise.success();\r\n            }\r\n        }\r\n\r\n        return handleDataTransferPromise;\r\n    }\r\n\r\n    function setupDropzone(dropArea) {\r\n        var dropZone = new qq.UploadDropZone({\r\n            HIDE_ZONES_EVENT_NAME: HIDE_ZONES_EVENT_NAME,\r\n            element: dropArea,\r\n            onEnter: function(e) {\r\n                qq(dropArea).addClass(options.classes.dropActive);\r\n                e.stopPropagation();\r\n            },\r\n            onLeaveNotDescendants: function(e) {\r\n                qq(dropArea).removeClass(options.classes.dropActive);\r\n            },\r\n            onDrop: function(e) {\r\n                handleDataTransfer(e.dataTransfer, dropZone).then(\r\n                    function() {\r\n                        uploadDroppedFiles(droppedFiles, dropZone);\r\n                    },\r\n                    function() {\r\n                        options.callbacks.dropLog(\"Drop event DataTransfer parsing failed.  No files will be uploaded.\", \"error\");\r\n                    }\r\n                );\r\n            }\r\n        });\r\n\r\n        disposeSupport.addDisposer(function() {\r\n            dropZone.dispose();\r\n        });\r\n\r\n        qq(dropArea).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropArea).hide();\r\n\r\n        uploadDropZones.push(dropZone);\r\n\r\n        return dropZone;\r\n    }\r\n\r\n    function isFileDrag(dragEvent) {\r\n        var fileDrag;\r\n\r\n        qq.each(dragEvent.dataTransfer.types, function(key, val) {\r\n            if (val === \"Files\") {\r\n                fileDrag = true;\r\n                return false;\r\n            }\r\n        });\r\n\r\n        return fileDrag;\r\n    }\r\n\r\n    // Attempt to determine when the file has left the document.  It is not always possible to detect this\r\n    // in all cases, but it is generally possible in all browsers, with a few exceptions.\r\n    //\r\n    // Exceptions:\r\n    // * IE10+ & Safari: We can't detect a file leaving the document if the Explorer window housing the file\r\n    //                   overlays the browser window.\r\n    // * IE10+: If the file is dragged out of the window too quickly, IE does not set the expected values of the\r\n    //          event's X & Y properties.\r\n    function leavingDocumentOut(e) {\r\n        if (qq.firefox()) {\r\n            return !e.relatedTarget;\r\n        }\r\n\r\n        if (qq.safari()) {\r\n            return e.x < 0 || e.y < 0;\r\n        }\r\n\r\n        return e.x === 0 && e.y === 0;\r\n    }\r\n\r\n    function setupDragDrop() {\r\n        var dropZones = options.dropZoneElements,\r\n\r\n            maybeHideDropZones = function() {\r\n                setTimeout(function() {\r\n                    qq.each(dropZones, function(idx, dropZone) {\r\n                        qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropZone).hide();\r\n                        qq(dropZone).removeClass(options.classes.dropActive);\r\n                    });\r\n                }, 10);\r\n            };\r\n\r\n        qq.each(dropZones, function(idx, dropZone) {\r\n            var uploadDropZone = setupDropzone(dropZone);\r\n\r\n            // IE <= 9 does not support the File API used for drag+drop uploads\r\n            if (dropZones.length && qq.supportedFeatures.fileDrop) {\r\n                disposeSupport.attach(document, \"dragenter\", function(e) {\r\n                    if (!uploadDropZone.dropDisabled() && isFileDrag(e)) {\r\n                        qq.each(dropZones, function(idx, dropZone) {\r\n                            // We can't apply styles to non-HTMLElements, since they lack the `style` property.\r\n                            // Also, if the drop zone isn't initially hidden, let's not mess with `style.display`.\r\n                            if (dropZone instanceof HTMLElement &&\r\n                                qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR)) {\r\n\r\n                                qq(dropZone).css({display: \"block\"});\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        disposeSupport.attach(document, \"dragleave\", function(e) {\r\n            if (leavingDocumentOut(e)) {\r\n                maybeHideDropZones();\r\n            }\r\n        });\r\n\r\n        // Just in case we were not able to detect when a dragged file has left the document,\r\n        // hide all relevant drop zones the next time the mouse enters the document.\r\n        // Note that mouse events such as this one are not fired during drag operations.\r\n        disposeSupport.attach(qq(document).children()[0], \"mouseenter\", function(e) {\r\n            maybeHideDropZones();\r\n        });\r\n\r\n        disposeSupport.attach(document, \"drop\", function(e) {\r\n            e.preventDefault();\r\n            maybeHideDropZones();\r\n        });\r\n\r\n        disposeSupport.attach(document, HIDE_ZONES_EVENT_NAME, maybeHideDropZones);\r\n    }\r\n\r\n    setupDragDrop();\r\n\r\n    qq.extend(this, {\r\n        setupExtraDropzone: function(element) {\r\n            options.dropZoneElements.push(element);\r\n            setupDropzone(element);\r\n        },\r\n\r\n        removeDropzone: function(element) {\r\n            var i,\r\n                dzs = options.dropZoneElements;\r\n\r\n            for (i in dzs) {\r\n                if (dzs[i] === element) {\r\n                    return dzs.splice(i, 1);\r\n                }\r\n            }\r\n        },\r\n\r\n        dispose: function() {\r\n            disposeSupport.dispose();\r\n            qq.each(uploadDropZones, function(idx, dropZone) {\r\n                dropZone.dispose();\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nqq.DragAndDrop.callbacks = function() {\r\n    \"use strict\";\r\n\r\n    return {\r\n        processingDroppedFiles: function() {},\r\n        processingDroppedFilesComplete: function(files, targetEl) {},\r\n        dropError: function(code, errorSpecifics) {\r\n            qq.log(\"Drag & drop error code '\" + code + \" with these specifics: '\" + errorSpecifics + \"'\", \"error\");\r\n        },\r\n        dropLog: function(message, level) {\r\n            qq.log(message, level);\r\n        }\r\n    };\r\n};\r\n\r\nqq.UploadDropZone = function(o) {\r\n    \"use strict\";\r\n\r\n    var disposeSupport = new qq.DisposeSupport(),\r\n        options, element, preventDrop, dropOutsideDisabled;\r\n\r\n    options = {\r\n        element: null,\r\n        onEnter: function(e) {},\r\n        onLeave: function(e) {},\r\n        // is not fired when leaving element by hovering descendants\r\n        onLeaveNotDescendants: function(e) {},\r\n        onDrop: function(e) {}\r\n    };\r\n\r\n    qq.extend(options, o);\r\n    element = options.element;\r\n\r\n    function dragoverShouldBeCanceled() {\r\n        return qq.safari() || (qq.firefox() && qq.windows());\r\n    }\r\n\r\n    function disableDropOutside(e) {\r\n        // run only once for all instances\r\n        if (!dropOutsideDisabled) {\r\n\r\n            // for these cases we need to catch onDrop to reset dropArea\r\n            if (dragoverShouldBeCanceled) {\r\n                disposeSupport.attach(document, \"dragover\", function(e) {\r\n                    e.preventDefault();\r\n                });\r\n            } else {\r\n                disposeSupport.attach(document, \"dragover\", function(e) {\r\n                    if (e.dataTransfer) {\r\n                        e.dataTransfer.dropEffect = \"none\";\r\n                        e.preventDefault();\r\n                    }\r\n                });\r\n            }\r\n\r\n            dropOutsideDisabled = true;\r\n        }\r\n    }\r\n\r\n    function isValidFileDrag(e) {\r\n        // e.dataTransfer currently causing IE errors\r\n        // IE9 does NOT support file API, so drag-and-drop is not possible\r\n        if (!qq.supportedFeatures.fileDrop) {\r\n            return false;\r\n        }\r\n\r\n        var effectTest, dt = e.dataTransfer,\r\n        // do not check dt.types.contains in webkit, because it crashes safari 4\r\n        isSafari = qq.safari();\r\n\r\n        // dt.effectAllowed is none in Safari 5\r\n        // dt.types.contains check is for firefox\r\n\r\n        // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\r\n        // the filesystem\r\n        effectTest = qq.ie() && qq.supportedFeatures.fileDrop ? true : dt.effectAllowed !== \"none\";\r\n        return dt && effectTest && (dt.files || (!isSafari && dt.types.contains && dt.types.contains(\"Files\")));\r\n    }\r\n\r\n    function isOrSetDropDisabled(isDisabled) {\r\n        if (isDisabled !== undefined) {\r\n            preventDrop = isDisabled;\r\n        }\r\n        return preventDrop;\r\n    }\r\n\r\n    function triggerHidezonesEvent() {\r\n        var hideZonesEvent;\r\n\r\n        function triggerUsingOldApi() {\r\n            hideZonesEvent = document.createEvent(\"Event\");\r\n            hideZonesEvent.initEvent(options.HIDE_ZONES_EVENT_NAME, true, true);\r\n        }\r\n\r\n        if (window.CustomEvent) {\r\n            try {\r\n                hideZonesEvent = new CustomEvent(options.HIDE_ZONES_EVENT_NAME);\r\n            }\r\n            catch (err) {\r\n                triggerUsingOldApi();\r\n            }\r\n        }\r\n        else {\r\n            triggerUsingOldApi();\r\n        }\r\n\r\n        document.dispatchEvent(hideZonesEvent);\r\n    }\r\n\r\n    function attachEvents() {\r\n        disposeSupport.attach(element, \"dragover\", function(e) {\r\n            if (!isValidFileDrag(e)) {\r\n                return;\r\n            }\r\n\r\n            // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\r\n            // the filesystem\r\n            var effect = qq.ie() && qq.supportedFeatures.fileDrop ? null : e.dataTransfer.effectAllowed;\r\n            if (effect === \"move\" || effect === \"linkMove\") {\r\n                e.dataTransfer.dropEffect = \"move\"; // for FF (only move allowed)\r\n            } else {\r\n                e.dataTransfer.dropEffect = \"copy\"; // for Chrome\r\n            }\r\n\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n        });\r\n\r\n        disposeSupport.attach(element, \"dragenter\", function(e) {\r\n            if (!isOrSetDropDisabled()) {\r\n                if (!isValidFileDrag(e)) {\r\n                    return;\r\n                }\r\n                options.onEnter(e);\r\n            }\r\n        });\r\n\r\n        disposeSupport.attach(element, \"dragleave\", function(e) {\r\n            if (!isValidFileDrag(e)) {\r\n                return;\r\n            }\r\n\r\n            options.onLeave(e);\r\n\r\n            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);\r\n            // do not fire when moving a mouse over a descendant\r\n            if (qq(this).contains(relatedTarget)) {\r\n                return;\r\n            }\r\n\r\n            options.onLeaveNotDescendants(e);\r\n        });\r\n\r\n        disposeSupport.attach(element, \"drop\", function(e) {\r\n            if (!isOrSetDropDisabled()) {\r\n                if (!isValidFileDrag(e)) {\r\n                    return;\r\n                }\r\n\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                options.onDrop(e);\r\n\r\n                triggerHidezonesEvent();\r\n            }\r\n        });\r\n    }\r\n\r\n    disableDropOutside();\r\n    attachEvents();\r\n\r\n    qq.extend(this, {\r\n        dropDisabled: function(isDisabled) {\r\n            return isOrSetDropDisabled(isDisabled);\r\n        },\r\n\r\n        dispose: function() {\r\n            disposeSupport.dispose();\r\n        },\r\n\r\n        getElement: function() {\r\n            return element;\r\n        }\r\n    });\r\n};\r\n","/*globals qq */\r\n/**\r\n * Defines the public API for FineUploader mode.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.uiPublicApi = {\r\n        addInitialFiles: function(cannedFileList) {\r\n            this._parent.prototype.addInitialFiles.apply(this, arguments);\r\n            this._templating.addCacheToDom();\r\n        },\r\n\r\n        clearStoredFiles: function() {\r\n            this._parent.prototype.clearStoredFiles.apply(this, arguments);\r\n            this._templating.clearFiles();\r\n        },\r\n\r\n        addExtraDropzone: function(element) {\r\n            this._dnd && this._dnd.setupExtraDropzone(element);\r\n        },\r\n\r\n        removeExtraDropzone: function(element) {\r\n            if (this._dnd) {\r\n                return this._dnd.removeDropzone(element);\r\n            }\r\n        },\r\n\r\n        getItemByFileId: function(id) {\r\n            if (!this._templating.isHiddenForever(id)) {\r\n                return this._templating.getFileContainer(id);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            this._parent.prototype.reset.apply(this, arguments);\r\n            this._templating.reset();\r\n\r\n            if (!this._options.button && this._templating.getButton()) {\r\n                this._defaultButtonId = this._createUploadButton({\r\n                    element: this._templating.getButton(),\r\n                    title: this._options.text.fileInputTitle\r\n                }).getButtonId();\r\n            }\r\n\r\n            if (this._dnd) {\r\n                this._dnd.dispose();\r\n                this._dnd = this._setupDragAndDrop();\r\n            }\r\n\r\n            this._totalFilesInBatch = 0;\r\n            this._filesInBatchAddedToUi = 0;\r\n\r\n            this._setupClickAndEditEventHandlers();\r\n        },\r\n\r\n        setName: function(id, newName) {\r\n            var formattedFilename = this._options.formatFileName(newName);\r\n\r\n            this._parent.prototype.setName.apply(this, arguments);\r\n            this._templating.updateFilename(id, formattedFilename);\r\n        },\r\n\r\n        pauseUpload: function(id) {\r\n            var paused = this._parent.prototype.pauseUpload.apply(this, arguments);\r\n\r\n            paused && this._templating.uploadPaused(id);\r\n            return paused;\r\n        },\r\n\r\n        continueUpload: function(id) {\r\n            var continued = this._parent.prototype.continueUpload.apply(this, arguments);\r\n\r\n            continued && this._templating.uploadContinued(id);\r\n            return continued;\r\n        },\r\n\r\n        getId: function(fileContainerOrChildEl) {\r\n            return this._templating.getFileId(fileContainerOrChildEl);\r\n        },\r\n\r\n        getDropTarget: function(fileId) {\r\n            var file = this.getFile(fileId);\r\n\r\n            return file.qqDropTarget;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Defines the private (internal) API for FineUploader mode.\r\n     */\r\n    qq.uiPrivateApi = {\r\n        _getButton: function(buttonId) {\r\n            var button = this._parent.prototype._getButton.apply(this, arguments);\r\n\r\n            if (!button) {\r\n                if (buttonId === this._defaultButtonId) {\r\n                    button = this._templating.getButton();\r\n                }\r\n            }\r\n\r\n            return button;\r\n        },\r\n\r\n        _removeFileItem: function(fileId) {\r\n            this._templating.removeFile(fileId);\r\n        },\r\n\r\n        _setupClickAndEditEventHandlers: function() {\r\n            this._fileButtonsClickHandler = qq.FileButtonsClickHandler && this._bindFileButtonsClickEvent();\r\n\r\n            // A better approach would be to check specifically for focusin event support by querying the DOM API,\r\n            // but the DOMFocusIn event is not exposed as a property, so we have to resort to UA string sniffing.\r\n            this._focusinEventSupported = !qq.firefox();\r\n\r\n            if (this._isEditFilenameEnabled())\r\n            {\r\n                this._filenameClickHandler = this._bindFilenameClickEvent();\r\n                this._filenameInputFocusInHandler = this._bindFilenameInputFocusInEvent();\r\n                this._filenameInputFocusHandler = this._bindFilenameInputFocusEvent();\r\n            }\r\n        },\r\n\r\n        _setupDragAndDrop: function() {\r\n            var self = this,\r\n                dropZoneElements = this._options.dragAndDrop.extraDropzones,\r\n                templating = this._templating,\r\n                defaultDropZone = templating.getDropZone();\r\n\r\n            defaultDropZone && dropZoneElements.push(defaultDropZone);\r\n\r\n            return new qq.DragAndDrop({\r\n                dropZoneElements: dropZoneElements,\r\n                allowMultipleItems: this._options.multiple,\r\n                classes: {\r\n                    dropActive: this._options.classes.dropActive\r\n                },\r\n                callbacks: {\r\n                    processingDroppedFiles: function() {\r\n                        templating.showDropProcessing();\r\n                    },\r\n                    processingDroppedFilesComplete: function(files, targetEl) {\r\n                        templating.hideDropProcessing();\r\n\r\n                        qq.each(files, function(idx, file) {\r\n                            file.qqDropTarget = targetEl;\r\n                        });\r\n\r\n                        if (files.length) {\r\n                            self.addFiles(files, null, null);\r\n                        }\r\n                    },\r\n                    dropError: function(code, errorData) {\r\n                        self._itemError(code, errorData);\r\n                    },\r\n                    dropLog: function(message, level) {\r\n                        self.log(message, level);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        _bindFileButtonsClickEvent: function() {\r\n            var self = this;\r\n\r\n            return new qq.FileButtonsClickHandler({\r\n                templating: this._templating,\r\n\r\n                log: function(message, lvl) {\r\n                    self.log(message, lvl);\r\n                },\r\n\r\n                onDeleteFile: function(fileId) {\r\n                    self.deleteFile(fileId);\r\n                },\r\n\r\n                onCancel: function(fileId) {\r\n                    self.cancel(fileId);\r\n                },\r\n\r\n                onRetry: function(fileId) {\r\n                    self.retry(fileId);\r\n                },\r\n\r\n                onPause: function(fileId) {\r\n                    self.pauseUpload(fileId);\r\n                },\r\n\r\n                onContinue: function(fileId) {\r\n                    self.continueUpload(fileId);\r\n                },\r\n\r\n                onGetName: function(fileId) {\r\n                    return self.getName(fileId);\r\n                }\r\n            });\r\n        },\r\n\r\n        _isEditFilenameEnabled: function() {\r\n            /*jshint -W014 */\r\n            return this._templating.isEditFilenamePossible()\r\n                && !this._options.autoUpload\r\n                && qq.FilenameClickHandler\r\n                && qq.FilenameInputFocusHandler\r\n                && qq.FilenameInputFocusHandler;\r\n        },\r\n\r\n        _filenameEditHandler: function() {\r\n            var self = this,\r\n                templating = this._templating;\r\n\r\n            return {\r\n                templating: templating,\r\n                log: function(message, lvl) {\r\n                    self.log(message, lvl);\r\n                },\r\n                onGetUploadStatus: function(fileId) {\r\n                    return self.getUploads({id: fileId}).status;\r\n                },\r\n                onGetName: function(fileId) {\r\n                    return self.getName(fileId);\r\n                },\r\n                onSetName: function(id, newName) {\r\n                    self.setName(id, newName);\r\n                },\r\n                onEditingStatusChange: function(id, isEditing) {\r\n                    var qqInput = qq(templating.getEditInput(id)),\r\n                        qqFileContainer = qq(templating.getFileContainer(id));\r\n\r\n                    if (isEditing) {\r\n                        qqInput.addClass(\"qq-editing\");\r\n                        templating.hideFilename(id);\r\n                        templating.hideEditIcon(id);\r\n                    }\r\n                    else {\r\n                        qqInput.removeClass(\"qq-editing\");\r\n                        templating.showFilename(id);\r\n                        templating.showEditIcon(id);\r\n                    }\r\n\r\n                    // Force IE8 and older to repaint\r\n                    qqFileContainer.addClass(\"qq-temp\").removeClass(\"qq-temp\");\r\n                }\r\n            };\r\n        },\r\n\r\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\r\n            this._parent.prototype._onUploadStatusChange.apply(this, arguments);\r\n\r\n            if (this._isEditFilenameEnabled()) {\r\n                // Status for a file exists before it has been added to the DOM, so we must be careful here.\r\n                if (this._templating.getFileContainer(id) && newStatus !== qq.status.SUBMITTED) {\r\n                    this._templating.markFilenameEditable(id);\r\n                    this._templating.hideEditIcon(id);\r\n                }\r\n            }\r\n\r\n            if (oldStatus === qq.status.UPLOAD_RETRYING && newStatus === qq.status.UPLOADING) {\r\n                this._templating.hideRetry(id);\r\n                this._templating.setStatusText(id);\r\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.retrying);\r\n            }\r\n            else if (newStatus === qq.status.UPLOAD_FAILED) {\r\n                this._templating.hidePause(id);\r\n            }\r\n        },\r\n\r\n        _bindFilenameInputFocusInEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameInputFocusInHandler(spec);\r\n        },\r\n\r\n        _bindFilenameInputFocusEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameInputFocusHandler(spec);\r\n        },\r\n\r\n        _bindFilenameClickEvent: function() {\r\n            var spec = qq.extend({}, this._filenameEditHandler());\r\n\r\n            return new qq.FilenameClickHandler(spec);\r\n        },\r\n\r\n        _storeForLater: function(id) {\r\n            this._parent.prototype._storeForLater.apply(this, arguments);\r\n            this._templating.hideSpinner(id);\r\n        },\r\n\r\n        _onAllComplete: function(successful, failed) {\r\n            this._parent.prototype._onAllComplete.apply(this, arguments);\r\n            this._templating.resetTotalProgress();\r\n        },\r\n\r\n        _onSubmit: function(id, name) {\r\n            var file = this.getFile(id);\r\n\r\n            if (file && file.qqPath && this._options.dragAndDrop.reportDirectoryPaths) {\r\n                this._paramsStore.addReadOnly(id, {\r\n                    qqpath: file.qqPath\r\n                });\r\n            }\r\n\r\n            this._parent.prototype._onSubmit.apply(this, arguments);\r\n            this._addToList(id, name);\r\n        },\r\n\r\n        // The file item has been added to the DOM.\r\n        _onSubmitted: function(id) {\r\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\r\n            if (this._isEditFilenameEnabled()) {\r\n                this._templating.markFilenameEditable(id);\r\n                this._templating.showEditIcon(id);\r\n\r\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\r\n                if (!this._focusinEventSupported) {\r\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\r\n                }\r\n            }\r\n        },\r\n\r\n        // Update the progress bar & percentage as the file is uploaded\r\n        _onProgress: function(id, name, loaded, total) {\r\n            this._parent.prototype._onProgress.apply(this, arguments);\r\n\r\n            this._templating.updateProgress(id, loaded, total);\r\n\r\n            if (total === 0 || Math.round(loaded / total * 100) === 100) {\r\n                this._templating.hideCancel(id);\r\n                this._templating.hidePause(id);\r\n                this._templating.hideProgress(id);\r\n                this._templating.setStatusText(id, this._options.text.waitingForResponse);\r\n\r\n                // If ~last byte was sent, display total file size\r\n                this._displayFileSize(id);\r\n            }\r\n            else {\r\n                // If still uploading, display percentage - total size is actually the total request(s) size\r\n                this._displayFileSize(id, loaded, total);\r\n            }\r\n        },\r\n\r\n        _onTotalProgress: function(loaded, total) {\r\n            this._parent.prototype._onTotalProgress.apply(this, arguments);\r\n            this._templating.updateTotalProgress(loaded, total);\r\n        },\r\n\r\n        _onComplete: function(id, name, result, xhr) {\r\n            var parentRetVal = this._parent.prototype._onComplete.apply(this, arguments),\r\n                templating = this._templating,\r\n                fileContainer = templating.getFileContainer(id),\r\n                self = this;\r\n\r\n            function completeUpload(result) {\r\n                // If this file is not represented in the templating module, perhaps it was hidden intentionally.\r\n                // If so, don't perform any UI-related tasks related to this file.\r\n                if (!fileContainer) {\r\n                    return;\r\n                }\r\n\r\n                templating.setStatusText(id);\r\n\r\n                qq(fileContainer).removeClass(self._classes.retrying);\r\n                templating.hideProgress(id);\r\n\r\n                if (self.getUploads({id: id}).status !== qq.status.UPLOAD_FAILED) {\r\n                    templating.hideCancel(id);\r\n                }\r\n                templating.hideSpinner(id);\r\n\r\n                if (result.success) {\r\n                    self._markFileAsSuccessful(id);\r\n                }\r\n                else {\r\n                    qq(fileContainer).addClass(self._classes.fail);\r\n                    templating.showCancel(id);\r\n\r\n                    if (templating.isRetryPossible() && !self._preventRetries[id]) {\r\n                        qq(fileContainer).addClass(self._classes.retryable);\r\n                        templating.showRetry(id);\r\n                    }\r\n                    self._controlFailureTextDisplay(id, result);\r\n                }\r\n            }\r\n\r\n            // The parent may need to perform some async operation before we can accurately determine the status of the upload.\r\n            if (parentRetVal instanceof qq.Promise) {\r\n                parentRetVal.done(function(newResult) {\r\n                    completeUpload(newResult);\r\n                });\r\n\r\n            }\r\n            else {\r\n                completeUpload(result);\r\n            }\r\n\r\n            return parentRetVal;\r\n        },\r\n\r\n        _markFileAsSuccessful: function(id) {\r\n            var templating = this._templating;\r\n\r\n            if (this._isDeletePossible()) {\r\n                templating.showDeleteButton(id);\r\n            }\r\n\r\n            qq(templating.getFileContainer(id)).addClass(this._classes.success);\r\n\r\n            this._maybeUpdateThumbnail(id);\r\n        },\r\n\r\n        _onUploadPrep: function(id) {\r\n            this._parent.prototype._onUploadPrep.apply(this, arguments);\r\n            this._templating.showSpinner(id);\r\n        },\r\n\r\n        _onUpload: function(id, name) {\r\n            var parentRetVal = this._parent.prototype._onUpload.apply(this, arguments);\r\n\r\n            this._templating.showSpinner(id);\r\n\r\n            return parentRetVal;\r\n        },\r\n\r\n        _onUploadChunk: function(id, chunkData) {\r\n            this._parent.prototype._onUploadChunk.apply(this, arguments);\r\n\r\n            // Only display the pause button if we have finished uploading at least one chunk\r\n            // & this file can be resumed\r\n            if (chunkData.partIndex > 0 && this._handler.isResumable(id)) {\r\n                this._templating.allowPause(id);\r\n            }\r\n        },\r\n\r\n        _onCancel: function(id, name) {\r\n            this._parent.prototype._onCancel.apply(this, arguments);\r\n            this._removeFileItem(id);\r\n\r\n            if (this._getNotFinished() === 0) {\r\n                this._templating.resetTotalProgress();\r\n            }\r\n        },\r\n\r\n        _onBeforeAutoRetry: function(id) {\r\n            var retryNumForDisplay, maxAuto, retryNote;\r\n\r\n            this._parent.prototype._onBeforeAutoRetry.apply(this, arguments);\r\n\r\n            this._showCancelLink(id);\r\n\r\n            if (this._options.retry.showAutoRetryNote) {\r\n                retryNumForDisplay = this._autoRetries[id];\r\n                maxAuto = this._options.retry.maxAutoAttempts;\r\n\r\n                retryNote = this._options.retry.autoRetryNote.replace(/\\{retryNum\\}/g, retryNumForDisplay);\r\n                retryNote = retryNote.replace(/\\{maxAuto\\}/g, maxAuto);\r\n\r\n                this._templating.setStatusText(id, retryNote);\r\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retrying);\r\n            }\r\n        },\r\n\r\n        //return false if we should not attempt the requested retry\r\n        _onBeforeManualRetry: function(id) {\r\n            if (this._parent.prototype._onBeforeManualRetry.apply(this, arguments)) {\r\n                this._templating.resetProgress(id);\r\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.fail);\r\n                this._templating.setStatusText(id);\r\n                this._templating.showSpinner(id);\r\n                this._showCancelLink(id);\r\n                return true;\r\n            }\r\n            else {\r\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retryable);\r\n                this._templating.showRetry(id);\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onSubmitDelete: function(id) {\r\n            var onSuccessCallback = qq.bind(this._onSubmitDeleteSuccess, this);\r\n\r\n            this._parent.prototype._onSubmitDelete.call(this, id, onSuccessCallback);\r\n        },\r\n\r\n        _onSubmitDeleteSuccess: function(id, uuid, additionalMandatedParams) {\r\n            if (this._options.deleteFile.forceConfirm) {\r\n                this._showDeleteConfirm.apply(this, arguments);\r\n            }\r\n            else {\r\n                this._sendDeleteRequest.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        _onDeleteComplete: function(id, xhr, isError) {\r\n            this._parent.prototype._onDeleteComplete.apply(this, arguments);\r\n\r\n            this._templating.hideSpinner(id);\r\n\r\n            if (isError) {\r\n                this._templating.setStatusText(id, this._options.deleteFile.deletingFailedText);\r\n                this._templating.showDeleteButton(id);\r\n            }\r\n            else {\r\n                this._removeFileItem(id);\r\n            }\r\n        },\r\n\r\n        _sendDeleteRequest: function(id, uuid, additionalMandatedParams) {\r\n            this._templating.hideDeleteButton(id);\r\n            this._templating.showSpinner(id);\r\n            this._templating.setStatusText(id, this._options.deleteFile.deletingStatusText);\r\n            this._deleteHandler.sendDelete.apply(this, arguments);\r\n        },\r\n\r\n        _showDeleteConfirm: function(id, uuid, mandatedParams) {\r\n            /*jshint -W004 */\r\n            var fileName = this.getName(id),\r\n                confirmMessage = this._options.deleteFile.confirmMessage.replace(/\\{filename\\}/g, fileName),\r\n                uuid = this.getUuid(id),\r\n                deleteRequestArgs = arguments,\r\n                self = this,\r\n                retVal;\r\n\r\n            retVal = this._options.showConfirm(confirmMessage);\r\n\r\n            if (qq.isGenericPromise(retVal)) {\r\n                retVal.then(function() {\r\n                    self._sendDeleteRequest.apply(self, deleteRequestArgs);\r\n                });\r\n            }\r\n            else if (retVal !== false) {\r\n                self._sendDeleteRequest.apply(self, deleteRequestArgs);\r\n            }\r\n        },\r\n\r\n        _addToList: function(id, name, canned) {\r\n            var prependData,\r\n                prependIndex = 0,\r\n                dontDisplay = this._handler.isProxied(id) && this._options.scaling.hideScaled,\r\n                record;\r\n\r\n            if (this._options.display.prependFiles) {\r\n                if (this._totalFilesInBatch > 1 && this._filesInBatchAddedToUi > 0) {\r\n                    prependIndex = this._filesInBatchAddedToUi - 1;\r\n                }\r\n\r\n                prependData = {\r\n                    index: prependIndex\r\n                };\r\n            }\r\n\r\n            if (!canned) {\r\n                if (this._options.disableCancelForFormUploads && !qq.supportedFeatures.ajaxUploading) {\r\n                    this._templating.disableCancel();\r\n                }\r\n\r\n                // Cancel all existing (previous) files and clear the list if this file is not part of\r\n                // a scaled file group that has already been accepted, or if this file is not part of\r\n                // a scaled file group at all.\r\n                if (!this._options.multiple) {\r\n                    record = this.getUploads({id: id});\r\n\r\n                    this._handledProxyGroup = this._handledProxyGroup || record.proxyGroupId;\r\n\r\n                    if (record.proxyGroupId !== this._handledProxyGroup || !record.proxyGroupId) {\r\n                        this._handler.cancelAll();\r\n                        this._clearList();\r\n                        this._handledProxyGroup = null;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (canned) {\r\n                this._templating.addFileToCache(id, this._options.formatFileName(name), prependData, dontDisplay);\r\n                this._templating.updateThumbnail(id, this._thumbnailUrls[id], true, this._options.thumbnails.customResizer);\r\n            }\r\n            else {\r\n                this._templating.addFile(id, this._options.formatFileName(name), prependData, dontDisplay);\r\n                this._templating.generatePreview(id, this.getFile(id), this._options.thumbnails.customResizer);\r\n            }\r\n\r\n            this._filesInBatchAddedToUi += 1;\r\n\r\n            if (canned ||\r\n                (this._options.display.fileSizeOnSubmit && qq.supportedFeatures.ajaxUploading)) {\r\n\r\n                this._displayFileSize(id);\r\n            }\r\n        },\r\n\r\n        _clearList: function() {\r\n            this._templating.clearFiles();\r\n            this.clearStoredFiles();\r\n        },\r\n\r\n        _displayFileSize: function(id, loadedSize, totalSize) {\r\n            var size = this.getSize(id),\r\n                sizeForDisplay = this._formatSize(size);\r\n\r\n            if (size >= 0) {\r\n                if (loadedSize !== undefined && totalSize !== undefined) {\r\n                    sizeForDisplay = this._formatProgress(loadedSize, totalSize);\r\n                }\r\n\r\n                this._templating.updateSize(id, sizeForDisplay);\r\n            }\r\n        },\r\n\r\n        _formatProgress: function(uploadedSize, totalSize) {\r\n            var message = this._options.text.formatProgress;\r\n            function r(name, replacement) { message = message.replace(name, replacement); }\r\n\r\n            r(\"{percent}\", Math.round(uploadedSize / totalSize * 100));\r\n            r(\"{total_size}\", this._formatSize(totalSize));\r\n            return message;\r\n        },\r\n\r\n        _controlFailureTextDisplay: function(id, response) {\r\n            var mode, responseProperty, failureReason;\r\n\r\n            mode = this._options.failedUploadTextDisplay.mode;\r\n            responseProperty = this._options.failedUploadTextDisplay.responseProperty;\r\n\r\n            if (mode === \"custom\") {\r\n                failureReason = response[responseProperty];\r\n                if (!failureReason) {\r\n                    failureReason = this._options.text.failUpload;\r\n                }\r\n\r\n                this._templating.setStatusText(id, failureReason);\r\n\r\n                if (this._options.failedUploadTextDisplay.enableTooltip) {\r\n                    this._showTooltip(id, failureReason);\r\n                }\r\n            }\r\n            else if (mode === \"default\") {\r\n                this._templating.setStatusText(id, this._options.text.failUpload);\r\n            }\r\n            else if (mode !== \"none\") {\r\n                this.log(\"failedUploadTextDisplay.mode value of '\" + mode + \"' is not valid\", \"warn\");\r\n            }\r\n        },\r\n\r\n        _showTooltip: function(id, text) {\r\n            this._templating.getFileContainer(id).title = text;\r\n        },\r\n\r\n        _showCancelLink: function(id) {\r\n            if (!this._options.disableCancelForFormUploads || qq.supportedFeatures.ajaxUploading) {\r\n                this._templating.showCancel(id);\r\n            }\r\n        },\r\n\r\n        _itemError: function(code, name, item) {\r\n            var message = this._parent.prototype._itemError.apply(this, arguments);\r\n            this._options.showMessage(message);\r\n        },\r\n\r\n        _batchError: function(message) {\r\n            this._parent.prototype._batchError.apply(this, arguments);\r\n            this._options.showMessage(message);\r\n        },\r\n\r\n        _setupPastePrompt: function() {\r\n            var self = this;\r\n\r\n            this._options.callbacks.onPasteReceived = function() {\r\n                var message = self._options.paste.namePromptMessage,\r\n                    defaultVal = self._options.paste.defaultName;\r\n\r\n                return self._options.showPrompt(message, defaultVal);\r\n            };\r\n        },\r\n\r\n        _fileOrBlobRejected: function(id, name) {\r\n            this._totalFilesInBatch -= 1;\r\n            this._parent.prototype._fileOrBlobRejected.apply(this, arguments);\r\n        },\r\n\r\n        _prepareItemsForUpload: function(items, params, endpoint) {\r\n            this._totalFilesInBatch = items.length;\r\n            this._filesInBatchAddedToUi = 0;\r\n            this._parent.prototype._prepareItemsForUpload.apply(this, arguments);\r\n        },\r\n\r\n        _maybeUpdateThumbnail: function(fileId) {\r\n            var thumbnailUrl = this._thumbnailUrls[fileId],\r\n                fileStatus = this.getUploads({id: fileId}).status;\r\n\r\n            if (fileStatus !== qq.status.DELETED &&\r\n                (thumbnailUrl ||\r\n                this._options.thumbnails.placeholders.waitUntilResponse ||\r\n                !qq.supportedFeatures.imagePreviews)) {\r\n\r\n                // This will replace the \"waiting\" placeholder with a \"preview not available\" placeholder\r\n                // if called with a null thumbnailUrl.\r\n                this._templating.updateThumbnail(fileId, thumbnailUrl, this._options.thumbnails.customResizer);\r\n            }\r\n        },\r\n\r\n        _addCannedFile: function(sessionData) {\r\n            var id = this._parent.prototype._addCannedFile.apply(this, arguments);\r\n\r\n            this._addToList(id, this.getName(id), true);\r\n            this._templating.hideSpinner(id);\r\n            this._templating.hideCancel(id);\r\n            this._markFileAsSuccessful(id);\r\n\r\n            return id;\r\n        },\r\n\r\n        _setSize: function(id, newSize) {\r\n            this._parent.prototype._setSize.apply(this, arguments);\r\n\r\n            this._templating.updateSize(id, this._formatSize(newSize));\r\n        },\r\n\r\n        _sessionRequestComplete: function() {\r\n            this._templating.addCacheToDom();\r\n            this._parent.prototype._sessionRequestComplete.apply(this, arguments);\r\n        }\r\n    };\r\n}());\r\n","/*globals qq */\r\n/**\r\n * This defines FineUploader mode, which is a default UI w/ drag & drop uploading.\r\n */\r\nqq.FineUploader = function(o, namespace) {\r\n    \"use strict\";\r\n\r\n    var self = this;\r\n\r\n    // By default this should inherit instance data from FineUploaderBasic, but this can be overridden\r\n    // if the (internal) caller defines a different parent.  The parent is also used by\r\n    // the private and public API functions that need to delegate to a parent function.\r\n    this._parent = namespace ? qq[namespace].FineUploaderBasic : qq.FineUploaderBasic;\r\n    this._parent.apply(this, arguments);\r\n\r\n    // Options provided by FineUploader mode\r\n    qq.extend(this._options, {\r\n        element: null,\r\n\r\n        button: null,\r\n\r\n        listElement: null,\r\n\r\n        dragAndDrop: {\r\n            extraDropzones: [],\r\n            reportDirectoryPaths: false\r\n        },\r\n\r\n        text: {\r\n            formatProgress: \"{percent}% of {total_size}\",\r\n            failUpload: \"Upload failed\",\r\n            waitingForResponse: \"Processing...\",\r\n            paused: \"Paused\"\r\n        },\r\n\r\n        template: \"qq-template\",\r\n\r\n        classes: {\r\n            retrying: \"qq-upload-retrying\",\r\n            retryable: \"qq-upload-retryable\",\r\n            success: \"qq-upload-success\",\r\n            fail: \"qq-upload-fail\",\r\n            editable: \"qq-editable\",\r\n            hide: \"qq-hide\",\r\n            dropActive: \"qq-upload-drop-area-active\"\r\n        },\r\n\r\n        failedUploadTextDisplay: {\r\n            mode: \"default\", //default, custom, or none\r\n            responseProperty: \"error\",\r\n            enableTooltip: true\r\n        },\r\n\r\n        messages: {\r\n            tooManyFilesError: \"You may only drop one file\",\r\n            unsupportedBrowser: \"Unrecoverable error - this browser does not permit file uploading of any kind.\"\r\n        },\r\n\r\n        retry: {\r\n            showAutoRetryNote: true,\r\n            autoRetryNote: \"Retrying {retryNum}/{maxAuto}...\"\r\n        },\r\n\r\n        deleteFile: {\r\n            forceConfirm: false,\r\n            confirmMessage: \"Are you sure you want to delete {filename}?\",\r\n            deletingStatusText: \"Deleting...\",\r\n            deletingFailedText: \"Delete failed\"\r\n\r\n        },\r\n\r\n        display: {\r\n            fileSizeOnSubmit: false,\r\n            prependFiles: false\r\n        },\r\n\r\n        paste: {\r\n            promptForName: false,\r\n            namePromptMessage: \"Please name this image\"\r\n        },\r\n\r\n        thumbnails: {\r\n            customResizer: null,\r\n            maxCount: 0,\r\n            placeholders: {\r\n                waitUntilResponse: false,\r\n                notAvailablePath: null,\r\n                waitingPath: null\r\n            },\r\n            timeBetweenThumbs: 750\r\n        },\r\n\r\n        scaling: {\r\n            hideScaled: false\r\n        },\r\n\r\n        showMessage: function(message) {\r\n            if (self._templating.hasDialog(\"alert\")) {\r\n                return self._templating.showDialog(\"alert\", message);\r\n            }\r\n            else {\r\n                setTimeout(function() {\r\n                    window.alert(message);\r\n                }, 0);\r\n            }\r\n        },\r\n\r\n        showConfirm: function(message) {\r\n            if (self._templating.hasDialog(\"confirm\")) {\r\n                return self._templating.showDialog(\"confirm\", message);\r\n            }\r\n            else {\r\n                return window.confirm(message);\r\n            }\r\n        },\r\n\r\n        showPrompt: function(message, defaultValue) {\r\n            if (self._templating.hasDialog(\"prompt\")) {\r\n                return self._templating.showDialog(\"prompt\", message, defaultValue);\r\n            }\r\n            else {\r\n                return window.prompt(message, defaultValue);\r\n            }\r\n        }\r\n    }, true);\r\n\r\n    // Replace any default options with user defined ones\r\n    qq.extend(this._options, o, true);\r\n\r\n    this._templating = new qq.Templating({\r\n        log: qq.bind(this.log, this),\r\n        templateIdOrEl: this._options.template,\r\n        containerEl: this._options.element,\r\n        fileContainerEl: this._options.listElement,\r\n        button: this._options.button,\r\n        imageGenerator: this._imageGenerator,\r\n        classes: {\r\n            hide: this._options.classes.hide,\r\n            editable: this._options.classes.editable\r\n        },\r\n        limits: {\r\n            maxThumbs: this._options.thumbnails.maxCount,\r\n            timeBetweenThumbs: this._options.thumbnails.timeBetweenThumbs\r\n        },\r\n        placeholders: {\r\n            waitUntilUpdate: this._options.thumbnails.placeholders.waitUntilResponse,\r\n            thumbnailNotAvailable: this._options.thumbnails.placeholders.notAvailablePath,\r\n            waitingForThumbnail: this._options.thumbnails.placeholders.waitingPath\r\n        },\r\n        text: this._options.text\r\n    });\r\n\r\n    if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\r\n        this._templating.renderFailure(this._options.messages.unsupportedBrowserIos8Safari);\r\n    }\r\n    else if (!qq.supportedFeatures.uploading || (this._options.cors.expected && !qq.supportedFeatures.uploadCors)) {\r\n        this._templating.renderFailure(this._options.messages.unsupportedBrowser);\r\n    }\r\n    else {\r\n        this._wrapCallbacks();\r\n\r\n        this._templating.render();\r\n\r\n        this._classes = this._options.classes;\r\n\r\n        if (!this._options.button && this._templating.getButton()) {\r\n            this._defaultButtonId = this._createUploadButton({\r\n                element: this._templating.getButton(),\r\n                title: this._options.text.fileInputTitle\r\n            }).getButtonId();\r\n        }\r\n\r\n        this._setupClickAndEditEventHandlers();\r\n\r\n        if (qq.DragAndDrop && qq.supportedFeatures.fileDrop) {\r\n            this._dnd = this._setupDragAndDrop();\r\n        }\r\n\r\n        if (this._options.paste.targetElement && this._options.paste.promptForName) {\r\n            if (qq.PasteSupport) {\r\n                this._setupPastePrompt();\r\n            }\r\n            else {\r\n                this.log(\"Paste support module not found.\", \"error\");\r\n            }\r\n        }\r\n\r\n        this._totalFilesInBatch = 0;\r\n        this._filesInBatchAddedToUi = 0;\r\n    }\r\n};\r\n\r\n// Inherit the base public & private API methods\r\nqq.extend(qq.FineUploader.prototype, qq.basePublicApi);\r\nqq.extend(qq.FineUploader.prototype, qq.basePrivateApi);\r\n\r\n// Add the FineUploader/default UI public & private UI methods, which may override some base methods.\r\nqq.extend(qq.FineUploader.prototype, qq.uiPublicApi);\r\nqq.extend(qq.FineUploader.prototype, qq.uiPrivateApi);\r\n","/* globals qq */\r\n/* jshint -W065 */\r\n/**\r\n * Module responsible for rendering all Fine Uploader UI templates.  This module also asserts at least\r\n * a limited amount of control over the template elements after they are added to the DOM.\r\n * Wherever possible, this module asserts total control over template elements present in the DOM.\r\n *\r\n * @param spec Specification object used to control various templating behaviors\r\n * @constructor\r\n */\r\nqq.Templating = function(spec) {\r\n    \"use strict\";\r\n\r\n    var FILE_ID_ATTR = \"qq-file-id\",\r\n        FILE_CLASS_PREFIX = \"qq-file-id-\",\r\n        THUMBNAIL_MAX_SIZE_ATTR = \"qq-max-size\",\r\n        THUMBNAIL_SERVER_SCALE_ATTR = \"qq-server-scale\",\r\n        // This variable is duplicated in the DnD module since it can function as a standalone as well\r\n        HIDE_DROPZONE_ATTR = \"qq-hide-dropzone\",\r\n        DROPZPONE_TEXT_ATTR = \"qq-drop-area-text\",\r\n        IN_PROGRESS_CLASS = \"qq-in-progress\",\r\n        HIDDEN_FOREVER_CLASS = \"qq-hidden-forever\",\r\n        fileBatch = {\r\n            content: document.createDocumentFragment(),\r\n            map: {}\r\n        },\r\n        isCancelDisabled = false,\r\n        generatedThumbnails = 0,\r\n        thumbnailQueueMonitorRunning = false,\r\n        thumbGenerationQueue = [],\r\n        thumbnailMaxSize = -1,\r\n        options = {\r\n            log: null,\r\n            limits: {\r\n                maxThumbs: 0,\r\n                timeBetweenThumbs: 750\r\n            },\r\n            templateIdOrEl: \"qq-template\",\r\n            containerEl: null,\r\n            fileContainerEl: null,\r\n            button: null,\r\n            imageGenerator: null,\r\n            classes: {\r\n                hide: \"qq-hide\",\r\n                editable: \"qq-editable\"\r\n            },\r\n            placeholders: {\r\n                waitUntilUpdate: false,\r\n                thumbnailNotAvailable: null,\r\n                waitingForThumbnail: null\r\n            },\r\n            text: {\r\n                paused: \"Paused\"\r\n            }\r\n        },\r\n        selectorClasses = {\r\n            button: \"qq-upload-button-selector\",\r\n            alertDialog: \"qq-alert-dialog-selector\",\r\n            dialogCancelButton: \"qq-cancel-button-selector\",\r\n            confirmDialog: \"qq-confirm-dialog-selector\",\r\n            dialogMessage: \"qq-dialog-message-selector\",\r\n            dialogOkButton: \"qq-ok-button-selector\",\r\n            promptDialog: \"qq-prompt-dialog-selector\",\r\n            uploader: \"qq-uploader-selector\",\r\n            drop: \"qq-upload-drop-area-selector\",\r\n            list: \"qq-upload-list-selector\",\r\n            progressBarContainer: \"qq-progress-bar-container-selector\",\r\n            progressBar: \"qq-progress-bar-selector\",\r\n            totalProgressBarContainer: \"qq-total-progress-bar-container-selector\",\r\n            totalProgressBar: \"qq-total-progress-bar-selector\",\r\n            file: \"qq-upload-file-selector\",\r\n            spinner: \"qq-upload-spinner-selector\",\r\n            size: \"qq-upload-size-selector\",\r\n            cancel: \"qq-upload-cancel-selector\",\r\n            pause: \"qq-upload-pause-selector\",\r\n            continueButton: \"qq-upload-continue-selector\",\r\n            deleteButton: \"qq-upload-delete-selector\",\r\n            retry: \"qq-upload-retry-selector\",\r\n            statusText: \"qq-upload-status-text-selector\",\r\n            editFilenameInput: \"qq-edit-filename-selector\",\r\n            editNameIcon: \"qq-edit-filename-icon-selector\",\r\n            dropText: \"qq-upload-drop-area-text-selector\",\r\n            dropProcessing: \"qq-drop-processing-selector\",\r\n            dropProcessingSpinner: \"qq-drop-processing-spinner-selector\",\r\n            thumbnail: \"qq-thumbnail-selector\"\r\n        },\r\n        previewGeneration = {},\r\n        cachedThumbnailNotAvailableImg = new qq.Promise(),\r\n        cachedWaitingForThumbnailImg = new qq.Promise(),\r\n        log,\r\n        isEditElementsExist,\r\n        isRetryElementExist,\r\n        templateHtml,\r\n        container,\r\n        fileList,\r\n        showThumbnails,\r\n        serverScale,\r\n\r\n        // During initialization of the templating module we should cache any\r\n        // placeholder images so we can quickly swap them into the file list on demand.\r\n        // Any placeholder images that cannot be loaded/found are simply ignored.\r\n        cacheThumbnailPlaceholders = function() {\r\n            var notAvailableUrl =  options.placeholders.thumbnailNotAvailable,\r\n                waitingUrl = options.placeholders.waitingForThumbnail,\r\n                spec = {\r\n                    maxSize: thumbnailMaxSize,\r\n                    scale: serverScale\r\n                };\r\n\r\n            if (showThumbnails) {\r\n                if (notAvailableUrl) {\r\n                    options.imageGenerator.generate(notAvailableUrl, new Image(), spec).then(\r\n                        function(updatedImg) {\r\n                            cachedThumbnailNotAvailableImg.success(updatedImg);\r\n                        },\r\n                        function() {\r\n                            cachedThumbnailNotAvailableImg.failure();\r\n                            log(\"Problem loading 'not available' placeholder image at \" + notAvailableUrl, \"error\");\r\n                        }\r\n                    );\r\n                }\r\n                else {\r\n                    cachedThumbnailNotAvailableImg.failure();\r\n                }\r\n\r\n                if (waitingUrl) {\r\n                    options.imageGenerator.generate(waitingUrl, new Image(), spec).then(\r\n                        function(updatedImg) {\r\n                            cachedWaitingForThumbnailImg.success(updatedImg);\r\n                        },\r\n                        function() {\r\n                            cachedWaitingForThumbnailImg.failure();\r\n                            log(\"Problem loading 'waiting for thumbnail' placeholder image at \" + waitingUrl, \"error\");\r\n                        }\r\n                    );\r\n                }\r\n                else {\r\n                    cachedWaitingForThumbnailImg.failure();\r\n                }\r\n            }\r\n        },\r\n\r\n        // Displays a \"waiting for thumbnail\" type placeholder image\r\n        // iff we were able to load it during initialization of the templating module.\r\n        displayWaitingImg = function(thumbnail) {\r\n            var waitingImgPlacement = new qq.Promise();\r\n\r\n            cachedWaitingForThumbnailImg.then(function(img) {\r\n                maybeScalePlaceholderViaCss(img, thumbnail);\r\n                /* jshint eqnull:true */\r\n                if (!thumbnail.src) {\r\n                    thumbnail.src = img.src;\r\n                    thumbnail.onload = function() {\r\n                        thumbnail.onload = null;\r\n                        show(thumbnail);\r\n                        waitingImgPlacement.success();\r\n                    };\r\n                }\r\n                else {\r\n                    waitingImgPlacement.success();\r\n                }\r\n            }, function() {\r\n                // In some browsers (such as IE9 and older) an img w/out a src attribute\r\n                // are displayed as \"broken\" images, so we should just hide the img tag\r\n                // if we aren't going to display the \"waiting\" placeholder.\r\n                hide(thumbnail);\r\n                waitingImgPlacement.success();\r\n            });\r\n\r\n            return waitingImgPlacement;\r\n        },\r\n\r\n        generateNewPreview = function(id, blob, spec) {\r\n            var thumbnail = getThumbnail(id);\r\n\r\n            log(\"Generating new thumbnail for \" + id);\r\n            blob.qqThumbnailId = id;\r\n\r\n            return options.imageGenerator.generate(blob, thumbnail, spec).then(\r\n                function() {\r\n                    generatedThumbnails++;\r\n                    show(thumbnail);\r\n                    previewGeneration[id].success();\r\n                },\r\n                function() {\r\n                    previewGeneration[id].failure();\r\n\r\n                    // Display the \"not available\" placeholder img only if we are\r\n                    // not expecting a thumbnail at a later point, such as in a server response.\r\n                    if (!options.placeholders.waitUntilUpdate) {\r\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\r\n                    }\r\n                });\r\n        },\r\n\r\n        generateNextQueuedPreview = function() {\r\n            if (thumbGenerationQueue.length) {\r\n                thumbnailQueueMonitorRunning = true;\r\n\r\n                var queuedThumbRequest = thumbGenerationQueue.shift();\r\n\r\n                if (queuedThumbRequest.update) {\r\n                    processUpdateQueuedPreviewRequest(queuedThumbRequest);\r\n                }\r\n                else {\r\n                    processNewQueuedPreviewRequest(queuedThumbRequest);\r\n                }\r\n            }\r\n            else {\r\n                thumbnailQueueMonitorRunning = false;\r\n            }\r\n        },\r\n\r\n        getCancel = function(id) {\r\n            return getTemplateEl(getFile(id), selectorClasses.cancel);\r\n        },\r\n\r\n        getContinue = function(id) {\r\n            return getTemplateEl(getFile(id), selectorClasses.continueButton);\r\n        },\r\n\r\n        getDialog = function(type) {\r\n            return getTemplateEl(container, selectorClasses[type + \"Dialog\"]);\r\n        },\r\n\r\n        getDelete = function(id) {\r\n            return getTemplateEl(getFile(id), selectorClasses.deleteButton);\r\n        },\r\n\r\n        getDropProcessing = function() {\r\n            return getTemplateEl(container, selectorClasses.dropProcessing);\r\n        },\r\n\r\n        getEditIcon = function(id) {\r\n            return getTemplateEl(getFile(id), selectorClasses.editNameIcon);\r\n        },\r\n\r\n        getFile = function(id) {\r\n            return fileBatch.map[id] || qq(fileList).getFirstByClass(FILE_CLASS_PREFIX + id);\r\n        },\r\n\r\n        getFilename = function(id) {\r\n            return getTemplateEl(getFile(id), selectorClasses.file);\r\n        },\r\n\r\n        getPause = function(id) {\r\n            return getTemplateEl(getFile(id), selectorClasses.pause);\r\n        },\r\n\r\n        getProgress = function(id) {\r\n            /* jshint eqnull:true */\r\n            // Total progress bar\r\n            if (id == null) {\r\n                return getTemplateEl(container, selectorClasses.totalProgressBarContainer) ||\r\n                    getTemplateEl(container, selectorClasses.totalProgressBar);\r\n            }\r\n\r\n            // Per-file progress bar\r\n            return getTemplateEl(getFile(id), selectorClasses.progressBarContainer) ||\r\n                getTemplateEl(getFile(id), selectorClasses.progressBar);\r\n        },\r\n\r\n        getRetry = function(id) {\r\n            return getTemplateEl(getFile(id), selectorClasses.retry);\r\n        },\r\n\r\n        getSize = function(id) {\r\n            return getTemplateEl(getFile(id), selectorClasses.size);\r\n        },\r\n\r\n        getSpinner = function(id) {\r\n            return getTemplateEl(getFile(id), selectorClasses.spinner);\r\n        },\r\n\r\n        getTemplateEl = function(context, cssClass) {\r\n            return context && qq(context).getFirstByClass(cssClass);\r\n        },\r\n\r\n        getThumbnail = function(id) {\r\n            return showThumbnails && getTemplateEl(getFile(id), selectorClasses.thumbnail);\r\n        },\r\n\r\n        hide = function(el) {\r\n            el && qq(el).addClass(options.classes.hide);\r\n        },\r\n\r\n        // Ensures a placeholder image does not exceed any max size specified\r\n        // via `style` attribute properties iff <canvas> was not used to scale\r\n        // the placeholder AND the target <img> doesn't already have these `style` attribute properties set.\r\n        maybeScalePlaceholderViaCss = function(placeholder, thumbnail) {\r\n            var maxWidth = placeholder.style.maxWidth,\r\n                maxHeight = placeholder.style.maxHeight;\r\n\r\n            if (maxHeight && maxWidth && !thumbnail.style.maxWidth && !thumbnail.style.maxHeight) {\r\n                qq(thumbnail).css({\r\n                    maxWidth: maxWidth,\r\n                    maxHeight: maxHeight\r\n                });\r\n            }\r\n        },\r\n\r\n        // Displays a \"thumbnail not available\" type placeholder image\r\n        // iff we were able to load this placeholder during initialization\r\n        // of the templating module or after preview generation has failed.\r\n        maybeSetDisplayNotAvailableImg = function(id, thumbnail) {\r\n            var previewing = previewGeneration[id] || new qq.Promise().failure(),\r\n                notAvailableImgPlacement = new qq.Promise();\r\n\r\n            cachedThumbnailNotAvailableImg.then(function(img) {\r\n                previewing.then(\r\n                    function() {\r\n                        notAvailableImgPlacement.success();\r\n                    },\r\n                    function() {\r\n                        maybeScalePlaceholderViaCss(img, thumbnail);\r\n\r\n                        thumbnail.onload = function() {\r\n                            thumbnail.onload = null;\r\n                            notAvailableImgPlacement.success();\r\n                        };\r\n\r\n                        thumbnail.src = img.src;\r\n                        show(thumbnail);\r\n                    }\r\n                );\r\n            });\r\n\r\n            return notAvailableImgPlacement;\r\n        },\r\n\r\n        /**\r\n         * Grabs the HTML from the script tag holding the template markup.  This function will also adjust\r\n         * some internally-tracked state variables based on the contents of the template.\r\n         * The template is filtered so that irrelevant elements (such as the drop zone if DnD is not supported)\r\n         * are omitted from the DOM.  Useful errors will be thrown if the template cannot be parsed.\r\n         *\r\n         * @returns {{template: *, fileTemplate: *}} HTML for the top-level file items templates\r\n         */\r\n        parseAndGetTemplate = function() {\r\n            var scriptEl,\r\n                scriptHtml,\r\n                fileListNode,\r\n                tempTemplateEl,\r\n                fileListHtml,\r\n                defaultButton,\r\n                dropArea,\r\n                thumbnail,\r\n                dropProcessing,\r\n                dropTextEl,\r\n                uploaderEl;\r\n\r\n            log(\"Parsing template\");\r\n\r\n            /*jshint -W116*/\r\n            if (options.templateIdOrEl == null) {\r\n                throw new Error(\"You MUST specify either a template element or ID!\");\r\n            }\r\n\r\n            // Grab the contents of the script tag holding the template.\r\n            if (qq.isString(options.templateIdOrEl)) {\r\n                scriptEl = document.getElementById(options.templateIdOrEl);\r\n\r\n                if (scriptEl === null) {\r\n                    throw new Error(qq.format(\"Cannot find template script at ID '{}'!\", options.templateIdOrEl));\r\n                }\r\n\r\n                scriptHtml = scriptEl.innerHTML;\r\n            }\r\n            else {\r\n                if (options.templateIdOrEl.innerHTML === undefined) {\r\n                    throw new Error(\"You have specified an invalid value for the template option!  \" +\r\n                        \"It must be an ID or an Element.\");\r\n                }\r\n\r\n                scriptHtml = options.templateIdOrEl.innerHTML;\r\n            }\r\n\r\n            scriptHtml = qq.trimStr(scriptHtml);\r\n            tempTemplateEl = document.createElement(\"div\");\r\n            tempTemplateEl.appendChild(qq.toElement(scriptHtml));\r\n            uploaderEl = qq(tempTemplateEl).getFirstByClass(selectorClasses.uploader);\r\n\r\n            // Don't include the default template button in the DOM\r\n            // if an alternate button container has been specified.\r\n            if (options.button) {\r\n                defaultButton = qq(tempTemplateEl).getFirstByClass(selectorClasses.button);\r\n                if (defaultButton) {\r\n                    qq(defaultButton).remove();\r\n                }\r\n            }\r\n\r\n            // Omit the drop processing element from the DOM if DnD is not supported by the UA,\r\n            // or the drag and drop module is not found.\r\n            // NOTE: We are consciously not removing the drop zone if the UA doesn't support DnD\r\n            // to support layouts where the drop zone is also a container for visible elements,\r\n            // such as the file list.\r\n            if (!qq.DragAndDrop || !qq.supportedFeatures.fileDrop) {\r\n                dropProcessing = qq(tempTemplateEl).getFirstByClass(selectorClasses.dropProcessing);\r\n                if (dropProcessing) {\r\n                    qq(dropProcessing).remove();\r\n                }\r\n            }\r\n\r\n            dropArea = qq(tempTemplateEl).getFirstByClass(selectorClasses.drop);\r\n\r\n            // If DnD is not available then remove\r\n            // it from the DOM as well.\r\n            if (dropArea && !qq.DragAndDrop) {\r\n                log(\"DnD module unavailable.\", \"info\");\r\n                qq(dropArea).remove();\r\n            }\r\n\r\n            if (!qq.supportedFeatures.fileDrop) {\r\n                // don't display any \"drop files to upload\" background text\r\n                uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\r\n\r\n                if (dropArea && qq(dropArea).hasAttribute(HIDE_DROPZONE_ATTR)) {\r\n                    // If there is a drop area defined in the template, and the current UA doesn't support DnD,\r\n                    // and the drop area is marked as \"hide before enter\", ensure it is hidden as the DnD module\r\n                    // will not do this (since we will not be loading the DnD module)\r\n                    qq(dropArea).css({\r\n                        display: \"none\"\r\n                    });\r\n                }\r\n            }\r\n            else if (qq(uploaderEl).hasAttribute(DROPZPONE_TEXT_ATTR) && dropArea) {\r\n                dropTextEl = qq(dropArea).getFirstByClass(selectorClasses.dropText);\r\n                dropTextEl && qq(dropTextEl).remove();\r\n            }\r\n\r\n            // Ensure the `showThumbnails` flag is only set if the thumbnail element\r\n            // is present in the template AND the current UA is capable of generating client-side previews.\r\n            thumbnail = qq(tempTemplateEl).getFirstByClass(selectorClasses.thumbnail);\r\n            if (!showThumbnails) {\r\n                thumbnail && qq(thumbnail).remove();\r\n            }\r\n            else if (thumbnail) {\r\n                thumbnailMaxSize = parseInt(thumbnail.getAttribute(THUMBNAIL_MAX_SIZE_ATTR));\r\n                // Only enforce max size if the attr value is non-zero\r\n                thumbnailMaxSize = thumbnailMaxSize > 0 ? thumbnailMaxSize : null;\r\n\r\n                serverScale = qq(thumbnail).hasAttribute(THUMBNAIL_SERVER_SCALE_ATTR);\r\n            }\r\n            showThumbnails = showThumbnails && thumbnail;\r\n\r\n            isEditElementsExist = qq(tempTemplateEl).getByClass(selectorClasses.editFilenameInput).length > 0;\r\n            isRetryElementExist = qq(tempTemplateEl).getByClass(selectorClasses.retry).length > 0;\r\n\r\n            fileListNode = qq(tempTemplateEl).getFirstByClass(selectorClasses.list);\r\n            /*jshint -W116*/\r\n            if (fileListNode == null) {\r\n                throw new Error(\"Could not find the file list container in the template!\");\r\n            }\r\n\r\n            fileListHtml = fileListNode.innerHTML;\r\n            fileListNode.innerHTML = \"\";\r\n\r\n            // We must call `createElement` in IE8 in order to target and hide any <dialog> via CSS\r\n            if (tempTemplateEl.getElementsByTagName(\"DIALOG\").length) {\r\n                document.createElement(\"dialog\");\r\n            }\r\n\r\n            log(\"Template parsing complete\");\r\n\r\n            return {\r\n                template: qq.trimStr(tempTemplateEl.innerHTML),\r\n                fileTemplate: qq.trimStr(fileListHtml)\r\n            };\r\n        },\r\n\r\n        prependFile = function(el, index, fileList) {\r\n            var parentEl = fileList,\r\n                beforeEl = parentEl.firstChild;\r\n\r\n            if (index > 0) {\r\n                beforeEl = qq(parentEl).children()[index].nextSibling;\r\n\r\n            }\r\n\r\n            parentEl.insertBefore(el, beforeEl);\r\n        },\r\n\r\n        processNewQueuedPreviewRequest = function(queuedThumbRequest) {\r\n            var id = queuedThumbRequest.id,\r\n                optFileOrBlob = queuedThumbRequest.optFileOrBlob,\r\n                relatedThumbnailId = optFileOrBlob && optFileOrBlob.qqThumbnailId,\r\n                thumbnail = getThumbnail(id),\r\n                spec = {\r\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\r\n                    maxSize: thumbnailMaxSize,\r\n                    orient: true,\r\n                    scale: true\r\n                };\r\n\r\n            if (qq.supportedFeatures.imagePreviews) {\r\n                if (thumbnail) {\r\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\r\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\r\n                        generateNextQueuedPreview();\r\n                    }\r\n                    else {\r\n                        displayWaitingImg(thumbnail).done(function() {\r\n                            previewGeneration[id] = new qq.Promise();\r\n\r\n                            previewGeneration[id].done(function() {\r\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\r\n                            });\r\n\r\n                            /* jshint eqnull: true */\r\n                            // If we've already generated an <img> for this file, use the one that exists,\r\n                            // don't waste resources generating a new one.\r\n                            if (relatedThumbnailId != null) {\r\n                                useCachedPreview(id, relatedThumbnailId);\r\n                            }\r\n                            else {\r\n                                generateNewPreview(id, optFileOrBlob, spec);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                // File element in template may have been removed, so move on to next item in queue\r\n                else {\r\n                    generateNextQueuedPreview();\r\n                }\r\n            }\r\n            else if (thumbnail) {\r\n                displayWaitingImg(thumbnail);\r\n                generateNextQueuedPreview();\r\n            }\r\n        },\r\n\r\n        processUpdateQueuedPreviewRequest = function(queuedThumbRequest) {\r\n            var id = queuedThumbRequest.id,\r\n                thumbnailUrl = queuedThumbRequest.thumbnailUrl,\r\n                showWaitingImg = queuedThumbRequest.showWaitingImg,\r\n                thumbnail = getThumbnail(id),\r\n                spec = {\r\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\r\n                    scale: serverScale,\r\n                    maxSize: thumbnailMaxSize\r\n                };\r\n\r\n            if (thumbnail) {\r\n                if (thumbnailUrl) {\r\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\r\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\r\n                        generateNextQueuedPreview();\r\n                    }\r\n                    else {\r\n                        if (showWaitingImg) {\r\n                            displayWaitingImg(thumbnail);\r\n                        }\r\n\r\n                        return options.imageGenerator.generate(thumbnailUrl, thumbnail, spec).then(\r\n                            function() {\r\n                                show(thumbnail);\r\n                                generatedThumbnails++;\r\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\r\n                            },\r\n\r\n                            function() {\r\n                                maybeSetDisplayNotAvailableImg(id, thumbnail);\r\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\r\n                            }\r\n                        );\r\n                    }\r\n                }\r\n                else {\r\n                    maybeSetDisplayNotAvailableImg(id, thumbnail);\r\n                    generateNextQueuedPreview();\r\n                }\r\n            }\r\n        },\r\n\r\n        setProgressBarWidth = function(id, percent) {\r\n            var bar = getProgress(id),\r\n                /* jshint eqnull:true */\r\n                progressBarSelector = id == null ? selectorClasses.totalProgressBar : selectorClasses.progressBar;\r\n\r\n            if (bar && !qq(bar).hasClass(progressBarSelector)) {\r\n                bar = qq(bar).getFirstByClass(progressBarSelector);\r\n            }\r\n\r\n            if (bar) {\r\n                qq(bar).css({width: percent + \"%\"});\r\n                bar.setAttribute(\"aria-valuenow\", percent);\r\n            }\r\n        },\r\n\r\n        show = function(el) {\r\n            el && qq(el).removeClass(options.classes.hide);\r\n        },\r\n\r\n        useCachedPreview = function(targetThumbnailId, cachedThumbnailId) {\r\n            var targetThumbnail = getThumbnail(targetThumbnailId),\r\n                cachedThumbnail = getThumbnail(cachedThumbnailId);\r\n\r\n            log(qq.format(\"ID {} is the same file as ID {}.  Will use generated thumbnail from ID {} instead.\", targetThumbnailId, cachedThumbnailId, cachedThumbnailId));\r\n\r\n            // Generation of the related thumbnail may still be in progress, so, wait until it is done.\r\n            previewGeneration[cachedThumbnailId].then(function() {\r\n                generatedThumbnails++;\r\n                previewGeneration[targetThumbnailId].success();\r\n                log(qq.format(\"Now using previously generated thumbnail created for ID {} on ID {}.\", cachedThumbnailId, targetThumbnailId));\r\n                targetThumbnail.src = cachedThumbnail.src;\r\n                show(targetThumbnail);\r\n            },\r\n            function() {\r\n                previewGeneration[targetThumbnailId].failure();\r\n                if (!options.placeholders.waitUntilUpdate) {\r\n                    maybeSetDisplayNotAvailableImg(targetThumbnailId, targetThumbnail);\r\n                }\r\n            });\r\n        };\r\n\r\n    qq.extend(options, spec);\r\n    log = options.log;\r\n\r\n    // No need to worry about conserving CPU or memory on older browsers,\r\n    // since there is no ability to preview, and thumbnail display is primitive and quick.\r\n    if (!qq.supportedFeatures.imagePreviews) {\r\n        options.limits.timeBetweenThumbs = 0;\r\n        options.limits.maxThumbs = 0;\r\n    }\r\n\r\n    container = options.containerEl;\r\n    showThumbnails = options.imageGenerator !== undefined;\r\n    templateHtml = parseAndGetTemplate();\r\n\r\n    cacheThumbnailPlaceholders();\r\n\r\n    qq.extend(this, {\r\n        render: function() {\r\n            log(\"Rendering template in DOM.\");\r\n\r\n            generatedThumbnails = 0;\r\n\r\n            container.innerHTML = templateHtml.template;\r\n            hide(getDropProcessing());\r\n            this.hideTotalProgress();\r\n            fileList = options.fileContainerEl || getTemplateEl(container, selectorClasses.list);\r\n\r\n            log(\"Template rendering complete\");\r\n        },\r\n\r\n        renderFailure: function(message) {\r\n            var cantRenderEl = qq.toElement(message);\r\n            container.innerHTML = \"\";\r\n            container.appendChild(cantRenderEl);\r\n        },\r\n\r\n        reset: function() {\r\n            this.render();\r\n        },\r\n\r\n        clearFiles: function() {\r\n            fileList.innerHTML = \"\";\r\n        },\r\n\r\n        disableCancel: function() {\r\n            isCancelDisabled = true;\r\n        },\r\n\r\n        addFile: function(id, name, prependInfo, hideForever, batch) {\r\n            var fileEl = qq.toElement(templateHtml.fileTemplate),\r\n                fileNameEl = getTemplateEl(fileEl, selectorClasses.file),\r\n                uploaderEl = getTemplateEl(container, selectorClasses.uploader),\r\n                fileContainer = batch ? fileBatch.content : fileList,\r\n                thumb;\r\n\r\n            if (batch) {\r\n                fileBatch.map[id] = fileEl;\r\n            }\r\n\r\n            qq(fileEl).addClass(FILE_CLASS_PREFIX + id);\r\n            uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\r\n\r\n            if (fileNameEl) {\r\n                qq(fileNameEl).setText(name);\r\n                fileNameEl.setAttribute(\"title\", name);\r\n            }\r\n\r\n            fileEl.setAttribute(FILE_ID_ATTR, id);\r\n\r\n            if (prependInfo) {\r\n                prependFile(fileEl, prependInfo.index, fileContainer);\r\n            }\r\n            else {\r\n                fileContainer.appendChild(fileEl);\r\n            }\r\n\r\n            if (hideForever) {\r\n                fileEl.style.display = \"none\";\r\n                qq(fileEl).addClass(HIDDEN_FOREVER_CLASS);\r\n            }\r\n            else {\r\n                hide(getProgress(id));\r\n                hide(getSize(id));\r\n                hide(getDelete(id));\r\n                hide(getRetry(id));\r\n                hide(getPause(id));\r\n                hide(getContinue(id));\r\n\r\n                if (isCancelDisabled) {\r\n                    this.hideCancel(id);\r\n                }\r\n\r\n                thumb = getThumbnail(id);\r\n                if (thumb && !thumb.src) {\r\n                    cachedWaitingForThumbnailImg.then(function(waitingImg) {\r\n                        thumb.src = waitingImg.src;\r\n                        if (waitingImg.style.maxHeight && waitingImg.style.maxWidth) {\r\n                            qq(thumb).css({\r\n                                maxHeight: waitingImg.style.maxHeight,\r\n                                maxWidth: waitingImg.style.maxWidth\r\n                            });\r\n                        }\r\n\r\n                        show(thumb);\r\n                    });\r\n                }\r\n            }\r\n        },\r\n\r\n        addFileToCache: function(id, name, prependInfo, hideForever) {\r\n            this.addFile(id, name, prependInfo, hideForever, true);\r\n        },\r\n\r\n        addCacheToDom: function() {\r\n            fileList.appendChild(fileBatch.content);\r\n            fileBatch.content = document.createDocumentFragment();\r\n            fileBatch.map = {};\r\n        },\r\n\r\n        removeFile: function(id) {\r\n            qq(getFile(id)).remove();\r\n        },\r\n\r\n        getFileId: function(el) {\r\n            var currentNode = el;\r\n\r\n            if (currentNode) {\r\n                /*jshint -W116*/\r\n                while (currentNode.getAttribute(FILE_ID_ATTR) == null) {\r\n                    currentNode = currentNode.parentNode;\r\n                }\r\n\r\n                return parseInt(currentNode.getAttribute(FILE_ID_ATTR));\r\n            }\r\n        },\r\n\r\n        getFileList: function() {\r\n            return fileList;\r\n        },\r\n\r\n        markFilenameEditable: function(id) {\r\n            var filename = getFilename(id);\r\n\r\n            filename && qq(filename).addClass(options.classes.editable);\r\n        },\r\n\r\n        updateFilename: function(id, name) {\r\n            var filenameEl = getFilename(id);\r\n\r\n            if (filenameEl) {\r\n                qq(filenameEl).setText(name);\r\n                filenameEl.setAttribute(\"title\", name);\r\n            }\r\n        },\r\n\r\n        hideFilename: function(id) {\r\n            hide(getFilename(id));\r\n        },\r\n\r\n        showFilename: function(id) {\r\n            show(getFilename(id));\r\n        },\r\n\r\n        isFileName: function(el) {\r\n            return qq(el).hasClass(selectorClasses.file);\r\n        },\r\n\r\n        getButton: function() {\r\n            return options.button || getTemplateEl(container, selectorClasses.button);\r\n        },\r\n\r\n        hideDropProcessing: function() {\r\n            hide(getDropProcessing());\r\n        },\r\n\r\n        showDropProcessing: function() {\r\n            show(getDropProcessing());\r\n        },\r\n\r\n        getDropZone: function() {\r\n            return getTemplateEl(container, selectorClasses.drop);\r\n        },\r\n\r\n        isEditFilenamePossible: function() {\r\n            return isEditElementsExist;\r\n        },\r\n\r\n        hideRetry: function(id) {\r\n            hide(getRetry(id));\r\n        },\r\n\r\n        isRetryPossible: function() {\r\n            return isRetryElementExist;\r\n        },\r\n\r\n        showRetry: function(id) {\r\n            show(getRetry(id));\r\n        },\r\n\r\n        getFileContainer: function(id) {\r\n            return getFile(id);\r\n        },\r\n\r\n        showEditIcon: function(id) {\r\n            var icon = getEditIcon(id);\r\n\r\n            icon && qq(icon).addClass(options.classes.editable);\r\n        },\r\n\r\n        isHiddenForever: function(id) {\r\n            return qq(getFile(id)).hasClass(HIDDEN_FOREVER_CLASS);\r\n        },\r\n\r\n        hideEditIcon: function(id) {\r\n            var icon = getEditIcon(id);\r\n\r\n            icon && qq(icon).removeClass(options.classes.editable);\r\n        },\r\n\r\n        isEditIcon: function(el) {\r\n            return qq(el).hasClass(selectorClasses.editNameIcon, true);\r\n        },\r\n\r\n        getEditInput: function(id) {\r\n            return getTemplateEl(getFile(id), selectorClasses.editFilenameInput);\r\n        },\r\n\r\n        isEditInput: function(el) {\r\n            return qq(el).hasClass(selectorClasses.editFilenameInput, true);\r\n        },\r\n\r\n        updateProgress: function(id, loaded, total) {\r\n            var bar = getProgress(id),\r\n                percent;\r\n\r\n            if (bar && total > 0) {\r\n                percent = Math.round(loaded / total * 100);\r\n\r\n                if (percent === 100) {\r\n                    hide(bar);\r\n                }\r\n                else {\r\n                    show(bar);\r\n                }\r\n\r\n                setProgressBarWidth(id, percent);\r\n            }\r\n        },\r\n\r\n        updateTotalProgress: function(loaded, total) {\r\n            this.updateProgress(null, loaded, total);\r\n        },\r\n\r\n        hideProgress: function(id) {\r\n            var bar = getProgress(id);\r\n\r\n            bar && hide(bar);\r\n        },\r\n\r\n        hideTotalProgress: function() {\r\n            this.hideProgress();\r\n        },\r\n\r\n        resetProgress: function(id) {\r\n            setProgressBarWidth(id, 0);\r\n            this.hideTotalProgress(id);\r\n        },\r\n\r\n        resetTotalProgress: function() {\r\n            this.resetProgress();\r\n        },\r\n\r\n        showCancel: function(id) {\r\n            if (!isCancelDisabled) {\r\n                var cancel = getCancel(id);\r\n\r\n                cancel && qq(cancel).removeClass(options.classes.hide);\r\n            }\r\n        },\r\n\r\n        hideCancel: function(id) {\r\n            hide(getCancel(id));\r\n        },\r\n\r\n        isCancel: function(el)  {\r\n            return qq(el).hasClass(selectorClasses.cancel, true);\r\n        },\r\n\r\n        allowPause: function(id) {\r\n            show(getPause(id));\r\n            hide(getContinue(id));\r\n        },\r\n\r\n        uploadPaused: function(id) {\r\n            this.setStatusText(id, options.text.paused);\r\n            this.allowContinueButton(id);\r\n            hide(getSpinner(id));\r\n        },\r\n\r\n        hidePause: function(id) {\r\n            hide(getPause(id));\r\n        },\r\n\r\n        isPause: function(el) {\r\n            return qq(el).hasClass(selectorClasses.pause, true);\r\n        },\r\n\r\n        isContinueButton: function(el) {\r\n            return qq(el).hasClass(selectorClasses.continueButton, true);\r\n        },\r\n\r\n        allowContinueButton: function(id) {\r\n            show(getContinue(id));\r\n            hide(getPause(id));\r\n        },\r\n\r\n        uploadContinued: function(id) {\r\n            this.setStatusText(id, \"\");\r\n            this.allowPause(id);\r\n            show(getSpinner(id));\r\n        },\r\n\r\n        showDeleteButton: function(id) {\r\n            show(getDelete(id));\r\n        },\r\n\r\n        hideDeleteButton: function(id) {\r\n            hide(getDelete(id));\r\n        },\r\n\r\n        isDeleteButton: function(el) {\r\n            return qq(el).hasClass(selectorClasses.deleteButton, true);\r\n        },\r\n\r\n        isRetry: function(el) {\r\n            return qq(el).hasClass(selectorClasses.retry, true);\r\n        },\r\n\r\n        updateSize: function(id, text) {\r\n            var size = getSize(id);\r\n\r\n            if (size) {\r\n                show(size);\r\n                qq(size).setText(text);\r\n            }\r\n        },\r\n\r\n        setStatusText: function(id, text) {\r\n            var textEl = getTemplateEl(getFile(id), selectorClasses.statusText);\r\n\r\n            if (textEl) {\r\n                /*jshint -W116*/\r\n                if (text == null) {\r\n                    qq(textEl).clearText();\r\n                }\r\n                else {\r\n                    qq(textEl).setText(text);\r\n                }\r\n            }\r\n        },\r\n\r\n        hideSpinner: function(id) {\r\n            qq(getFile(id)).removeClass(IN_PROGRESS_CLASS);\r\n            hide(getSpinner(id));\r\n        },\r\n\r\n        showSpinner: function(id) {\r\n            qq(getFile(id)).addClass(IN_PROGRESS_CLASS);\r\n            show(getSpinner(id));\r\n        },\r\n\r\n        generatePreview: function(id, optFileOrBlob, customResizeFunction) {\r\n            if (!this.isHiddenForever(id)) {\r\n                thumbGenerationQueue.push({id: id, customResizeFunction: customResizeFunction, optFileOrBlob: optFileOrBlob});\r\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\r\n            }\r\n        },\r\n\r\n        updateThumbnail: function(id, thumbnailUrl, showWaitingImg, customResizeFunction) {\r\n            if (!this.isHiddenForever(id)) {\r\n                thumbGenerationQueue.push({customResizeFunction: customResizeFunction, update: true, id: id, thumbnailUrl: thumbnailUrl, showWaitingImg: showWaitingImg});\r\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\r\n            }\r\n        },\r\n\r\n        hasDialog: function(type) {\r\n            return qq.supportedFeatures.dialogElement && !!getDialog(type);\r\n        },\r\n\r\n        showDialog: function(type, message, defaultValue) {\r\n            var dialog = getDialog(type),\r\n                messageEl = getTemplateEl(dialog, selectorClasses.dialogMessage),\r\n                inputEl = dialog.getElementsByTagName(\"INPUT\")[0],\r\n                cancelBtn = getTemplateEl(dialog, selectorClasses.dialogCancelButton),\r\n                okBtn = getTemplateEl(dialog, selectorClasses.dialogOkButton),\r\n                promise = new qq.Promise(),\r\n\r\n                closeHandler = function() {\r\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\r\n                    okBtn && okBtn.removeEventListener(\"click\", okClickHandler);\r\n                    promise.failure();\r\n                },\r\n\r\n                cancelClickHandler = function() {\r\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\r\n                    dialog.close();\r\n                },\r\n\r\n                okClickHandler = function() {\r\n                    dialog.removeEventListener(\"close\", closeHandler);\r\n                    okBtn.removeEventListener(\"click\", okClickHandler);\r\n                    dialog.close();\r\n\r\n                    promise.success(inputEl && inputEl.value);\r\n                };\r\n\r\n            dialog.addEventListener(\"close\", closeHandler);\r\n            cancelBtn.addEventListener(\"click\", cancelClickHandler);\r\n            okBtn && okBtn.addEventListener(\"click\", okClickHandler);\r\n\r\n            if (inputEl) {\r\n                inputEl.value = defaultValue;\r\n            }\r\n            messageEl.textContent = message;\r\n\r\n            dialog.showModal();\r\n\r\n            return promise;\r\n        }\r\n    });\r\n};\r\n","/*globals qq */\r\n// Base handler for UI (FineUploader mode) events.\r\n// Some more specific handlers inherit from this one.\r\nqq.UiEventHandler = function(s, protectedApi) {\r\n    \"use strict\";\r\n\r\n    var disposer = new qq.DisposeSupport(),\r\n        spec = {\r\n            eventType: \"click\",\r\n            attachTo: null,\r\n            onHandled: function(target, event) {}\r\n        };\r\n\r\n    // This makes up the \"public\" API methods that will be accessible\r\n    // to instances constructing a base or child handler\r\n    qq.extend(this, {\r\n        addHandler: function(element) {\r\n            addHandler(element);\r\n        },\r\n\r\n        dispose: function() {\r\n            disposer.dispose();\r\n        }\r\n    });\r\n\r\n    function addHandler(element) {\r\n        disposer.attach(element, spec.eventType, function(event) {\r\n            // Only in IE: the `event` is a property of the `window`.\r\n            event = event || window.event;\r\n\r\n            // On older browsers, we must check the `srcElement` instead of the `target`.\r\n            var target = event.target || event.srcElement;\r\n\r\n            spec.onHandled(target, event);\r\n        });\r\n    }\r\n\r\n    // These make up the \"protected\" API methods that children of this base handler will utilize.\r\n    qq.extend(protectedApi, {\r\n        getFileIdFromItem: function(item) {\r\n            return item.qqFileId;\r\n        },\r\n\r\n        getDisposeSupport: function() {\r\n            return disposer;\r\n        }\r\n    });\r\n\r\n    qq.extend(spec, s);\r\n\r\n    if (spec.attachTo) {\r\n        addHandler(spec.attachTo);\r\n    }\r\n};\r\n","/* global qq */\r\nqq.FileButtonsClickHandler = function(s) {\r\n    \"use strict\";\r\n\r\n    var inheritedInternalApi = {},\r\n        spec = {\r\n            templating: null,\r\n            log: function(message, lvl) {},\r\n            onDeleteFile: function(fileId) {},\r\n            onCancel: function(fileId) {},\r\n            onRetry: function(fileId) {},\r\n            onPause: function(fileId) {},\r\n            onContinue: function(fileId) {},\r\n            onGetName: function(fileId) {}\r\n        },\r\n        buttonHandlers = {\r\n            cancel: function(id) { spec.onCancel(id); },\r\n            retry:  function(id) { spec.onRetry(id); },\r\n            deleteButton: function(id) { spec.onDeleteFile(id); },\r\n            pause: function(id) { spec.onPause(id); },\r\n            continueButton: function(id) { spec.onContinue(id); }\r\n        };\r\n\r\n    function examineEvent(target, event) {\r\n        qq.each(buttonHandlers, function(buttonType, handler) {\r\n            var firstLetterCapButtonType = buttonType.charAt(0).toUpperCase() + buttonType.slice(1),\r\n                fileId;\r\n\r\n            if (spec.templating[\"is\" + firstLetterCapButtonType](target)) {\r\n                fileId = spec.templating.getFileId(target);\r\n                qq.preventDefault(event);\r\n                spec.log(qq.format(\"Detected valid file button click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\r\n                handler(fileId);\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n\r\n    qq.extend(spec, s);\r\n\r\n    spec.eventType = \"click\";\r\n    spec.onHandled = examineEvent;\r\n    spec.attachTo = spec.templating.getFileList();\r\n\r\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\r\n};\r\n","/*globals qq */\r\n// Child of FilenameEditHandler.  Used to detect click events on filename display elements.\r\nqq.FilenameClickHandler = function(s) {\r\n    \"use strict\";\r\n\r\n    var inheritedInternalApi = {},\r\n        spec = {\r\n            templating: null,\r\n            log: function(message, lvl) {},\r\n            classes: {\r\n                file: \"qq-upload-file\",\r\n                editNameIcon: \"qq-edit-filename-icon\"\r\n            },\r\n            onGetUploadStatus: function(fileId) {},\r\n            onGetName: function(fileId) {}\r\n        };\r\n\r\n    qq.extend(spec, s);\r\n\r\n    // This will be called by the parent handler when a `click` event is received on the list element.\r\n    function examineEvent(target, event) {\r\n        if (spec.templating.isFileName(target) || spec.templating.isEditIcon(target)) {\r\n            var fileId = spec.templating.getFileId(target),\r\n                status = spec.onGetUploadStatus(fileId);\r\n\r\n            // We only allow users to change filenames of files that have been submitted but not yet uploaded.\r\n            if (status === qq.status.SUBMITTED) {\r\n                spec.log(qq.format(\"Detected valid filename click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\r\n                qq.preventDefault(event);\r\n\r\n                inheritedInternalApi.handleFilenameEdit(fileId, target, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    spec.eventType = \"click\";\r\n    spec.onHandled = examineEvent;\r\n\r\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\r\n};\r\n","/*globals qq */\r\n// Child of FilenameEditHandler.  Used to detect focusin events on file edit input elements.\r\nqq.FilenameInputFocusInHandler = function(s, inheritedInternalApi) {\r\n    \"use strict\";\r\n\r\n    var spec = {\r\n            templating: null,\r\n            onGetUploadStatus: function(fileId) {},\r\n            log: function(message, lvl) {}\r\n        };\r\n\r\n    if (!inheritedInternalApi) {\r\n        inheritedInternalApi = {};\r\n    }\r\n\r\n    // This will be called by the parent handler when a `focusin` event is received on the list element.\r\n    function handleInputFocus(target, event) {\r\n        if (spec.templating.isEditInput(target)) {\r\n            var fileId = spec.templating.getFileId(target),\r\n                status = spec.onGetUploadStatus(fileId);\r\n\r\n            if (status === qq.status.SUBMITTED) {\r\n                spec.log(qq.format(\"Detected valid filename input focus event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\r\n                inheritedInternalApi.handleFilenameEdit(fileId, target);\r\n            }\r\n        }\r\n    }\r\n\r\n    spec.eventType = \"focusin\";\r\n    spec.onHandled = handleInputFocus;\r\n\r\n    qq.extend(spec, s);\r\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\r\n};\r\n","/*globals qq */\r\n/**\r\n * Child of FilenameInputFocusInHandler.  Used to detect focus events on file edit input elements.  This child module is only\r\n * needed for UAs that do not support the focusin event.  Currently, only Firefox lacks this event.\r\n *\r\n * @param spec Overrides for default specifications\r\n */\r\nqq.FilenameInputFocusHandler = function(spec) {\r\n    \"use strict\";\r\n\r\n    spec.eventType = \"focus\";\r\n    spec.attachTo = null;\r\n\r\n    qq.extend(this, new qq.FilenameInputFocusInHandler(spec, {}));\r\n};\r\n","/*globals qq */\r\n// Handles edit-related events on a file item (FineUploader mode).  This is meant to be a parent handler.\r\n// Children will delegate to this handler when specific edit-related actions are detected.\r\nqq.FilenameEditHandler = function(s, inheritedInternalApi) {\r\n    \"use strict\";\r\n\r\n    var spec = {\r\n            templating: null,\r\n            log: function(message, lvl) {},\r\n            onGetUploadStatus: function(fileId) {},\r\n            onGetName: function(fileId) {},\r\n            onSetName: function(fileId, newName) {},\r\n            onEditingStatusChange: function(fileId, isEditing) {}\r\n        };\r\n\r\n    function getFilenameSansExtension(fileId) {\r\n        var filenameSansExt = spec.onGetName(fileId),\r\n            extIdx = filenameSansExt.lastIndexOf(\".\");\r\n\r\n        if (extIdx > 0) {\r\n            filenameSansExt = filenameSansExt.substr(0, extIdx);\r\n        }\r\n\r\n        return filenameSansExt;\r\n    }\r\n\r\n    function getOriginalExtension(fileId) {\r\n        var origName = spec.onGetName(fileId);\r\n        return qq.getExtension(origName);\r\n    }\r\n\r\n    // Callback iff the name has been changed\r\n    function handleNameUpdate(newFilenameInputEl, fileId) {\r\n        var newName = newFilenameInputEl.value,\r\n            origExtension;\r\n\r\n        if (newName !== undefined && qq.trimStr(newName).length > 0) {\r\n            origExtension = getOriginalExtension(fileId);\r\n\r\n            if (origExtension !== undefined) {\r\n                newName = newName + \".\" + origExtension;\r\n            }\r\n\r\n            spec.onSetName(fileId, newName);\r\n        }\r\n\r\n        spec.onEditingStatusChange(fileId, false);\r\n    }\r\n\r\n    // The name has been updated if the filename edit input loses focus.\r\n    function registerInputBlurHandler(inputEl, fileId) {\r\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"blur\", function() {\r\n            handleNameUpdate(inputEl, fileId);\r\n        });\r\n    }\r\n\r\n    // The name has been updated if the user presses enter.\r\n    function registerInputEnterKeyHandler(inputEl, fileId) {\r\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"keyup\", function(event) {\r\n\r\n            var code = event.keyCode || event.which;\r\n\r\n            if (code === 13) {\r\n                handleNameUpdate(inputEl, fileId);\r\n            }\r\n        });\r\n    }\r\n\r\n    qq.extend(spec, s);\r\n\r\n    spec.attachTo = spec.templating.getFileList();\r\n\r\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\r\n\r\n    qq.extend(inheritedInternalApi, {\r\n        handleFilenameEdit: function(id, target, focusInput) {\r\n            var newFilenameInputEl = spec.templating.getEditInput(id);\r\n\r\n            spec.onEditingStatusChange(id, true);\r\n\r\n            newFilenameInputEl.value = getFilenameSansExtension(id);\r\n\r\n            if (focusInput) {\r\n                newFilenameInputEl.focus();\r\n            }\r\n\r\n            registerInputBlurHandler(newFilenameInputEl, id);\r\n            registerInputEnterKeyHandler(newFilenameInputEl, id);\r\n        }\r\n    });\r\n};\r\n","/*globals qq */\r\n/**\r\n * This defines FineUploader mode w/ support for uploading to Azure, which provides all the basic\r\n * functionality of Fine Uploader as well as code to handle uploads directly to Azure.\r\n * This module inherits all logic from UI & core mode and adds some UI-related logic\r\n * specific to the upload-to-Azure workflow.  Some inherited options and API methods have a special meaning\r\n * in the context of the Azure uploader.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.azure.FineUploader = function(o) {\r\n        var options = {\r\n            failedUploadTextDisplay: {\r\n                mode: \"custom\"\r\n            }\r\n        };\r\n\r\n        // Replace any default options with user defined ones\r\n        qq.extend(options, o, true);\r\n\r\n        // Inherit instance data from FineUploader, which should in turn inherit from azure.FineUploaderBasic.\r\n        qq.FineUploader.call(this, options, \"azure\");\r\n    };\r\n\r\n    // Inherit the API methods from FineUploaderBasicS3\r\n    qq.extend(qq.azure.FineUploader.prototype, qq.azure.FineUploaderBasic.prototype);\r\n\r\n    // Inherit public and private API methods related to UI\r\n    qq.extend(qq.azure.FineUploader.prototype, qq.uiPublicApi);\r\n    qq.extend(qq.azure.FineUploader.prototype, qq.uiPrivateApi);\r\n\r\n    // Define public & private API methods for this module.\r\n    qq.extend(qq.azure.FineUploader.prototype, {\r\n    });\r\n}());\r\n"]}